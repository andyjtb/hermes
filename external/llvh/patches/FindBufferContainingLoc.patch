diff --git a/include/llvh/Support/SourceMgr.h b/include/llvh/Support/SourceMgr.h
--- a/include/llvh/Support/SourceMgr.h
+++ b/include/llvh/Support/SourceMgr.h
@@ -95,6 +95,24 @@
   /// This is all of the buffers that we are reading from.
   std::vector<SrcBuffer> Buffers;
 
+  /// This describes the end address of one buffer and which buffer it is.
+  struct BufferEnd {
+    /// The end address (exclusive) of the corresponding buffer.
+    const char * End;
+    /// The id of the corresponding buffer.
+    unsigned BufId;
+
+    BufferEnd(char const *End, unsigned BufId)
+        : End(End), BufId(BufId) {}
+  };
+
+  /// The end addresses of all buffers, possibly sorted.
+  mutable std::vector<BufferEnd> BufferEnds;
+
+  /// Is the BufferEnds vector sorted. We clear this when we add a new buffer,
+  /// and sort and set it when we need to find a buffer by address.
+  mutable bool BufferEndsSorted = false;
+
   // This is the list of directories we should search for include files in.
   std::vector<std::string> IncludeDirectories;
 
@@ -151,11 +169,15 @@
   /// the memory buffer.
   unsigned AddNewSourceBuffer(std::unique_ptr<MemoryBuffer> F,
                               SMLoc IncludeLoc) {
+    const char * End = F->getBufferEnd();
     SrcBuffer NB;
     NB.Buffer = std::move(F);
     NB.IncludeLoc = IncludeLoc;
     Buffers.push_back(std::move(NB));
-    return Buffers.size();
+    unsigned BufId = Buffers.size();
+    BufferEnds.emplace_back(End, BufId);
+    BufferEndsSorted = false;
+    return BufId;
   }
 
   /// Search for a file with the specified name in the current directory or in
diff --git a/lib/Support/SourceMgr.cpp b/lib/Support/SourceMgr.cpp
--- a/lib/Support/SourceMgr.cpp
+++ b/lib/Support/SourceMgr.cpp
@@ -59,12 +59,40 @@
 }
 
 unsigned SourceMgr::FindBufferContainingLoc(SMLoc Loc) const {
-  for (unsigned i = 0, e = Buffers.size(); i != e; ++i)
-    if (Loc.getPointer() >= Buffers[i].Buffer->getBufferStart() &&
-        // Use <= here so that a pointer to the null at the end of the buffer
-        // is included as part of the buffer.
-        Loc.getPointer() <= Buffers[i].Buffer->getBufferEnd())
-      return i + 1;
+  if (Buffers.size() <= 4) {
+    for (unsigned i = 0, e = Buffers.size(); i != e; ++i)
+      if (Loc.getPointer() >= Buffers[i].Buffer->getBufferStart() &&
+          // Use <= here so that a pointer to the null at the end of the buffer
+          // is included as part of the buffer.
+          Loc.getPointer() <= Buffers[i].Buffer->getBufferEnd())
+        return i + 1;
+    return 0;
+  }
+
+  if (!BufferEndsSorted) {
+    // Use qsort() to save some binary size.
+    ::qsort(
+        BufferEnds.data(),
+        BufferEnds.size(),
+        sizeof(BufferEnds[0]),
+        [](const void *a, const void *b) -> int {
+          const auto *EndA = reinterpret_cast<const BufferEnd *>(a)->End;
+          const auto *EndB = reinterpret_cast<const BufferEnd *>(b)->End;
+          return EndA < EndB ? -1 : EndA == EndB ? 0 : +1;
+        });
+    BufferEndsSorted = true;
+  }
+
+  auto it = std::lower_bound(
+      BufferEnds.begin(),
+      BufferEnds.end(),
+      Loc.getPointer(),
+      [](const BufferEnd &a, const char *loc) { return a.End < loc; });
+  if (it != BufferEnds.end() &&
+      Loc.getPointer() >= Buffers[it->BufId - 1].Buffer->getBufferStart()) {
+    return it->BufId;
+  }
+
   return 0;
 }
 
