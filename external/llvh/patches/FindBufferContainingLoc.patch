diff --git a/include/llvh/Support/SourceMgr.h b/include/llvh/Support/SourceMgr.h
--- a/include/llvh/Support/SourceMgr.h
+++ b/include/llvh/Support/SourceMgr.h
@@ -30,6 +30,7 @@
 #include <string>
 #include <utility>
 #include <vector>
+#include <map>
 
 namespace llvh {
 
@@ -95,6 +96,12 @@
   /// This is all of the buffers that we are reading from.
   std::vector<SrcBuffer> Buffers;
 
+  /// The end addresses of all buffers.
+  std::map<const char *, unsigned> BufferEnds;
+
+  /// The id of the buffer which FindBufferContainingLoc() found last.
+  mutable unsigned LastFoundBufId = 0;
+
   // This is the list of directories we should search for include files in.
   std::vector<std::string> IncludeDirectories;
 
@@ -151,11 +158,14 @@
   /// the memory buffer.
   unsigned AddNewSourceBuffer(std::unique_ptr<MemoryBuffer> F,
                               SMLoc IncludeLoc) {
+    const char * End = F->getBufferEnd();
     SrcBuffer NB;
     NB.Buffer = std::move(F);
     NB.IncludeLoc = IncludeLoc;
     Buffers.push_back(std::move(NB));
-    return Buffers.size();
+    unsigned BufId = Buffers.size();
+    BufferEnds.emplace(End, BufId);
+    return BufId;
   }
 
   /// Search for a file with the specified name in the current directory or in
diff --git a/lib/Support/SourceMgr.cpp b/lib/Support/SourceMgr.cpp
--- a/lib/Support/SourceMgr.cpp
+++ b/lib/Support/SourceMgr.cpp
@@ -59,12 +59,23 @@
 }
 
 unsigned SourceMgr::FindBufferContainingLoc(SMLoc Loc) const {
-  for (unsigned i = 0, e = Buffers.size(); i != e; ++i)
-    if (Loc.getPointer() >= Buffers[i].Buffer->getBufferStart() &&
-        // Use <= here so that a pointer to the null at the end of the buffer
-        // is included as part of the buffer.
-        Loc.getPointer() <= Buffers[i].Buffer->getBufferEnd())
-      return i + 1;
+  // Check the last buffer we found. Most searches are likely to be in the same
+  // one.
+  if (LLVM_LIKELY(
+          LastFoundBufId &&
+          Loc.getPointer() >=
+              Buffers[LastFoundBufId - 1].Buffer->getBufferStart() &&
+          Loc.getPointer() <=
+              Buffers[LastFoundBufId - 1].Buffer->getBufferEnd())) {
+    return LastFoundBufId;
+  }
+
+  auto it = BufferEnds.lower_bound(Loc.getPointer());
+  if (it != BufferEnds.end() &&
+      Loc.getPointer() >= Buffers[it->second - 1].Buffer->getBufferStart()) {
+    return LastFoundBufId = it->second;
+  }
+
   return 0;
 }
 
