/*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

// @generated by Hermes rustgen
// DO NOT EDIT

use hermes::parser::*;
use super::convert::*;
use crate::ast;

pub unsafe fn cvt_node_ptr(cvt: &mut Converter, n: NodePtr) -> ast::NodePtr {
    let nr = n.as_ref();
    let range = ast::SourceRange {
        file: cvt.file_id,
        start: cvt.cvt_smloc(nr.source_range.start),
        end: ast::SourceLoc::invalid(),
    };

    let res = match nr.kind {
        NodeKind::Empty => {
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::Empty(ast::Empty {
                }),
            }
          )
        }
        NodeKind::Metadata => {
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::Metadata(ast::Metadata {
                }),
            }
          )
        }
        NodeKind::Program => {
          let body = cvt_node_list(cvt, hermes_get_Program_body(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::Program(ast::Program {
                    body,
                }),
            }
          )
        }
        NodeKind::FunctionExpression => {
          let id = cvt_node_ptr_opt(cvt, hermes_get_FunctionExpression_id(n));
          let params = cvt_node_list(cvt, hermes_get_FunctionExpression_params(n));
          let body = cvt_node_ptr(cvt, hermes_get_FunctionExpression_body(n));
          let type_parameters = cvt_node_ptr_opt(cvt, hermes_get_FunctionExpression_typeParameters(n));
          let return_type = cvt_node_ptr_opt(cvt, hermes_get_FunctionExpression_returnType(n));
          let predicate = cvt_node_ptr_opt(cvt, hermes_get_FunctionExpression_predicate(n));
          let generator = hermes_get_FunctionExpression_generator(n);
          let is_async = hermes_get_FunctionExpression_async(n);
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::FunctionExpression(ast::FunctionExpression {
                    id,
                    params,
                    body,
                    type_parameters,
                    return_type,
                    predicate,
                    generator,
                    is_async,
                }),
            }
          )
        }
        NodeKind::ArrowFunctionExpression => {
          let id = cvt_node_ptr_opt(cvt, hermes_get_ArrowFunctionExpression_id(n));
          let params = cvt_node_list(cvt, hermes_get_ArrowFunctionExpression_params(n));
          let body = cvt_node_ptr(cvt, hermes_get_ArrowFunctionExpression_body(n));
          let type_parameters = cvt_node_ptr_opt(cvt, hermes_get_ArrowFunctionExpression_typeParameters(n));
          let return_type = cvt_node_ptr_opt(cvt, hermes_get_ArrowFunctionExpression_returnType(n));
          let predicate = cvt_node_ptr_opt(cvt, hermes_get_ArrowFunctionExpression_predicate(n));
          let expression = hermes_get_ArrowFunctionExpression_expression(n);
          let is_async = hermes_get_ArrowFunctionExpression_async(n);
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::ArrowFunctionExpression(ast::ArrowFunctionExpression {
                    id,
                    params,
                    body,
                    type_parameters,
                    return_type,
                    predicate,
                    expression,
                    is_async,
                }),
            }
          )
        }
        NodeKind::FunctionDeclaration => {
          let id = cvt_node_ptr_opt(cvt, hermes_get_FunctionDeclaration_id(n));
          let params = cvt_node_list(cvt, hermes_get_FunctionDeclaration_params(n));
          let body = cvt_node_ptr(cvt, hermes_get_FunctionDeclaration_body(n));
          let type_parameters = cvt_node_ptr_opt(cvt, hermes_get_FunctionDeclaration_typeParameters(n));
          let return_type = cvt_node_ptr_opt(cvt, hermes_get_FunctionDeclaration_returnType(n));
          let predicate = cvt_node_ptr_opt(cvt, hermes_get_FunctionDeclaration_predicate(n));
          let generator = hermes_get_FunctionDeclaration_generator(n);
          let is_async = hermes_get_FunctionDeclaration_async(n);
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::FunctionDeclaration(ast::FunctionDeclaration {
                    id,
                    params,
                    body,
                    type_parameters,
                    return_type,
                    predicate,
                    generator,
                    is_async,
                }),
            }
          )
        }
        NodeKind::WhileStatement => {
          let body = cvt_node_ptr(cvt, hermes_get_WhileStatement_body(n));
          let test = cvt_node_ptr(cvt, hermes_get_WhileStatement_test(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::WhileStatement(ast::WhileStatement {
                    body,
                    test,
                }),
            }
          )
        }
        NodeKind::DoWhileStatement => {
          let body = cvt_node_ptr(cvt, hermes_get_DoWhileStatement_body(n));
          let test = cvt_node_ptr(cvt, hermes_get_DoWhileStatement_test(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::DoWhileStatement(ast::DoWhileStatement {
                    body,
                    test,
                }),
            }
          )
        }
        NodeKind::ForInStatement => {
          let left = cvt_node_ptr(cvt, hermes_get_ForInStatement_left(n));
          let right = cvt_node_ptr(cvt, hermes_get_ForInStatement_right(n));
          let body = cvt_node_ptr(cvt, hermes_get_ForInStatement_body(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::ForInStatement(ast::ForInStatement {
                    left,
                    right,
                    body,
                }),
            }
          )
        }
        NodeKind::ForOfStatement => {
          let left = cvt_node_ptr(cvt, hermes_get_ForOfStatement_left(n));
          let right = cvt_node_ptr(cvt, hermes_get_ForOfStatement_right(n));
          let body = cvt_node_ptr(cvt, hermes_get_ForOfStatement_body(n));
          let is_await = hermes_get_ForOfStatement_await(n);
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::ForOfStatement(ast::ForOfStatement {
                    left,
                    right,
                    body,
                    is_await,
                }),
            }
          )
        }
        NodeKind::ForStatement => {
          let init = cvt_node_ptr_opt(cvt, hermes_get_ForStatement_init(n));
          let test = cvt_node_ptr_opt(cvt, hermes_get_ForStatement_test(n));
          let update = cvt_node_ptr_opt(cvt, hermes_get_ForStatement_update(n));
          let body = cvt_node_ptr(cvt, hermes_get_ForStatement_body(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::ForStatement(ast::ForStatement {
                    init,
                    test,
                    update,
                    body,
                }),
            }
          )
        }
        NodeKind::DebuggerStatement => {
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::DebuggerStatement(ast::DebuggerStatement {
                }),
            }
          )
        }
        NodeKind::EmptyStatement => {
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::EmptyStatement(ast::EmptyStatement {
                }),
            }
          )
        }
        NodeKind::BlockStatement => {
          let body = cvt_node_list(cvt, hermes_get_BlockStatement_body(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::BlockStatement(ast::BlockStatement {
                    body,
                }),
            }
          )
        }
        NodeKind::BreakStatement => {
          let label = cvt_node_ptr_opt(cvt, hermes_get_BreakStatement_label(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::BreakStatement(ast::BreakStatement {
                    label,
                }),
            }
          )
        }
        NodeKind::ContinueStatement => {
          let label = cvt_node_ptr_opt(cvt, hermes_get_ContinueStatement_label(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::ContinueStatement(ast::ContinueStatement {
                    label,
                }),
            }
          )
        }
        NodeKind::ThrowStatement => {
          let argument = cvt_node_ptr(cvt, hermes_get_ThrowStatement_argument(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::ThrowStatement(ast::ThrowStatement {
                    argument,
                }),
            }
          )
        }
        NodeKind::ReturnStatement => {
          let argument = cvt_node_ptr_opt(cvt, hermes_get_ReturnStatement_argument(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::ReturnStatement(ast::ReturnStatement {
                    argument,
                }),
            }
          )
        }
        NodeKind::WithStatement => {
          let object = cvt_node_ptr(cvt, hermes_get_WithStatement_object(n));
          let body = cvt_node_ptr(cvt, hermes_get_WithStatement_body(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::WithStatement(ast::WithStatement {
                    object,
                    body,
                }),
            }
          )
        }
        NodeKind::SwitchStatement => {
          let discriminant = cvt_node_ptr(cvt, hermes_get_SwitchStatement_discriminant(n));
          let cases = cvt_node_list(cvt, hermes_get_SwitchStatement_cases(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::SwitchStatement(ast::SwitchStatement {
                    discriminant,
                    cases,
                }),
            }
          )
        }
        NodeKind::LabeledStatement => {
          let label = cvt_node_ptr(cvt, hermes_get_LabeledStatement_label(n));
          let body = cvt_node_ptr(cvt, hermes_get_LabeledStatement_body(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::LabeledStatement(ast::LabeledStatement {
                    label,
                    body,
                }),
            }
          )
        }
        NodeKind::ExpressionStatement => {
          let expression = cvt_node_ptr(cvt, hermes_get_ExpressionStatement_expression(n));
          let directive = cvt_string_opt(hermes_get_ExpressionStatement_directive(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::ExpressionStatement(ast::ExpressionStatement {
                    expression,
                    directive,
                }),
            }
          )
        }
        NodeKind::TryStatement => {
          let block = cvt_node_ptr(cvt, hermes_get_TryStatement_block(n));
          let handler = cvt_node_ptr_opt(cvt, hermes_get_TryStatement_handler(n));
          let finalizer = cvt_node_ptr_opt(cvt, hermes_get_TryStatement_finalizer(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::TryStatement(ast::TryStatement {
                    block,
                    handler,
                    finalizer,
                }),
            }
          )
        }
        NodeKind::IfStatement => {
          let test = cvt_node_ptr(cvt, hermes_get_IfStatement_test(n));
          let consequent = cvt_node_ptr(cvt, hermes_get_IfStatement_consequent(n));
          let alternate = cvt_node_ptr_opt(cvt, hermes_get_IfStatement_alternate(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::IfStatement(ast::IfStatement {
                    test,
                    consequent,
                    alternate,
                }),
            }
          )
        }
        NodeKind::NullLiteral => {
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::NullLiteral(ast::NullLiteral {
                }),
            }
          )
        }
        NodeKind::BooleanLiteral => {
          let value = hermes_get_BooleanLiteral_value(n);
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::BooleanLiteral(ast::BooleanLiteral {
                    value,
                }),
            }
          )
        }
        NodeKind::StringLiteral => {
          let value = cvt_string(hermes_get_StringLiteral_value(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::StringLiteral(ast::StringLiteral {
                    value,
                }),
            }
          )
        }
        NodeKind::NumericLiteral => {
          let value = hermes_get_NumericLiteral_value(n);
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::NumericLiteral(ast::NumericLiteral {
                    value,
                }),
            }
          )
        }
        NodeKind::RegExpLiteral => {
          let pattern = cvt_label(hermes_get_RegExpLiteral_pattern(n));
          let flags = cvt_label(hermes_get_RegExpLiteral_flags(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::RegExpLiteral(ast::RegExpLiteral {
                    pattern,
                    flags,
                }),
            }
          )
        }
        NodeKind::ThisExpression => {
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::ThisExpression(ast::ThisExpression {
                }),
            }
          )
        }
        NodeKind::Super => {
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::Super(ast::Super {
                }),
            }
          )
        }
        NodeKind::SequenceExpression => {
          let expressions = cvt_node_list(cvt, hermes_get_SequenceExpression_expressions(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::SequenceExpression(ast::SequenceExpression {
                    expressions,
                }),
            }
          )
        }
        NodeKind::ObjectExpression => {
          let properties = cvt_node_list(cvt, hermes_get_ObjectExpression_properties(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::ObjectExpression(ast::ObjectExpression {
                    properties,
                }),
            }
          )
        }
        NodeKind::ArrayExpression => {
          let elements = cvt_node_list(cvt, hermes_get_ArrayExpression_elements(n));
          let trailing_comma = hermes_get_ArrayExpression_trailingComma(n);
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::ArrayExpression(ast::ArrayExpression {
                    elements,
                    trailing_comma,
                }),
            }
          )
        }
        NodeKind::SpreadElement => {
          let argument = cvt_node_ptr(cvt, hermes_get_SpreadElement_argument(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::SpreadElement(ast::SpreadElement {
                    argument,
                }),
            }
          )
        }
        NodeKind::NewExpression => {
          let callee = cvt_node_ptr(cvt, hermes_get_NewExpression_callee(n));
          let type_arguments = cvt_node_ptr_opt(cvt, hermes_get_NewExpression_typeArguments(n));
          let arguments = cvt_node_list(cvt, hermes_get_NewExpression_arguments(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::NewExpression(ast::NewExpression {
                    callee,
                    type_arguments,
                    arguments,
                }),
            }
          )
        }
        NodeKind::YieldExpression => {
          let argument = cvt_node_ptr_opt(cvt, hermes_get_YieldExpression_argument(n));
          let delegate = hermes_get_YieldExpression_delegate(n);
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::YieldExpression(ast::YieldExpression {
                    argument,
                    delegate,
                }),
            }
          )
        }
        NodeKind::AwaitExpression => {
          let argument = cvt_node_ptr(cvt, hermes_get_AwaitExpression_argument(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::AwaitExpression(ast::AwaitExpression {
                    argument,
                }),
            }
          )
        }
        NodeKind::ImportExpression => {
          let source = cvt_node_ptr(cvt, hermes_get_ImportExpression_source(n));
          let attributes = cvt_node_ptr_opt(cvt, hermes_get_ImportExpression_attributes(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::ImportExpression(ast::ImportExpression {
                    source,
                    attributes,
                }),
            }
          )
        }
        NodeKind::CallExpression => {
          let callee = cvt_node_ptr(cvt, hermes_get_CallExpression_callee(n));
          let type_arguments = cvt_node_ptr_opt(cvt, hermes_get_CallExpression_typeArguments(n));
          let arguments = cvt_node_list(cvt, hermes_get_CallExpression_arguments(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::CallExpression(ast::CallExpression {
                    callee,
                    type_arguments,
                    arguments,
                }),
            }
          )
        }
        NodeKind::OptionalCallExpression => {
          let callee = cvt_node_ptr(cvt, hermes_get_OptionalCallExpression_callee(n));
          let type_arguments = cvt_node_ptr_opt(cvt, hermes_get_OptionalCallExpression_typeArguments(n));
          let arguments = cvt_node_list(cvt, hermes_get_OptionalCallExpression_arguments(n));
          let optional = hermes_get_OptionalCallExpression_optional(n);
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::OptionalCallExpression(ast::OptionalCallExpression {
                    callee,
                    type_arguments,
                    arguments,
                    optional,
                }),
            }
          )
        }
        NodeKind::AssignmentExpression => {
          let operator = cvt_enum(hermes_get_AssignmentExpression_operator(n));
          let left = cvt_node_ptr(cvt, hermes_get_AssignmentExpression_left(n));
          let right = cvt_node_ptr(cvt, hermes_get_AssignmentExpression_right(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::AssignmentExpression(ast::AssignmentExpression {
                    operator,
                    left,
                    right,
                }),
            }
          )
        }
        NodeKind::UnaryExpression => {
          let operator = cvt_enum(hermes_get_UnaryExpression_operator(n));
          let argument = cvt_node_ptr(cvt, hermes_get_UnaryExpression_argument(n));
          let prefix = hermes_get_UnaryExpression_prefix(n);
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::UnaryExpression(ast::UnaryExpression {
                    operator,
                    argument,
                    prefix,
                }),
            }
          )
        }
        NodeKind::UpdateExpression => {
          let operator = cvt_enum(hermes_get_UpdateExpression_operator(n));
          let argument = cvt_node_ptr(cvt, hermes_get_UpdateExpression_argument(n));
          let prefix = hermes_get_UpdateExpression_prefix(n);
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::UpdateExpression(ast::UpdateExpression {
                    operator,
                    argument,
                    prefix,
                }),
            }
          )
        }
        NodeKind::MemberExpression => {
          let object = cvt_node_ptr(cvt, hermes_get_MemberExpression_object(n));
          let property = cvt_node_ptr(cvt, hermes_get_MemberExpression_property(n));
          let computed = hermes_get_MemberExpression_computed(n);
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::MemberExpression(ast::MemberExpression {
                    object,
                    property,
                    computed,
                }),
            }
          )
        }
        NodeKind::OptionalMemberExpression => {
          let object = cvt_node_ptr(cvt, hermes_get_OptionalMemberExpression_object(n));
          let property = cvt_node_ptr(cvt, hermes_get_OptionalMemberExpression_property(n));
          let computed = hermes_get_OptionalMemberExpression_computed(n);
          let optional = hermes_get_OptionalMemberExpression_optional(n);
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::OptionalMemberExpression(ast::OptionalMemberExpression {
                    object,
                    property,
                    computed,
                    optional,
                }),
            }
          )
        }
        NodeKind::LogicalExpression => {
          let left = cvt_node_ptr(cvt, hermes_get_LogicalExpression_left(n));
          let right = cvt_node_ptr(cvt, hermes_get_LogicalExpression_right(n));
          let operator = cvt_enum(hermes_get_LogicalExpression_operator(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::LogicalExpression(ast::LogicalExpression {
                    left,
                    right,
                    operator,
                }),
            }
          )
        }
        NodeKind::ConditionalExpression => {
          let test = cvt_node_ptr(cvt, hermes_get_ConditionalExpression_test(n));
          let alternate = cvt_node_ptr(cvt, hermes_get_ConditionalExpression_alternate(n));
          let consequent = cvt_node_ptr(cvt, hermes_get_ConditionalExpression_consequent(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::ConditionalExpression(ast::ConditionalExpression {
                    test,
                    alternate,
                    consequent,
                }),
            }
          )
        }
        NodeKind::BinaryExpression => {
          let left = cvt_node_ptr(cvt, hermes_get_BinaryExpression_left(n));
          let right = cvt_node_ptr(cvt, hermes_get_BinaryExpression_right(n));
          let operator = cvt_enum(hermes_get_BinaryExpression_operator(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::BinaryExpression(ast::BinaryExpression {
                    left,
                    right,
                    operator,
                }),
            }
          )
        }
        NodeKind::Directive => {
          let value = cvt_node_ptr(cvt, hermes_get_Directive_value(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::Directive(ast::Directive {
                    value,
                }),
            }
          )
        }
        NodeKind::DirectiveLiteral => {
          let value = cvt_string(hermes_get_DirectiveLiteral_value(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::DirectiveLiteral(ast::DirectiveLiteral {
                    value,
                }),
            }
          )
        }
        NodeKind::Identifier => {
          let name = cvt_label(hermes_get_Identifier_name(n));
          let type_annotation = cvt_node_ptr_opt(cvt, hermes_get_Identifier_typeAnnotation(n));
          let optional = hermes_get_Identifier_optional(n);
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::Identifier(ast::Identifier {
                    name,
                    type_annotation,
                    optional,
                }),
            }
          )
        }
        NodeKind::PrivateName => {
          let id = cvt_node_ptr(cvt, hermes_get_PrivateName_id(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::PrivateName(ast::PrivateName {
                    id,
                }),
            }
          )
        }
        NodeKind::MetaProperty => {
          let meta = cvt_node_ptr(cvt, hermes_get_MetaProperty_meta(n));
          let property = cvt_node_ptr(cvt, hermes_get_MetaProperty_property(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::MetaProperty(ast::MetaProperty {
                    meta,
                    property,
                }),
            }
          )
        }
        NodeKind::SwitchCase => {
          let test = cvt_node_ptr_opt(cvt, hermes_get_SwitchCase_test(n));
          let consequent = cvt_node_list(cvt, hermes_get_SwitchCase_consequent(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::SwitchCase(ast::SwitchCase {
                    test,
                    consequent,
                }),
            }
          )
        }
        NodeKind::CatchClause => {
          let param = cvt_node_ptr_opt(cvt, hermes_get_CatchClause_param(n));
          let body = cvt_node_ptr(cvt, hermes_get_CatchClause_body(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::CatchClause(ast::CatchClause {
                    param,
                    body,
                }),
            }
          )
        }
        NodeKind::VariableDeclarator => {
          let init = cvt_node_ptr_opt(cvt, hermes_get_VariableDeclarator_init(n));
          let id = cvt_node_ptr(cvt, hermes_get_VariableDeclarator_id(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::VariableDeclarator(ast::VariableDeclarator {
                    init,
                    id,
                }),
            }
          )
        }
        NodeKind::VariableDeclaration => {
          let kind = cvt_enum(hermes_get_VariableDeclaration_kind(n));
          let declarations = cvt_node_list(cvt, hermes_get_VariableDeclaration_declarations(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::VariableDeclaration(ast::VariableDeclaration {
                    kind,
                    declarations,
                }),
            }
          )
        }
        NodeKind::TemplateLiteral => {
          let quasis = cvt_node_list(cvt, hermes_get_TemplateLiteral_quasis(n));
          let expressions = cvt_node_list(cvt, hermes_get_TemplateLiteral_expressions(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::TemplateLiteral(ast::TemplateLiteral {
                    quasis,
                    expressions,
                }),
            }
          )
        }
        NodeKind::TaggedTemplateExpression => {
          let tag = cvt_node_ptr(cvt, hermes_get_TaggedTemplateExpression_tag(n));
          let quasi = cvt_node_ptr(cvt, hermes_get_TaggedTemplateExpression_quasi(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::TaggedTemplateExpression(ast::TaggedTemplateExpression {
                    tag,
                    quasi,
                }),
            }
          )
        }
        NodeKind::TemplateElement => {
          let tail = hermes_get_TemplateElement_tail(n);
          let cooked = cvt_string_opt(hermes_get_TemplateElement_cooked(n));
          let raw = cvt_label(hermes_get_TemplateElement_raw(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::TemplateElement(ast::TemplateElement {
                    tail,
                    cooked,
                    raw,
                }),
            }
          )
        }
        NodeKind::Property => {
          let key = cvt_node_ptr(cvt, hermes_get_Property_key(n));
          let value = cvt_node_ptr(cvt, hermes_get_Property_value(n));
          let kind = cvt_enum(hermes_get_Property_kind(n));
          let computed = hermes_get_Property_computed(n);
          let method = hermes_get_Property_method(n);
          let shorthand = hermes_get_Property_shorthand(n);
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::Property(ast::Property {
                    key,
                    value,
                    kind,
                    computed,
                    method,
                    shorthand,
                }),
            }
          )
        }
        NodeKind::ClassDeclaration => {
          let id = cvt_node_ptr_opt(cvt, hermes_get_ClassDeclaration_id(n));
          let type_parameters = cvt_node_ptr_opt(cvt, hermes_get_ClassDeclaration_typeParameters(n));
          let super_class = cvt_node_ptr_opt(cvt, hermes_get_ClassDeclaration_superClass(n));
          let super_type_parameters = cvt_node_ptr_opt(cvt, hermes_get_ClassDeclaration_superTypeParameters(n));
          let implements = cvt_node_list(cvt, hermes_get_ClassDeclaration_implements(n));
          let decorators = cvt_node_list(cvt, hermes_get_ClassDeclaration_decorators(n));
          let body = cvt_node_ptr(cvt, hermes_get_ClassDeclaration_body(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::ClassDeclaration(ast::ClassDeclaration {
                    id,
                    type_parameters,
                    super_class,
                    super_type_parameters,
                    implements,
                    decorators,
                    body,
                }),
            }
          )
        }
        NodeKind::ClassExpression => {
          let id = cvt_node_ptr_opt(cvt, hermes_get_ClassExpression_id(n));
          let type_parameters = cvt_node_ptr_opt(cvt, hermes_get_ClassExpression_typeParameters(n));
          let super_class = cvt_node_ptr_opt(cvt, hermes_get_ClassExpression_superClass(n));
          let super_type_parameters = cvt_node_ptr_opt(cvt, hermes_get_ClassExpression_superTypeParameters(n));
          let implements = cvt_node_list(cvt, hermes_get_ClassExpression_implements(n));
          let decorators = cvt_node_list(cvt, hermes_get_ClassExpression_decorators(n));
          let body = cvt_node_ptr(cvt, hermes_get_ClassExpression_body(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::ClassExpression(ast::ClassExpression {
                    id,
                    type_parameters,
                    super_class,
                    super_type_parameters,
                    implements,
                    decorators,
                    body,
                }),
            }
          )
        }
        NodeKind::ClassBody => {
          let body = cvt_node_list(cvt, hermes_get_ClassBody_body(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::ClassBody(ast::ClassBody {
                    body,
                }),
            }
          )
        }
        NodeKind::ClassProperty => {
          let key = cvt_node_ptr(cvt, hermes_get_ClassProperty_key(n));
          let value = cvt_node_ptr_opt(cvt, hermes_get_ClassProperty_value(n));
          let computed = hermes_get_ClassProperty_computed(n);
          let is_static = hermes_get_ClassProperty_static(n);
          let declare = hermes_get_ClassProperty_declare(n);
          let optional = hermes_get_ClassProperty_optional(n);
          let variance = cvt_node_ptr_opt(cvt, hermes_get_ClassProperty_variance(n));
          let type_annotation = cvt_node_ptr_opt(cvt, hermes_get_ClassProperty_typeAnnotation(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::ClassProperty(ast::ClassProperty {
                    key,
                    value,
                    computed,
                    is_static,
                    declare,
                    optional,
                    variance,
                    type_annotation,
                }),
            }
          )
        }
        NodeKind::ClassPrivateProperty => {
          let key = cvt_node_ptr(cvt, hermes_get_ClassPrivateProperty_key(n));
          let value = cvt_node_ptr_opt(cvt, hermes_get_ClassPrivateProperty_value(n));
          let is_static = hermes_get_ClassPrivateProperty_static(n);
          let declare = hermes_get_ClassPrivateProperty_declare(n);
          let optional = hermes_get_ClassPrivateProperty_optional(n);
          let variance = cvt_node_ptr_opt(cvt, hermes_get_ClassPrivateProperty_variance(n));
          let type_annotation = cvt_node_ptr_opt(cvt, hermes_get_ClassPrivateProperty_typeAnnotation(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::ClassPrivateProperty(ast::ClassPrivateProperty {
                    key,
                    value,
                    is_static,
                    declare,
                    optional,
                    variance,
                    type_annotation,
                }),
            }
          )
        }
        NodeKind::MethodDefinition => {
          let key = cvt_node_ptr(cvt, hermes_get_MethodDefinition_key(n));
          let value = cvt_node_ptr(cvt, hermes_get_MethodDefinition_value(n));
          let kind = cvt_enum(hermes_get_MethodDefinition_kind(n));
          let computed = hermes_get_MethodDefinition_computed(n);
          let is_static = hermes_get_MethodDefinition_static(n);
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::MethodDefinition(ast::MethodDefinition {
                    key,
                    value,
                    kind,
                    computed,
                    is_static,
                }),
            }
          )
        }
        NodeKind::ImportDeclaration => {
          let specifiers = cvt_node_list(cvt, hermes_get_ImportDeclaration_specifiers(n));
          let source = cvt_node_ptr(cvt, hermes_get_ImportDeclaration_source(n));
          let attributes = cvt_node_list_opt(cvt, hermes_get_ImportDeclaration_attributes(n));
          let import_kind = cvt_enum(hermes_get_ImportDeclaration_importKind(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::ImportDeclaration(ast::ImportDeclaration {
                    specifiers,
                    source,
                    attributes,
                    import_kind,
                }),
            }
          )
        }
        NodeKind::ImportSpecifier => {
          let imported = cvt_node_ptr(cvt, hermes_get_ImportSpecifier_imported(n));
          let local = cvt_node_ptr(cvt, hermes_get_ImportSpecifier_local(n));
          let import_kind = cvt_enum(hermes_get_ImportSpecifier_importKind(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::ImportSpecifier(ast::ImportSpecifier {
                    imported,
                    local,
                    import_kind,
                }),
            }
          )
        }
        NodeKind::ImportDefaultSpecifier => {
          let local = cvt_node_ptr(cvt, hermes_get_ImportDefaultSpecifier_local(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::ImportDefaultSpecifier(ast::ImportDefaultSpecifier {
                    local,
                }),
            }
          )
        }
        NodeKind::ImportNamespaceSpecifier => {
          let local = cvt_node_ptr(cvt, hermes_get_ImportNamespaceSpecifier_local(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::ImportNamespaceSpecifier(ast::ImportNamespaceSpecifier {
                    local,
                }),
            }
          )
        }
        NodeKind::ImportAttribute => {
          let key = cvt_node_ptr(cvt, hermes_get_ImportAttribute_key(n));
          let value = cvt_node_ptr(cvt, hermes_get_ImportAttribute_value(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::ImportAttribute(ast::ImportAttribute {
                    key,
                    value,
                }),
            }
          )
        }
        NodeKind::ExportNamedDeclaration => {
          let declaration = cvt_node_ptr_opt(cvt, hermes_get_ExportNamedDeclaration_declaration(n));
          let specifiers = cvt_node_list(cvt, hermes_get_ExportNamedDeclaration_specifiers(n));
          let source = cvt_node_ptr_opt(cvt, hermes_get_ExportNamedDeclaration_source(n));
          let export_kind = cvt_enum(hermes_get_ExportNamedDeclaration_exportKind(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::ExportNamedDeclaration(ast::ExportNamedDeclaration {
                    declaration,
                    specifiers,
                    source,
                    export_kind,
                }),
            }
          )
        }
        NodeKind::ExportSpecifier => {
          let exported = cvt_node_ptr(cvt, hermes_get_ExportSpecifier_exported(n));
          let local = cvt_node_ptr(cvt, hermes_get_ExportSpecifier_local(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::ExportSpecifier(ast::ExportSpecifier {
                    exported,
                    local,
                }),
            }
          )
        }
        NodeKind::ExportNamespaceSpecifier => {
          let exported = cvt_node_ptr(cvt, hermes_get_ExportNamespaceSpecifier_exported(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::ExportNamespaceSpecifier(ast::ExportNamespaceSpecifier {
                    exported,
                }),
            }
          )
        }
        NodeKind::ExportDefaultDeclaration => {
          let declaration = cvt_node_ptr(cvt, hermes_get_ExportDefaultDeclaration_declaration(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::ExportDefaultDeclaration(ast::ExportDefaultDeclaration {
                    declaration,
                }),
            }
          )
        }
        NodeKind::ExportAllDeclaration => {
          let source = cvt_node_ptr(cvt, hermes_get_ExportAllDeclaration_source(n));
          let export_kind = cvt_enum(hermes_get_ExportAllDeclaration_exportKind(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::ExportAllDeclaration(ast::ExportAllDeclaration {
                    source,
                    export_kind,
                }),
            }
          )
        }
        NodeKind::ObjectPattern => {
          let properties = cvt_node_list(cvt, hermes_get_ObjectPattern_properties(n));
          let type_annotation = cvt_node_ptr_opt(cvt, hermes_get_ObjectPattern_typeAnnotation(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::ObjectPattern(ast::ObjectPattern {
                    properties,
                    type_annotation,
                }),
            }
          )
        }
        NodeKind::ArrayPattern => {
          let elements = cvt_node_list(cvt, hermes_get_ArrayPattern_elements(n));
          let type_annotation = cvt_node_ptr_opt(cvt, hermes_get_ArrayPattern_typeAnnotation(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::ArrayPattern(ast::ArrayPattern {
                    elements,
                    type_annotation,
                }),
            }
          )
        }
        NodeKind::RestElement => {
          let argument = cvt_node_ptr(cvt, hermes_get_RestElement_argument(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::RestElement(ast::RestElement {
                    argument,
                }),
            }
          )
        }
        NodeKind::AssignmentPattern => {
          let left = cvt_node_ptr(cvt, hermes_get_AssignmentPattern_left(n));
          let right = cvt_node_ptr(cvt, hermes_get_AssignmentPattern_right(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::AssignmentPattern(ast::AssignmentPattern {
                    left,
                    right,
                }),
            }
          )
        }
        NodeKind::JSXIdentifier => {
          let name = cvt_label(hermes_get_JSXIdentifier_name(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::JSXIdentifier(ast::JSXIdentifier {
                    name,
                }),
            }
          )
        }
        NodeKind::JSXMemberExpression => {
          let object = cvt_node_ptr(cvt, hermes_get_JSXMemberExpression_object(n));
          let property = cvt_node_ptr(cvt, hermes_get_JSXMemberExpression_property(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::JSXMemberExpression(ast::JSXMemberExpression {
                    object,
                    property,
                }),
            }
          )
        }
        NodeKind::JSXNamespacedName => {
          let namespace = cvt_node_ptr(cvt, hermes_get_JSXNamespacedName_namespace(n));
          let name = cvt_node_ptr(cvt, hermes_get_JSXNamespacedName_name(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::JSXNamespacedName(ast::JSXNamespacedName {
                    namespace,
                    name,
                }),
            }
          )
        }
        NodeKind::JSXEmptyExpression => {
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::JSXEmptyExpression(ast::JSXEmptyExpression {
                }),
            }
          )
        }
        NodeKind::JSXExpressionContainer => {
          let expression = cvt_node_ptr(cvt, hermes_get_JSXExpressionContainer_expression(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::JSXExpressionContainer(ast::JSXExpressionContainer {
                    expression,
                }),
            }
          )
        }
        NodeKind::JSXSpreadChild => {
          let expression = cvt_node_ptr(cvt, hermes_get_JSXSpreadChild_expression(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::JSXSpreadChild(ast::JSXSpreadChild {
                    expression,
                }),
            }
          )
        }
        NodeKind::JSXOpeningElement => {
          let name = cvt_node_ptr(cvt, hermes_get_JSXOpeningElement_name(n));
          let attributes = cvt_node_list(cvt, hermes_get_JSXOpeningElement_attributes(n));
          let self_closing = hermes_get_JSXOpeningElement_selfClosing(n);
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::JSXOpeningElement(ast::JSXOpeningElement {
                    name,
                    attributes,
                    self_closing,
                }),
            }
          )
        }
        NodeKind::JSXClosingElement => {
          let name = cvt_node_ptr(cvt, hermes_get_JSXClosingElement_name(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::JSXClosingElement(ast::JSXClosingElement {
                    name,
                }),
            }
          )
        }
        NodeKind::JSXAttribute => {
          let name = cvt_node_ptr(cvt, hermes_get_JSXAttribute_name(n));
          let value = cvt_node_ptr_opt(cvt, hermes_get_JSXAttribute_value(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::JSXAttribute(ast::JSXAttribute {
                    name,
                    value,
                }),
            }
          )
        }
        NodeKind::JSXSpreadAttribute => {
          let argument = cvt_node_ptr(cvt, hermes_get_JSXSpreadAttribute_argument(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::JSXSpreadAttribute(ast::JSXSpreadAttribute {
                    argument,
                }),
            }
          )
        }
        NodeKind::JSXText => {
          let value = cvt_string(hermes_get_JSXText_value(n));
          let raw = cvt_string(hermes_get_JSXText_raw(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::JSXText(ast::JSXText {
                    value,
                    raw,
                }),
            }
          )
        }
        NodeKind::JSXElement => {
          let opening_element = cvt_node_ptr(cvt, hermes_get_JSXElement_openingElement(n));
          let children = cvt_node_list(cvt, hermes_get_JSXElement_children(n));
          let closing_element = cvt_node_ptr_opt(cvt, hermes_get_JSXElement_closingElement(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::JSXElement(ast::JSXElement {
                    opening_element,
                    children,
                    closing_element,
                }),
            }
          )
        }
        NodeKind::JSXFragment => {
          let opening_fragment = cvt_node_ptr(cvt, hermes_get_JSXFragment_openingFragment(n));
          let children = cvt_node_list(cvt, hermes_get_JSXFragment_children(n));
          let closing_fragment = cvt_node_ptr(cvt, hermes_get_JSXFragment_closingFragment(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::JSXFragment(ast::JSXFragment {
                    opening_fragment,
                    children,
                    closing_fragment,
                }),
            }
          )
        }
        NodeKind::JSXOpeningFragment => {
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::JSXOpeningFragment(ast::JSXOpeningFragment {
                }),
            }
          )
        }
        NodeKind::JSXClosingFragment => {
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::JSXClosingFragment(ast::JSXClosingFragment {
                }),
            }
          )
        }
        NodeKind::ExistsTypeAnnotation => {
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::ExistsTypeAnnotation(ast::ExistsTypeAnnotation {
                }),
            }
          )
        }
        NodeKind::EmptyTypeAnnotation => {
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::EmptyTypeAnnotation(ast::EmptyTypeAnnotation {
                }),
            }
          )
        }
        NodeKind::StringTypeAnnotation => {
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::StringTypeAnnotation(ast::StringTypeAnnotation {
                }),
            }
          )
        }
        NodeKind::NumberTypeAnnotation => {
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::NumberTypeAnnotation(ast::NumberTypeAnnotation {
                }),
            }
          )
        }
        NodeKind::StringLiteralTypeAnnotation => {
          let value = cvt_string(hermes_get_StringLiteralTypeAnnotation_value(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::StringLiteralTypeAnnotation(ast::StringLiteralTypeAnnotation {
                    value,
                }),
            }
          )
        }
        NodeKind::NumberLiteralTypeAnnotation => {
          let value = hermes_get_NumberLiteralTypeAnnotation_value(n);
          let raw = cvt_label(hermes_get_NumberLiteralTypeAnnotation_raw(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::NumberLiteralTypeAnnotation(ast::NumberLiteralTypeAnnotation {
                    value,
                    raw,
                }),
            }
          )
        }
        NodeKind::BooleanTypeAnnotation => {
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::BooleanTypeAnnotation(ast::BooleanTypeAnnotation {
                }),
            }
          )
        }
        NodeKind::BooleanLiteralTypeAnnotation => {
          let value = hermes_get_BooleanLiteralTypeAnnotation_value(n);
          let raw = cvt_label(hermes_get_BooleanLiteralTypeAnnotation_raw(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::BooleanLiteralTypeAnnotation(ast::BooleanLiteralTypeAnnotation {
                    value,
                    raw,
                }),
            }
          )
        }
        NodeKind::NullLiteralTypeAnnotation => {
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::NullLiteralTypeAnnotation(ast::NullLiteralTypeAnnotation {
                }),
            }
          )
        }
        NodeKind::SymbolTypeAnnotation => {
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::SymbolTypeAnnotation(ast::SymbolTypeAnnotation {
                }),
            }
          )
        }
        NodeKind::AnyTypeAnnotation => {
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::AnyTypeAnnotation(ast::AnyTypeAnnotation {
                }),
            }
          )
        }
        NodeKind::MixedTypeAnnotation => {
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::MixedTypeAnnotation(ast::MixedTypeAnnotation {
                }),
            }
          )
        }
        NodeKind::VoidTypeAnnotation => {
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::VoidTypeAnnotation(ast::VoidTypeAnnotation {
                }),
            }
          )
        }
        NodeKind::FunctionTypeAnnotation => {
          let params = cvt_node_list(cvt, hermes_get_FunctionTypeAnnotation_params(n));
          let this = cvt_node_ptr_opt(cvt, hermes_get_FunctionTypeAnnotation_this(n));
          let return_type = cvt_node_ptr(cvt, hermes_get_FunctionTypeAnnotation_returnType(n));
          let rest = cvt_node_ptr_opt(cvt, hermes_get_FunctionTypeAnnotation_rest(n));
          let type_parameters = cvt_node_ptr_opt(cvt, hermes_get_FunctionTypeAnnotation_typeParameters(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::FunctionTypeAnnotation(ast::FunctionTypeAnnotation {
                    params,
                    this,
                    return_type,
                    rest,
                    type_parameters,
                }),
            }
          )
        }
        NodeKind::FunctionTypeParam => {
          let name = cvt_node_ptr_opt(cvt, hermes_get_FunctionTypeParam_name(n));
          let type_annotation = cvt_node_ptr(cvt, hermes_get_FunctionTypeParam_typeAnnotation(n));
          let optional = hermes_get_FunctionTypeParam_optional(n);
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::FunctionTypeParam(ast::FunctionTypeParam {
                    name,
                    type_annotation,
                    optional,
                }),
            }
          )
        }
        NodeKind::NullableTypeAnnotation => {
          let type_annotation = cvt_node_ptr(cvt, hermes_get_NullableTypeAnnotation_typeAnnotation(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::NullableTypeAnnotation(ast::NullableTypeAnnotation {
                    type_annotation,
                }),
            }
          )
        }
        NodeKind::QualifiedTypeIdentifier => {
          let qualification = cvt_node_ptr(cvt, hermes_get_QualifiedTypeIdentifier_qualification(n));
          let id = cvt_node_ptr(cvt, hermes_get_QualifiedTypeIdentifier_id(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::QualifiedTypeIdentifier(ast::QualifiedTypeIdentifier {
                    qualification,
                    id,
                }),
            }
          )
        }
        NodeKind::TypeofTypeAnnotation => {
          let argument = cvt_node_ptr(cvt, hermes_get_TypeofTypeAnnotation_argument(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::TypeofTypeAnnotation(ast::TypeofTypeAnnotation {
                    argument,
                }),
            }
          )
        }
        NodeKind::TupleTypeAnnotation => {
          let types = cvt_node_list(cvt, hermes_get_TupleTypeAnnotation_types(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::TupleTypeAnnotation(ast::TupleTypeAnnotation {
                    types,
                }),
            }
          )
        }
        NodeKind::ArrayTypeAnnotation => {
          let element_type = cvt_node_ptr(cvt, hermes_get_ArrayTypeAnnotation_elementType(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::ArrayTypeAnnotation(ast::ArrayTypeAnnotation {
                    element_type,
                }),
            }
          )
        }
        NodeKind::UnionTypeAnnotation => {
          let types = cvt_node_list(cvt, hermes_get_UnionTypeAnnotation_types(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::UnionTypeAnnotation(ast::UnionTypeAnnotation {
                    types,
                }),
            }
          )
        }
        NodeKind::IntersectionTypeAnnotation => {
          let types = cvt_node_list(cvt, hermes_get_IntersectionTypeAnnotation_types(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::IntersectionTypeAnnotation(ast::IntersectionTypeAnnotation {
                    types,
                }),
            }
          )
        }
        NodeKind::GenericTypeAnnotation => {
          let id = cvt_node_ptr(cvt, hermes_get_GenericTypeAnnotation_id(n));
          let type_parameters = cvt_node_ptr_opt(cvt, hermes_get_GenericTypeAnnotation_typeParameters(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::GenericTypeAnnotation(ast::GenericTypeAnnotation {
                    id,
                    type_parameters,
                }),
            }
          )
        }
        NodeKind::IndexedAccessType => {
          let object_type = cvt_node_ptr(cvt, hermes_get_IndexedAccessType_objectType(n));
          let index_type = cvt_node_ptr(cvt, hermes_get_IndexedAccessType_indexType(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::IndexedAccessType(ast::IndexedAccessType {
                    object_type,
                    index_type,
                }),
            }
          )
        }
        NodeKind::OptionalIndexedAccessType => {
          let object_type = cvt_node_ptr(cvt, hermes_get_OptionalIndexedAccessType_objectType(n));
          let index_type = cvt_node_ptr(cvt, hermes_get_OptionalIndexedAccessType_indexType(n));
          let optional = hermes_get_OptionalIndexedAccessType_optional(n);
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::OptionalIndexedAccessType(ast::OptionalIndexedAccessType {
                    object_type,
                    index_type,
                    optional,
                }),
            }
          )
        }
        NodeKind::InterfaceTypeAnnotation => {
          let extends = cvt_node_list(cvt, hermes_get_InterfaceTypeAnnotation_extends(n));
          let body = cvt_node_ptr_opt(cvt, hermes_get_InterfaceTypeAnnotation_body(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::InterfaceTypeAnnotation(ast::InterfaceTypeAnnotation {
                    extends,
                    body,
                }),
            }
          )
        }
        NodeKind::TypeAlias => {
          let id = cvt_node_ptr(cvt, hermes_get_TypeAlias_id(n));
          let type_parameters = cvt_node_ptr_opt(cvt, hermes_get_TypeAlias_typeParameters(n));
          let right = cvt_node_ptr(cvt, hermes_get_TypeAlias_right(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::TypeAlias(ast::TypeAlias {
                    id,
                    type_parameters,
                    right,
                }),
            }
          )
        }
        NodeKind::OpaqueType => {
          let id = cvt_node_ptr(cvt, hermes_get_OpaqueType_id(n));
          let type_parameters = cvt_node_ptr_opt(cvt, hermes_get_OpaqueType_typeParameters(n));
          let impltype = cvt_node_ptr(cvt, hermes_get_OpaqueType_impltype(n));
          let supertype = cvt_node_ptr_opt(cvt, hermes_get_OpaqueType_supertype(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::OpaqueType(ast::OpaqueType {
                    id,
                    type_parameters,
                    impltype,
                    supertype,
                }),
            }
          )
        }
        NodeKind::InterfaceDeclaration => {
          let id = cvt_node_ptr(cvt, hermes_get_InterfaceDeclaration_id(n));
          let type_parameters = cvt_node_ptr_opt(cvt, hermes_get_InterfaceDeclaration_typeParameters(n));
          let extends = cvt_node_list(cvt, hermes_get_InterfaceDeclaration_extends(n));
          let body = cvt_node_ptr(cvt, hermes_get_InterfaceDeclaration_body(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::InterfaceDeclaration(ast::InterfaceDeclaration {
                    id,
                    type_parameters,
                    extends,
                    body,
                }),
            }
          )
        }
        NodeKind::DeclareTypeAlias => {
          let id = cvt_node_ptr(cvt, hermes_get_DeclareTypeAlias_id(n));
          let type_parameters = cvt_node_ptr_opt(cvt, hermes_get_DeclareTypeAlias_typeParameters(n));
          let right = cvt_node_ptr(cvt, hermes_get_DeclareTypeAlias_right(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::DeclareTypeAlias(ast::DeclareTypeAlias {
                    id,
                    type_parameters,
                    right,
                }),
            }
          )
        }
        NodeKind::DeclareOpaqueType => {
          let id = cvt_node_ptr(cvt, hermes_get_DeclareOpaqueType_id(n));
          let type_parameters = cvt_node_ptr_opt(cvt, hermes_get_DeclareOpaqueType_typeParameters(n));
          let impltype = cvt_node_ptr_opt(cvt, hermes_get_DeclareOpaqueType_impltype(n));
          let supertype = cvt_node_ptr_opt(cvt, hermes_get_DeclareOpaqueType_supertype(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::DeclareOpaqueType(ast::DeclareOpaqueType {
                    id,
                    type_parameters,
                    impltype,
                    supertype,
                }),
            }
          )
        }
        NodeKind::DeclareInterface => {
          let id = cvt_node_ptr(cvt, hermes_get_DeclareInterface_id(n));
          let type_parameters = cvt_node_ptr_opt(cvt, hermes_get_DeclareInterface_typeParameters(n));
          let extends = cvt_node_list(cvt, hermes_get_DeclareInterface_extends(n));
          let body = cvt_node_ptr(cvt, hermes_get_DeclareInterface_body(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::DeclareInterface(ast::DeclareInterface {
                    id,
                    type_parameters,
                    extends,
                    body,
                }),
            }
          )
        }
        NodeKind::DeclareClass => {
          let id = cvt_node_ptr(cvt, hermes_get_DeclareClass_id(n));
          let type_parameters = cvt_node_ptr_opt(cvt, hermes_get_DeclareClass_typeParameters(n));
          let extends = cvt_node_list(cvt, hermes_get_DeclareClass_extends(n));
          let implements = cvt_node_list(cvt, hermes_get_DeclareClass_implements(n));
          let mixins = cvt_node_list(cvt, hermes_get_DeclareClass_mixins(n));
          let body = cvt_node_ptr(cvt, hermes_get_DeclareClass_body(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::DeclareClass(ast::DeclareClass {
                    id,
                    type_parameters,
                    extends,
                    implements,
                    mixins,
                    body,
                }),
            }
          )
        }
        NodeKind::DeclareFunction => {
          let id = cvt_node_ptr(cvt, hermes_get_DeclareFunction_id(n));
          let predicate = cvt_node_ptr_opt(cvt, hermes_get_DeclareFunction_predicate(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::DeclareFunction(ast::DeclareFunction {
                    id,
                    predicate,
                }),
            }
          )
        }
        NodeKind::DeclareVariable => {
          let id = cvt_node_ptr(cvt, hermes_get_DeclareVariable_id(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::DeclareVariable(ast::DeclareVariable {
                    id,
                }),
            }
          )
        }
        NodeKind::DeclareExportDeclaration => {
          let declaration = cvt_node_ptr_opt(cvt, hermes_get_DeclareExportDeclaration_declaration(n));
          let specifiers = cvt_node_list(cvt, hermes_get_DeclareExportDeclaration_specifiers(n));
          let source = cvt_node_ptr_opt(cvt, hermes_get_DeclareExportDeclaration_source(n));
          let default = hermes_get_DeclareExportDeclaration_default(n);
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::DeclareExportDeclaration(ast::DeclareExportDeclaration {
                    declaration,
                    specifiers,
                    source,
                    default,
                }),
            }
          )
        }
        NodeKind::DeclareExportAllDeclaration => {
          let source = cvt_node_ptr(cvt, hermes_get_DeclareExportAllDeclaration_source(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::DeclareExportAllDeclaration(ast::DeclareExportAllDeclaration {
                    source,
                }),
            }
          )
        }
        NodeKind::DeclareModule => {
          let id = cvt_node_ptr(cvt, hermes_get_DeclareModule_id(n));
          let body = cvt_node_ptr(cvt, hermes_get_DeclareModule_body(n));
          let kind = cvt_label(hermes_get_DeclareModule_kind(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::DeclareModule(ast::DeclareModule {
                    id,
                    body,
                    kind,
                }),
            }
          )
        }
        NodeKind::DeclareModuleExports => {
          let type_annotation = cvt_node_ptr(cvt, hermes_get_DeclareModuleExports_typeAnnotation(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::DeclareModuleExports(ast::DeclareModuleExports {
                    type_annotation,
                }),
            }
          )
        }
        NodeKind::InterfaceExtends => {
          let id = cvt_node_ptr(cvt, hermes_get_InterfaceExtends_id(n));
          let type_parameters = cvt_node_ptr_opt(cvt, hermes_get_InterfaceExtends_typeParameters(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::InterfaceExtends(ast::InterfaceExtends {
                    id,
                    type_parameters,
                }),
            }
          )
        }
        NodeKind::ClassImplements => {
          let id = cvt_node_ptr(cvt, hermes_get_ClassImplements_id(n));
          let type_parameters = cvt_node_ptr_opt(cvt, hermes_get_ClassImplements_typeParameters(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::ClassImplements(ast::ClassImplements {
                    id,
                    type_parameters,
                }),
            }
          )
        }
        NodeKind::TypeAnnotation => {
          let type_annotation = cvt_node_ptr(cvt, hermes_get_TypeAnnotation_typeAnnotation(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::TypeAnnotation(ast::TypeAnnotation {
                    type_annotation,
                }),
            }
          )
        }
        NodeKind::ObjectTypeAnnotation => {
          let properties = cvt_node_list(cvt, hermes_get_ObjectTypeAnnotation_properties(n));
          let indexers = cvt_node_list(cvt, hermes_get_ObjectTypeAnnotation_indexers(n));
          let call_properties = cvt_node_list(cvt, hermes_get_ObjectTypeAnnotation_callProperties(n));
          let internal_slots = cvt_node_list(cvt, hermes_get_ObjectTypeAnnotation_internalSlots(n));
          let inexact = hermes_get_ObjectTypeAnnotation_inexact(n);
          let exact = hermes_get_ObjectTypeAnnotation_exact(n);
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::ObjectTypeAnnotation(ast::ObjectTypeAnnotation {
                    properties,
                    indexers,
                    call_properties,
                    internal_slots,
                    inexact,
                    exact,
                }),
            }
          )
        }
        NodeKind::ObjectTypeProperty => {
          let key = cvt_node_ptr(cvt, hermes_get_ObjectTypeProperty_key(n));
          let value = cvt_node_ptr(cvt, hermes_get_ObjectTypeProperty_value(n));
          let method = hermes_get_ObjectTypeProperty_method(n);
          let optional = hermes_get_ObjectTypeProperty_optional(n);
          let is_static = hermes_get_ObjectTypeProperty_static(n);
          let proto = hermes_get_ObjectTypeProperty_proto(n);
          let variance = cvt_node_ptr_opt(cvt, hermes_get_ObjectTypeProperty_variance(n));
          let kind = cvt_label(hermes_get_ObjectTypeProperty_kind(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::ObjectTypeProperty(ast::ObjectTypeProperty {
                    key,
                    value,
                    method,
                    optional,
                    is_static,
                    proto,
                    variance,
                    kind,
                }),
            }
          )
        }
        NodeKind::ObjectTypeSpreadProperty => {
          let argument = cvt_node_ptr(cvt, hermes_get_ObjectTypeSpreadProperty_argument(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::ObjectTypeSpreadProperty(ast::ObjectTypeSpreadProperty {
                    argument,
                }),
            }
          )
        }
        NodeKind::ObjectTypeInternalSlot => {
          let id = cvt_node_ptr(cvt, hermes_get_ObjectTypeInternalSlot_id(n));
          let value = cvt_node_ptr(cvt, hermes_get_ObjectTypeInternalSlot_value(n));
          let optional = hermes_get_ObjectTypeInternalSlot_optional(n);
          let is_static = hermes_get_ObjectTypeInternalSlot_static(n);
          let method = hermes_get_ObjectTypeInternalSlot_method(n);
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::ObjectTypeInternalSlot(ast::ObjectTypeInternalSlot {
                    id,
                    value,
                    optional,
                    is_static,
                    method,
                }),
            }
          )
        }
        NodeKind::ObjectTypeCallProperty => {
          let value = cvt_node_ptr(cvt, hermes_get_ObjectTypeCallProperty_value(n));
          let is_static = hermes_get_ObjectTypeCallProperty_static(n);
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::ObjectTypeCallProperty(ast::ObjectTypeCallProperty {
                    value,
                    is_static,
                }),
            }
          )
        }
        NodeKind::ObjectTypeIndexer => {
          let id = cvt_node_ptr_opt(cvt, hermes_get_ObjectTypeIndexer_id(n));
          let key = cvt_node_ptr(cvt, hermes_get_ObjectTypeIndexer_key(n));
          let value = cvt_node_ptr(cvt, hermes_get_ObjectTypeIndexer_value(n));
          let is_static = hermes_get_ObjectTypeIndexer_static(n);
          let variance = cvt_node_ptr_opt(cvt, hermes_get_ObjectTypeIndexer_variance(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::ObjectTypeIndexer(ast::ObjectTypeIndexer {
                    id,
                    key,
                    value,
                    is_static,
                    variance,
                }),
            }
          )
        }
        NodeKind::Variance => {
          let kind = cvt_label(hermes_get_Variance_kind(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::Variance(ast::Variance {
                    kind,
                }),
            }
          )
        }
        NodeKind::TypeParameterDeclaration => {
          let params = cvt_node_list(cvt, hermes_get_TypeParameterDeclaration_params(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::TypeParameterDeclaration(ast::TypeParameterDeclaration {
                    params,
                }),
            }
          )
        }
        NodeKind::TypeParameter => {
          let name = cvt_label(hermes_get_TypeParameter_name(n));
          let bound = cvt_node_ptr_opt(cvt, hermes_get_TypeParameter_bound(n));
          let variance = cvt_node_ptr_opt(cvt, hermes_get_TypeParameter_variance(n));
          let default = cvt_node_ptr_opt(cvt, hermes_get_TypeParameter_default(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::TypeParameter(ast::TypeParameter {
                    name,
                    bound,
                    variance,
                    default,
                }),
            }
          )
        }
        NodeKind::TypeParameterInstantiation => {
          let params = cvt_node_list(cvt, hermes_get_TypeParameterInstantiation_params(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::TypeParameterInstantiation(ast::TypeParameterInstantiation {
                    params,
                }),
            }
          )
        }
        NodeKind::TypeCastExpression => {
          let expression = cvt_node_ptr(cvt, hermes_get_TypeCastExpression_expression(n));
          let type_annotation = cvt_node_ptr(cvt, hermes_get_TypeCastExpression_typeAnnotation(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::TypeCastExpression(ast::TypeCastExpression {
                    expression,
                    type_annotation,
                }),
            }
          )
        }
        NodeKind::InferredPredicate => {
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::InferredPredicate(ast::InferredPredicate {
                }),
            }
          )
        }
        NodeKind::DeclaredPredicate => {
          let value = cvt_node_ptr(cvt, hermes_get_DeclaredPredicate_value(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::DeclaredPredicate(ast::DeclaredPredicate {
                    value,
                }),
            }
          )
        }
        NodeKind::EnumDeclaration => {
          let id = cvt_node_ptr(cvt, hermes_get_EnumDeclaration_id(n));
          let body = cvt_node_ptr(cvt, hermes_get_EnumDeclaration_body(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::EnumDeclaration(ast::EnumDeclaration {
                    id,
                    body,
                }),
            }
          )
        }
        NodeKind::EnumStringBody => {
          let members = cvt_node_list(cvt, hermes_get_EnumStringBody_members(n));
          let explicit_type = hermes_get_EnumStringBody_explicitType(n);
          let has_unknown_members = hermes_get_EnumStringBody_hasUnknownMembers(n);
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::EnumStringBody(ast::EnumStringBody {
                    members,
                    explicit_type,
                    has_unknown_members,
                }),
            }
          )
        }
        NodeKind::EnumNumberBody => {
          let members = cvt_node_list(cvt, hermes_get_EnumNumberBody_members(n));
          let explicit_type = hermes_get_EnumNumberBody_explicitType(n);
          let has_unknown_members = hermes_get_EnumNumberBody_hasUnknownMembers(n);
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::EnumNumberBody(ast::EnumNumberBody {
                    members,
                    explicit_type,
                    has_unknown_members,
                }),
            }
          )
        }
        NodeKind::EnumBooleanBody => {
          let members = cvt_node_list(cvt, hermes_get_EnumBooleanBody_members(n));
          let explicit_type = hermes_get_EnumBooleanBody_explicitType(n);
          let has_unknown_members = hermes_get_EnumBooleanBody_hasUnknownMembers(n);
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::EnumBooleanBody(ast::EnumBooleanBody {
                    members,
                    explicit_type,
                    has_unknown_members,
                }),
            }
          )
        }
        NodeKind::EnumSymbolBody => {
          let members = cvt_node_list(cvt, hermes_get_EnumSymbolBody_members(n));
          let has_unknown_members = hermes_get_EnumSymbolBody_hasUnknownMembers(n);
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::EnumSymbolBody(ast::EnumSymbolBody {
                    members,
                    has_unknown_members,
                }),
            }
          )
        }
        NodeKind::EnumDefaultedMember => {
          let id = cvt_node_ptr(cvt, hermes_get_EnumDefaultedMember_id(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::EnumDefaultedMember(ast::EnumDefaultedMember {
                    id,
                }),
            }
          )
        }
        NodeKind::EnumStringMember => {
          let id = cvt_node_ptr(cvt, hermes_get_EnumStringMember_id(n));
          let init = cvt_node_ptr(cvt, hermes_get_EnumStringMember_init(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::EnumStringMember(ast::EnumStringMember {
                    id,
                    init,
                }),
            }
          )
        }
        NodeKind::EnumNumberMember => {
          let id = cvt_node_ptr(cvt, hermes_get_EnumNumberMember_id(n));
          let init = cvt_node_ptr(cvt, hermes_get_EnumNumberMember_init(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::EnumNumberMember(ast::EnumNumberMember {
                    id,
                    init,
                }),
            }
          )
        }
        NodeKind::EnumBooleanMember => {
          let id = cvt_node_ptr(cvt, hermes_get_EnumBooleanMember_id(n));
          let init = cvt_node_ptr(cvt, hermes_get_EnumBooleanMember_init(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::EnumBooleanMember(ast::EnumBooleanMember {
                    id,
                    init,
                }),
            }
          )
        }
        NodeKind::TSTypeAnnotation => {
          let type_annotation = cvt_node_ptr(cvt, hermes_get_TSTypeAnnotation_typeAnnotation(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::TSTypeAnnotation(ast::TSTypeAnnotation {
                    type_annotation,
                }),
            }
          )
        }
        NodeKind::TSAnyKeyword => {
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::TSAnyKeyword(ast::TSAnyKeyword {
                }),
            }
          )
        }
        NodeKind::TSNumberKeyword => {
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::TSNumberKeyword(ast::TSNumberKeyword {
                }),
            }
          )
        }
        NodeKind::TSBooleanKeyword => {
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::TSBooleanKeyword(ast::TSBooleanKeyword {
                }),
            }
          )
        }
        NodeKind::TSStringKeyword => {
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::TSStringKeyword(ast::TSStringKeyword {
                }),
            }
          )
        }
        NodeKind::TSSymbolKeyword => {
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::TSSymbolKeyword(ast::TSSymbolKeyword {
                }),
            }
          )
        }
        NodeKind::TSVoidKeyword => {
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::TSVoidKeyword(ast::TSVoidKeyword {
                }),
            }
          )
        }
        NodeKind::TSThisType => {
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::TSThisType(ast::TSThisType {
                }),
            }
          )
        }
        NodeKind::TSLiteralType => {
          let literal = cvt_node_ptr(cvt, hermes_get_TSLiteralType_literal(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::TSLiteralType(ast::TSLiteralType {
                    literal,
                }),
            }
          )
        }
        NodeKind::TSIndexedAccessType => {
          let object_type = cvt_node_ptr(cvt, hermes_get_TSIndexedAccessType_objectType(n));
          let index_type = cvt_node_ptr(cvt, hermes_get_TSIndexedAccessType_indexType(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::TSIndexedAccessType(ast::TSIndexedAccessType {
                    object_type,
                    index_type,
                }),
            }
          )
        }
        NodeKind::TSArrayType => {
          let element_type = cvt_node_ptr(cvt, hermes_get_TSArrayType_elementType(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::TSArrayType(ast::TSArrayType {
                    element_type,
                }),
            }
          )
        }
        NodeKind::TSTypeReference => {
          let type_name = cvt_node_ptr(cvt, hermes_get_TSTypeReference_typeName(n));
          let type_parameters = cvt_node_ptr_opt(cvt, hermes_get_TSTypeReference_typeParameters(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::TSTypeReference(ast::TSTypeReference {
                    type_name,
                    type_parameters,
                }),
            }
          )
        }
        NodeKind::TSQualifiedName => {
          let left = cvt_node_ptr(cvt, hermes_get_TSQualifiedName_left(n));
          let right = cvt_node_ptr_opt(cvt, hermes_get_TSQualifiedName_right(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::TSQualifiedName(ast::TSQualifiedName {
                    left,
                    right,
                }),
            }
          )
        }
        NodeKind::TSFunctionType => {
          let params = cvt_node_list(cvt, hermes_get_TSFunctionType_params(n));
          let return_type = cvt_node_ptr(cvt, hermes_get_TSFunctionType_returnType(n));
          let type_parameters = cvt_node_ptr_opt(cvt, hermes_get_TSFunctionType_typeParameters(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::TSFunctionType(ast::TSFunctionType {
                    params,
                    return_type,
                    type_parameters,
                }),
            }
          )
        }
        NodeKind::TSConstructorType => {
          let params = cvt_node_list(cvt, hermes_get_TSConstructorType_params(n));
          let return_type = cvt_node_ptr(cvt, hermes_get_TSConstructorType_returnType(n));
          let type_parameters = cvt_node_ptr_opt(cvt, hermes_get_TSConstructorType_typeParameters(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::TSConstructorType(ast::TSConstructorType {
                    params,
                    return_type,
                    type_parameters,
                }),
            }
          )
        }
        NodeKind::TSTypePredicate => {
          let parameter_name = cvt_node_ptr(cvt, hermes_get_TSTypePredicate_parameterName(n));
          let type_annotation = cvt_node_ptr(cvt, hermes_get_TSTypePredicate_typeAnnotation(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::TSTypePredicate(ast::TSTypePredicate {
                    parameter_name,
                    type_annotation,
                }),
            }
          )
        }
        NodeKind::TSTupleType => {
          let element_types = cvt_node_list(cvt, hermes_get_TSTupleType_elementTypes(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::TSTupleType(ast::TSTupleType {
                    element_types,
                }),
            }
          )
        }
        NodeKind::TSTypeAssertion => {
          let type_annotation = cvt_node_ptr(cvt, hermes_get_TSTypeAssertion_typeAnnotation(n));
          let expression = cvt_node_ptr(cvt, hermes_get_TSTypeAssertion_expression(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::TSTypeAssertion(ast::TSTypeAssertion {
                    type_annotation,
                    expression,
                }),
            }
          )
        }
        NodeKind::TSAsExpression => {
          let expression = cvt_node_ptr(cvt, hermes_get_TSAsExpression_expression(n));
          let type_annotation = cvt_node_ptr(cvt, hermes_get_TSAsExpression_typeAnnotation(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::TSAsExpression(ast::TSAsExpression {
                    expression,
                    type_annotation,
                }),
            }
          )
        }
        NodeKind::TSParameterProperty => {
          let parameter = cvt_node_ptr(cvt, hermes_get_TSParameterProperty_parameter(n));
          let accessibility = cvt_label_opt(hermes_get_TSParameterProperty_accessibility(n));
          let readonly = hermes_get_TSParameterProperty_readonly(n);
          let is_static = hermes_get_TSParameterProperty_static(n);
          let export = hermes_get_TSParameterProperty_export(n);
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::TSParameterProperty(ast::TSParameterProperty {
                    parameter,
                    accessibility,
                    readonly,
                    is_static,
                    export,
                }),
            }
          )
        }
        NodeKind::TSTypeAliasDeclaration => {
          let id = cvt_node_ptr(cvt, hermes_get_TSTypeAliasDeclaration_id(n));
          let type_parameters = cvt_node_ptr_opt(cvt, hermes_get_TSTypeAliasDeclaration_typeParameters(n));
          let type_annotation = cvt_node_ptr(cvt, hermes_get_TSTypeAliasDeclaration_typeAnnotation(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::TSTypeAliasDeclaration(ast::TSTypeAliasDeclaration {
                    id,
                    type_parameters,
                    type_annotation,
                }),
            }
          )
        }
        NodeKind::TSInterfaceDeclaration => {
          let id = cvt_node_ptr(cvt, hermes_get_TSInterfaceDeclaration_id(n));
          let body = cvt_node_ptr(cvt, hermes_get_TSInterfaceDeclaration_body(n));
          let extends = cvt_node_list(cvt, hermes_get_TSInterfaceDeclaration_extends(n));
          let type_parameters = cvt_node_ptr_opt(cvt, hermes_get_TSInterfaceDeclaration_typeParameters(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::TSInterfaceDeclaration(ast::TSInterfaceDeclaration {
                    id,
                    body,
                    extends,
                    type_parameters,
                }),
            }
          )
        }
        NodeKind::TSInterfaceHeritage => {
          let expression = cvt_node_ptr(cvt, hermes_get_TSInterfaceHeritage_expression(n));
          let type_parameters = cvt_node_ptr_opt(cvt, hermes_get_TSInterfaceHeritage_typeParameters(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::TSInterfaceHeritage(ast::TSInterfaceHeritage {
                    expression,
                    type_parameters,
                }),
            }
          )
        }
        NodeKind::TSInterfaceBody => {
          let body = cvt_node_list(cvt, hermes_get_TSInterfaceBody_body(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::TSInterfaceBody(ast::TSInterfaceBody {
                    body,
                }),
            }
          )
        }
        NodeKind::TSEnumDeclaration => {
          let id = cvt_node_ptr(cvt, hermes_get_TSEnumDeclaration_id(n));
          let members = cvt_node_list(cvt, hermes_get_TSEnumDeclaration_members(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::TSEnumDeclaration(ast::TSEnumDeclaration {
                    id,
                    members,
                }),
            }
          )
        }
        NodeKind::TSEnumMember => {
          let id = cvt_node_ptr(cvt, hermes_get_TSEnumMember_id(n));
          let initializer = cvt_node_ptr_opt(cvt, hermes_get_TSEnumMember_initializer(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::TSEnumMember(ast::TSEnumMember {
                    id,
                    initializer,
                }),
            }
          )
        }
        NodeKind::TSModuleDeclaration => {
          let id = cvt_node_ptr(cvt, hermes_get_TSModuleDeclaration_id(n));
          let body = cvt_node_ptr(cvt, hermes_get_TSModuleDeclaration_body(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::TSModuleDeclaration(ast::TSModuleDeclaration {
                    id,
                    body,
                }),
            }
          )
        }
        NodeKind::TSModuleBlock => {
          let body = cvt_node_list(cvt, hermes_get_TSModuleBlock_body(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::TSModuleBlock(ast::TSModuleBlock {
                    body,
                }),
            }
          )
        }
        NodeKind::TSModuleMember => {
          let id = cvt_node_ptr(cvt, hermes_get_TSModuleMember_id(n));
          let initializer = cvt_node_ptr_opt(cvt, hermes_get_TSModuleMember_initializer(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::TSModuleMember(ast::TSModuleMember {
                    id,
                    initializer,
                }),
            }
          )
        }
        NodeKind::TSTypeParameterDeclaration => {
          let params = cvt_node_list(cvt, hermes_get_TSTypeParameterDeclaration_params(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::TSTypeParameterDeclaration(ast::TSTypeParameterDeclaration {
                    params,
                }),
            }
          )
        }
        NodeKind::TSTypeParameter => {
          let name = cvt_node_ptr(cvt, hermes_get_TSTypeParameter_name(n));
          let constraint = cvt_node_ptr_opt(cvt, hermes_get_TSTypeParameter_constraint(n));
          let default = cvt_node_ptr_opt(cvt, hermes_get_TSTypeParameter_default(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::TSTypeParameter(ast::TSTypeParameter {
                    name,
                    constraint,
                    default,
                }),
            }
          )
        }
        NodeKind::TSTypeParameterInstantiation => {
          let params = cvt_node_list(cvt, hermes_get_TSTypeParameterInstantiation_params(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::TSTypeParameterInstantiation(ast::TSTypeParameterInstantiation {
                    params,
                }),
            }
          )
        }
        NodeKind::TSUnionType => {
          let types = cvt_node_list(cvt, hermes_get_TSUnionType_types(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::TSUnionType(ast::TSUnionType {
                    types,
                }),
            }
          )
        }
        NodeKind::TSIntersectionType => {
          let types = cvt_node_list(cvt, hermes_get_TSIntersectionType_types(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::TSIntersectionType(ast::TSIntersectionType {
                    types,
                }),
            }
          )
        }
        NodeKind::TSTypeQuery => {
          let expr_name = cvt_node_ptr(cvt, hermes_get_TSTypeQuery_exprName(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::TSTypeQuery(ast::TSTypeQuery {
                    expr_name,
                }),
            }
          )
        }
        NodeKind::TSConditionalType => {
          let extends_type = cvt_node_ptr(cvt, hermes_get_TSConditionalType_extendsType(n));
          let check_type = cvt_node_ptr(cvt, hermes_get_TSConditionalType_checkType(n));
          let true_type = cvt_node_ptr(cvt, hermes_get_TSConditionalType_trueType(n));
          let false_t_ype = cvt_node_ptr(cvt, hermes_get_TSConditionalType_falseTYpe(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::TSConditionalType(ast::TSConditionalType {
                    extends_type,
                    check_type,
                    true_type,
                    false_t_ype,
                }),
            }
          )
        }
        NodeKind::TSTypeLiteral => {
          let members = cvt_node_list(cvt, hermes_get_TSTypeLiteral_members(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::TSTypeLiteral(ast::TSTypeLiteral {
                    members,
                }),
            }
          )
        }
        NodeKind::TSPropertySignature => {
          let key = cvt_node_ptr(cvt, hermes_get_TSPropertySignature_key(n));
          let type_annotation = cvt_node_ptr_opt(cvt, hermes_get_TSPropertySignature_typeAnnotation(n));
          let initializer = cvt_node_ptr_opt(cvt, hermes_get_TSPropertySignature_initializer(n));
          let optional = hermes_get_TSPropertySignature_optional(n);
          let computed = hermes_get_TSPropertySignature_computed(n);
          let readonly = hermes_get_TSPropertySignature_readonly(n);
          let is_static = hermes_get_TSPropertySignature_static(n);
          let export = hermes_get_TSPropertySignature_export(n);
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::TSPropertySignature(ast::TSPropertySignature {
                    key,
                    type_annotation,
                    initializer,
                    optional,
                    computed,
                    readonly,
                    is_static,
                    export,
                }),
            }
          )
        }
        NodeKind::TSMethodSignature => {
          let key = cvt_node_ptr(cvt, hermes_get_TSMethodSignature_key(n));
          let params = cvt_node_list(cvt, hermes_get_TSMethodSignature_params(n));
          let return_type = cvt_node_ptr_opt(cvt, hermes_get_TSMethodSignature_returnType(n));
          let computed = hermes_get_TSMethodSignature_computed(n);
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::TSMethodSignature(ast::TSMethodSignature {
                    key,
                    params,
                    return_type,
                    computed,
                }),
            }
          )
        }
        NodeKind::TSIndexSignature => {
          let parameters = cvt_node_list(cvt, hermes_get_TSIndexSignature_parameters(n));
          let type_annotation = cvt_node_ptr_opt(cvt, hermes_get_TSIndexSignature_typeAnnotation(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::TSIndexSignature(ast::TSIndexSignature {
                    parameters,
                    type_annotation,
                }),
            }
          )
        }
        NodeKind::TSCallSignatureDeclaration => {
          let params = cvt_node_list(cvt, hermes_get_TSCallSignatureDeclaration_params(n));
          let return_type = cvt_node_ptr_opt(cvt, hermes_get_TSCallSignatureDeclaration_returnType(n));
          cvt.ast_context.alloc(
            ast::Node {
                range,
                kind: ast::NodeKind::TSCallSignatureDeclaration(ast::TSCallSignatureDeclaration {
                    params,
                    return_type,
                }),
            }
          )
        }
        _ => panic!("Invalid node kind")
    };

    cvt.ast_context.node_mut(res).range.end = cvt.cvt_smloc(nr.source_range.end.pred());

    res}
