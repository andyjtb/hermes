/*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

// @generated by Hermes rustgen
// DO NOT EDIT

use hermes::parser::*;
use super::convert::*;
use crate::ast;

pub unsafe fn cvt_node_ptr<'parser, 'gc, 'ast: 'gc>(
  cvt: &mut Converter<'parser>, 
  gc: &'gc ast::GCContext<'ast, '_>, 
  n: NodePtr) -> &'gc ast::Node<'gc> {
    let nr = n.as_ref();
    let range = ast::SourceRange {
        file: cvt.file_id,
        start: cvt.cvt_smloc(nr.source_range.start),
        end: ast::SourceLoc::invalid(),
    };

    let res = match nr.kind {
        NodeKind::Empty => {
          let mut template = ast::EmptyTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::EmptyBuilder::build_template(gc, template)
        }
        NodeKind::Metadata => {
          let mut template = ast::MetadataTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::MetadataBuilder::build_template(gc, template)
        }
        NodeKind::Program => {
          let body = cvt_node_list(cvt, gc, hermes_get_Program_body(n));
          let mut template = ast::ProgramTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  body,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::ProgramBuilder::build_template(gc, template)
        }
        NodeKind::FunctionExpression => {
          let id = cvt_node_ptr_opt(cvt, gc, hermes_get_FunctionExpression_id(n));
          let params = cvt_node_list(cvt, gc, hermes_get_FunctionExpression_params(n));
          let body = cvt_node_ptr(cvt, gc, hermes_get_FunctionExpression_body(n));
          let type_parameters = cvt_node_ptr_opt(cvt, gc, hermes_get_FunctionExpression_typeParameters(n));
          let return_type = cvt_node_ptr_opt(cvt, gc, hermes_get_FunctionExpression_returnType(n));
          let predicate = cvt_node_ptr_opt(cvt, gc, hermes_get_FunctionExpression_predicate(n));
          let generator = hermes_get_FunctionExpression_generator(n);
          let is_async = hermes_get_FunctionExpression_async(n);
          let mut template = ast::FunctionExpressionTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  id,
                  params,
                  body,
                  type_parameters,
                  return_type,
                  predicate,
                  generator,
                  is_async,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::FunctionExpressionBuilder::build_template(gc, template)
        }
        NodeKind::ArrowFunctionExpression => {
          let id = cvt_node_ptr_opt(cvt, gc, hermes_get_ArrowFunctionExpression_id(n));
          let params = cvt_node_list(cvt, gc, hermes_get_ArrowFunctionExpression_params(n));
          let body = cvt_node_ptr(cvt, gc, hermes_get_ArrowFunctionExpression_body(n));
          let type_parameters = cvt_node_ptr_opt(cvt, gc, hermes_get_ArrowFunctionExpression_typeParameters(n));
          let return_type = cvt_node_ptr_opt(cvt, gc, hermes_get_ArrowFunctionExpression_returnType(n));
          let predicate = cvt_node_ptr_opt(cvt, gc, hermes_get_ArrowFunctionExpression_predicate(n));
          let expression = hermes_get_ArrowFunctionExpression_expression(n);
          let is_async = hermes_get_ArrowFunctionExpression_async(n);
          let mut template = ast::ArrowFunctionExpressionTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  id,
                  params,
                  body,
                  type_parameters,
                  return_type,
                  predicate,
                  expression,
                  is_async,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::ArrowFunctionExpressionBuilder::build_template(gc, template)
        }
        NodeKind::FunctionDeclaration => {
          let id = cvt_node_ptr_opt(cvt, gc, hermes_get_FunctionDeclaration_id(n));
          let params = cvt_node_list(cvt, gc, hermes_get_FunctionDeclaration_params(n));
          let body = cvt_node_ptr(cvt, gc, hermes_get_FunctionDeclaration_body(n));
          let type_parameters = cvt_node_ptr_opt(cvt, gc, hermes_get_FunctionDeclaration_typeParameters(n));
          let return_type = cvt_node_ptr_opt(cvt, gc, hermes_get_FunctionDeclaration_returnType(n));
          let predicate = cvt_node_ptr_opt(cvt, gc, hermes_get_FunctionDeclaration_predicate(n));
          let generator = hermes_get_FunctionDeclaration_generator(n);
          let is_async = hermes_get_FunctionDeclaration_async(n);
          let mut template = ast::FunctionDeclarationTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  id,
                  params,
                  body,
                  type_parameters,
                  return_type,
                  predicate,
                  generator,
                  is_async,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::FunctionDeclarationBuilder::build_template(gc, template)
        }
        NodeKind::WhileStatement => {
          let body = cvt_node_ptr(cvt, gc, hermes_get_WhileStatement_body(n));
          let test = cvt_node_ptr(cvt, gc, hermes_get_WhileStatement_test(n));
          let mut template = ast::WhileStatementTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  body,
                  test,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::WhileStatementBuilder::build_template(gc, template)
        }
        NodeKind::DoWhileStatement => {
          let body = cvt_node_ptr(cvt, gc, hermes_get_DoWhileStatement_body(n));
          let test = cvt_node_ptr(cvt, gc, hermes_get_DoWhileStatement_test(n));
          let mut template = ast::DoWhileStatementTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  body,
                  test,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::DoWhileStatementBuilder::build_template(gc, template)
        }
        NodeKind::ForInStatement => {
          let left = cvt_node_ptr(cvt, gc, hermes_get_ForInStatement_left(n));
          let right = cvt_node_ptr(cvt, gc, hermes_get_ForInStatement_right(n));
          let body = cvt_node_ptr(cvt, gc, hermes_get_ForInStatement_body(n));
          let mut template = ast::ForInStatementTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  left,
                  right,
                  body,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::ForInStatementBuilder::build_template(gc, template)
        }
        NodeKind::ForOfStatement => {
          let left = cvt_node_ptr(cvt, gc, hermes_get_ForOfStatement_left(n));
          let right = cvt_node_ptr(cvt, gc, hermes_get_ForOfStatement_right(n));
          let body = cvt_node_ptr(cvt, gc, hermes_get_ForOfStatement_body(n));
          let is_await = hermes_get_ForOfStatement_await(n);
          let mut template = ast::ForOfStatementTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  left,
                  right,
                  body,
                  is_await,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::ForOfStatementBuilder::build_template(gc, template)
        }
        NodeKind::ForStatement => {
          let init = cvt_node_ptr_opt(cvt, gc, hermes_get_ForStatement_init(n));
          let test = cvt_node_ptr_opt(cvt, gc, hermes_get_ForStatement_test(n));
          let update = cvt_node_ptr_opt(cvt, gc, hermes_get_ForStatement_update(n));
          let body = cvt_node_ptr(cvt, gc, hermes_get_ForStatement_body(n));
          let mut template = ast::ForStatementTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  init,
                  test,
                  update,
                  body,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::ForStatementBuilder::build_template(gc, template)
        }
        NodeKind::DebuggerStatement => {
          let mut template = ast::DebuggerStatementTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::DebuggerStatementBuilder::build_template(gc, template)
        }
        NodeKind::EmptyStatement => {
          let mut template = ast::EmptyStatementTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::EmptyStatementBuilder::build_template(gc, template)
        }
        NodeKind::BlockStatement => {
          let body = cvt_node_list(cvt, gc, hermes_get_BlockStatement_body(n));
          let mut template = ast::BlockStatementTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  body,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::BlockStatementBuilder::build_template(gc, template)
        }
        NodeKind::BreakStatement => {
          let label = cvt_node_ptr_opt(cvt, gc, hermes_get_BreakStatement_label(n));
          let mut template = ast::BreakStatementTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  label,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::BreakStatementBuilder::build_template(gc, template)
        }
        NodeKind::ContinueStatement => {
          let label = cvt_node_ptr_opt(cvt, gc, hermes_get_ContinueStatement_label(n));
          let mut template = ast::ContinueStatementTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  label,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::ContinueStatementBuilder::build_template(gc, template)
        }
        NodeKind::ThrowStatement => {
          let argument = cvt_node_ptr(cvt, gc, hermes_get_ThrowStatement_argument(n));
          let mut template = ast::ThrowStatementTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  argument,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::ThrowStatementBuilder::build_template(gc, template)
        }
        NodeKind::ReturnStatement => {
          let argument = cvt_node_ptr_opt(cvt, gc, hermes_get_ReturnStatement_argument(n));
          let mut template = ast::ReturnStatementTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  argument,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::ReturnStatementBuilder::build_template(gc, template)
        }
        NodeKind::WithStatement => {
          let object = cvt_node_ptr(cvt, gc, hermes_get_WithStatement_object(n));
          let body = cvt_node_ptr(cvt, gc, hermes_get_WithStatement_body(n));
          let mut template = ast::WithStatementTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  object,
                  body,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::WithStatementBuilder::build_template(gc, template)
        }
        NodeKind::SwitchStatement => {
          let discriminant = cvt_node_ptr(cvt, gc, hermes_get_SwitchStatement_discriminant(n));
          let cases = cvt_node_list(cvt, gc, hermes_get_SwitchStatement_cases(n));
          let mut template = ast::SwitchStatementTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  discriminant,
                  cases,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::SwitchStatementBuilder::build_template(gc, template)
        }
        NodeKind::LabeledStatement => {
          let label = cvt_node_ptr(cvt, gc, hermes_get_LabeledStatement_label(n));
          let body = cvt_node_ptr(cvt, gc, hermes_get_LabeledStatement_body(n));
          let mut template = ast::LabeledStatementTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  label,
                  body,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::LabeledStatementBuilder::build_template(gc, template)
        }
        NodeKind::ExpressionStatement => {
          let expression = cvt_node_ptr(cvt, gc, hermes_get_ExpressionStatement_expression(n));
          let directive = cvt_string_opt(hermes_get_ExpressionStatement_directive(n));
          let mut template = ast::ExpressionStatementTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  expression,
                  directive,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::ExpressionStatementBuilder::build_template(gc, template)
        }
        NodeKind::TryStatement => {
          let block = cvt_node_ptr(cvt, gc, hermes_get_TryStatement_block(n));
          let handler = cvt_node_ptr_opt(cvt, gc, hermes_get_TryStatement_handler(n));
          let finalizer = cvt_node_ptr_opt(cvt, gc, hermes_get_TryStatement_finalizer(n));
          let mut template = ast::TryStatementTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  block,
                  handler,
                  finalizer,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::TryStatementBuilder::build_template(gc, template)
        }
        NodeKind::IfStatement => {
          let test = cvt_node_ptr(cvt, gc, hermes_get_IfStatement_test(n));
          let consequent = cvt_node_ptr(cvt, gc, hermes_get_IfStatement_consequent(n));
          let alternate = cvt_node_ptr_opt(cvt, gc, hermes_get_IfStatement_alternate(n));
          let mut template = ast::IfStatementTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  test,
                  consequent,
                  alternate,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::IfStatementBuilder::build_template(gc, template)
        }
        NodeKind::NullLiteral => {
          let mut template = ast::NullLiteralTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::NullLiteralBuilder::build_template(gc, template)
        }
        NodeKind::BooleanLiteral => {
          let value = hermes_get_BooleanLiteral_value(n);
          let mut template = ast::BooleanLiteralTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  value,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::BooleanLiteralBuilder::build_template(gc, template)
        }
        NodeKind::StringLiteral => {
          let value = cvt_string(hermes_get_StringLiteral_value(n));
          let mut template = ast::StringLiteralTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  value,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::StringLiteralBuilder::build_template(gc, template)
        }
        NodeKind::NumericLiteral => {
          let value = hermes_get_NumericLiteral_value(n);
          let mut template = ast::NumericLiteralTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  value,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::NumericLiteralBuilder::build_template(gc, template)
        }
        NodeKind::RegExpLiteral => {
          let pattern = cvt.cvt_label(gc, hermes_get_RegExpLiteral_pattern(n));
          let flags = cvt.cvt_label(gc, hermes_get_RegExpLiteral_flags(n));
          let mut template = ast::RegExpLiteralTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  pattern,
                  flags,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::RegExpLiteralBuilder::build_template(gc, template)
        }
        NodeKind::ThisExpression => {
          let mut template = ast::ThisExpressionTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::ThisExpressionBuilder::build_template(gc, template)
        }
        NodeKind::Super => {
          let mut template = ast::SuperTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::SuperBuilder::build_template(gc, template)
        }
        NodeKind::SequenceExpression => {
          let expressions = cvt_node_list(cvt, gc, hermes_get_SequenceExpression_expressions(n));
          let mut template = ast::SequenceExpressionTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  expressions,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::SequenceExpressionBuilder::build_template(gc, template)
        }
        NodeKind::ObjectExpression => {
          let properties = cvt_node_list(cvt, gc, hermes_get_ObjectExpression_properties(n));
          let mut template = ast::ObjectExpressionTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  properties,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::ObjectExpressionBuilder::build_template(gc, template)
        }
        NodeKind::ArrayExpression => {
          let elements = cvt_node_list(cvt, gc, hermes_get_ArrayExpression_elements(n));
          let trailing_comma = hermes_get_ArrayExpression_trailingComma(n);
          let mut template = ast::ArrayExpressionTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  elements,
                  trailing_comma,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::ArrayExpressionBuilder::build_template(gc, template)
        }
        NodeKind::SpreadElement => {
          let argument = cvt_node_ptr(cvt, gc, hermes_get_SpreadElement_argument(n));
          let mut template = ast::SpreadElementTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  argument,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::SpreadElementBuilder::build_template(gc, template)
        }
        NodeKind::NewExpression => {
          let callee = cvt_node_ptr(cvt, gc, hermes_get_NewExpression_callee(n));
          let type_arguments = cvt_node_ptr_opt(cvt, gc, hermes_get_NewExpression_typeArguments(n));
          let arguments = cvt_node_list(cvt, gc, hermes_get_NewExpression_arguments(n));
          let mut template = ast::NewExpressionTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  callee,
                  type_arguments,
                  arguments,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::NewExpressionBuilder::build_template(gc, template)
        }
        NodeKind::YieldExpression => {
          let argument = cvt_node_ptr_opt(cvt, gc, hermes_get_YieldExpression_argument(n));
          let delegate = hermes_get_YieldExpression_delegate(n);
          let mut template = ast::YieldExpressionTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  argument,
                  delegate,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::YieldExpressionBuilder::build_template(gc, template)
        }
        NodeKind::AwaitExpression => {
          let argument = cvt_node_ptr(cvt, gc, hermes_get_AwaitExpression_argument(n));
          let mut template = ast::AwaitExpressionTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  argument,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::AwaitExpressionBuilder::build_template(gc, template)
        }
        NodeKind::ImportExpression => {
          let source = cvt_node_ptr(cvt, gc, hermes_get_ImportExpression_source(n));
          let attributes = cvt_node_ptr_opt(cvt, gc, hermes_get_ImportExpression_attributes(n));
          let mut template = ast::ImportExpressionTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  source,
                  attributes,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::ImportExpressionBuilder::build_template(gc, template)
        }
        NodeKind::CallExpression => {
          let callee = cvt_node_ptr(cvt, gc, hermes_get_CallExpression_callee(n));
          let type_arguments = cvt_node_ptr_opt(cvt, gc, hermes_get_CallExpression_typeArguments(n));
          let arguments = cvt_node_list(cvt, gc, hermes_get_CallExpression_arguments(n));
          let mut template = ast::CallExpressionTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  callee,
                  type_arguments,
                  arguments,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::CallExpressionBuilder::build_template(gc, template)
        }
        NodeKind::OptionalCallExpression => {
          let callee = cvt_node_ptr(cvt, gc, hermes_get_OptionalCallExpression_callee(n));
          let type_arguments = cvt_node_ptr_opt(cvt, gc, hermes_get_OptionalCallExpression_typeArguments(n));
          let arguments = cvt_node_list(cvt, gc, hermes_get_OptionalCallExpression_arguments(n));
          let optional = hermes_get_OptionalCallExpression_optional(n);
          let mut template = ast::OptionalCallExpressionTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  callee,
                  type_arguments,
                  arguments,
                  optional,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::OptionalCallExpressionBuilder::build_template(gc, template)
        }
        NodeKind::AssignmentExpression => {
          let operator = cvt_enum(hermes_get_AssignmentExpression_operator(n));
          let left = cvt_node_ptr(cvt, gc, hermes_get_AssignmentExpression_left(n));
          let right = cvt_node_ptr(cvt, gc, hermes_get_AssignmentExpression_right(n));
          let mut template = ast::AssignmentExpressionTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  operator,
                  left,
                  right,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::AssignmentExpressionBuilder::build_template(gc, template)
        }
        NodeKind::UnaryExpression => {
          let operator = cvt_enum(hermes_get_UnaryExpression_operator(n));
          let argument = cvt_node_ptr(cvt, gc, hermes_get_UnaryExpression_argument(n));
          let prefix = hermes_get_UnaryExpression_prefix(n);
          let mut template = ast::UnaryExpressionTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  operator,
                  argument,
                  prefix,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::UnaryExpressionBuilder::build_template(gc, template)
        }
        NodeKind::UpdateExpression => {
          let operator = cvt_enum(hermes_get_UpdateExpression_operator(n));
          let argument = cvt_node_ptr(cvt, gc, hermes_get_UpdateExpression_argument(n));
          let prefix = hermes_get_UpdateExpression_prefix(n);
          let mut template = ast::UpdateExpressionTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  operator,
                  argument,
                  prefix,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::UpdateExpressionBuilder::build_template(gc, template)
        }
        NodeKind::MemberExpression => {
          let object = cvt_node_ptr(cvt, gc, hermes_get_MemberExpression_object(n));
          let property = cvt_node_ptr(cvt, gc, hermes_get_MemberExpression_property(n));
          let computed = hermes_get_MemberExpression_computed(n);
          let mut template = ast::MemberExpressionTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  object,
                  property,
                  computed,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::MemberExpressionBuilder::build_template(gc, template)
        }
        NodeKind::OptionalMemberExpression => {
          let object = cvt_node_ptr(cvt, gc, hermes_get_OptionalMemberExpression_object(n));
          let property = cvt_node_ptr(cvt, gc, hermes_get_OptionalMemberExpression_property(n));
          let computed = hermes_get_OptionalMemberExpression_computed(n);
          let optional = hermes_get_OptionalMemberExpression_optional(n);
          let mut template = ast::OptionalMemberExpressionTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  object,
                  property,
                  computed,
                  optional,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::OptionalMemberExpressionBuilder::build_template(gc, template)
        }
        NodeKind::LogicalExpression => {
          let left = cvt_node_ptr(cvt, gc, hermes_get_LogicalExpression_left(n));
          let right = cvt_node_ptr(cvt, gc, hermes_get_LogicalExpression_right(n));
          let operator = cvt_enum(hermes_get_LogicalExpression_operator(n));
          let mut template = ast::LogicalExpressionTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  left,
                  right,
                  operator,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::LogicalExpressionBuilder::build_template(gc, template)
        }
        NodeKind::ConditionalExpression => {
          let test = cvt_node_ptr(cvt, gc, hermes_get_ConditionalExpression_test(n));
          let alternate = cvt_node_ptr(cvt, gc, hermes_get_ConditionalExpression_alternate(n));
          let consequent = cvt_node_ptr(cvt, gc, hermes_get_ConditionalExpression_consequent(n));
          let mut template = ast::ConditionalExpressionTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  test,
                  alternate,
                  consequent,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::ConditionalExpressionBuilder::build_template(gc, template)
        }
        NodeKind::BinaryExpression => {
          let left = cvt_node_ptr(cvt, gc, hermes_get_BinaryExpression_left(n));
          let right = cvt_node_ptr(cvt, gc, hermes_get_BinaryExpression_right(n));
          let operator = cvt_enum(hermes_get_BinaryExpression_operator(n));
          let mut template = ast::BinaryExpressionTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  left,
                  right,
                  operator,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::BinaryExpressionBuilder::build_template(gc, template)
        }
        NodeKind::Directive => {
          let value = cvt_node_ptr(cvt, gc, hermes_get_Directive_value(n));
          let mut template = ast::DirectiveTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  value,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::DirectiveBuilder::build_template(gc, template)
        }
        NodeKind::DirectiveLiteral => {
          let value = cvt_string(hermes_get_DirectiveLiteral_value(n));
          let mut template = ast::DirectiveLiteralTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  value,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::DirectiveLiteralBuilder::build_template(gc, template)
        }
        NodeKind::Identifier => {
          let name = cvt.cvt_label(gc, hermes_get_Identifier_name(n));
          let type_annotation = cvt_node_ptr_opt(cvt, gc, hermes_get_Identifier_typeAnnotation(n));
          let optional = hermes_get_Identifier_optional(n);
          let mut template = ast::IdentifierTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  name,
                  type_annotation,
                  optional,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::IdentifierBuilder::build_template(gc, template)
        }
        NodeKind::PrivateName => {
          let id = cvt_node_ptr(cvt, gc, hermes_get_PrivateName_id(n));
          let mut template = ast::PrivateNameTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  id,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::PrivateNameBuilder::build_template(gc, template)
        }
        NodeKind::MetaProperty => {
          let meta = cvt_node_ptr(cvt, gc, hermes_get_MetaProperty_meta(n));
          let property = cvt_node_ptr(cvt, gc, hermes_get_MetaProperty_property(n));
          let mut template = ast::MetaPropertyTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  meta,
                  property,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::MetaPropertyBuilder::build_template(gc, template)
        }
        NodeKind::SwitchCase => {
          let test = cvt_node_ptr_opt(cvt, gc, hermes_get_SwitchCase_test(n));
          let consequent = cvt_node_list(cvt, gc, hermes_get_SwitchCase_consequent(n));
          let mut template = ast::SwitchCaseTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  test,
                  consequent,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::SwitchCaseBuilder::build_template(gc, template)
        }
        NodeKind::CatchClause => {
          let param = cvt_node_ptr_opt(cvt, gc, hermes_get_CatchClause_param(n));
          let body = cvt_node_ptr(cvt, gc, hermes_get_CatchClause_body(n));
          let mut template = ast::CatchClauseTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  param,
                  body,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::CatchClauseBuilder::build_template(gc, template)
        }
        NodeKind::VariableDeclarator => {
          let init = cvt_node_ptr_opt(cvt, gc, hermes_get_VariableDeclarator_init(n));
          let id = cvt_node_ptr(cvt, gc, hermes_get_VariableDeclarator_id(n));
          let mut template = ast::VariableDeclaratorTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  init,
                  id,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::VariableDeclaratorBuilder::build_template(gc, template)
        }
        NodeKind::VariableDeclaration => {
          let kind = cvt_enum(hermes_get_VariableDeclaration_kind(n));
          let declarations = cvt_node_list(cvt, gc, hermes_get_VariableDeclaration_declarations(n));
          let mut template = ast::VariableDeclarationTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  kind,
                  declarations,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::VariableDeclarationBuilder::build_template(gc, template)
        }
        NodeKind::TemplateLiteral => {
          let quasis = cvt_node_list(cvt, gc, hermes_get_TemplateLiteral_quasis(n));
          let expressions = cvt_node_list(cvt, gc, hermes_get_TemplateLiteral_expressions(n));
          let mut template = ast::TemplateLiteralTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  quasis,
                  expressions,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::TemplateLiteralBuilder::build_template(gc, template)
        }
        NodeKind::TaggedTemplateExpression => {
          let tag = cvt_node_ptr(cvt, gc, hermes_get_TaggedTemplateExpression_tag(n));
          let quasi = cvt_node_ptr(cvt, gc, hermes_get_TaggedTemplateExpression_quasi(n));
          let mut template = ast::TaggedTemplateExpressionTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  tag,
                  quasi,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::TaggedTemplateExpressionBuilder::build_template(gc, template)
        }
        NodeKind::TemplateElement => {
          let tail = hermes_get_TemplateElement_tail(n);
          let cooked = cvt_string_opt(hermes_get_TemplateElement_cooked(n));
          let raw = cvt.cvt_label(gc, hermes_get_TemplateElement_raw(n));
          let mut template = ast::TemplateElementTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  tail,
                  cooked,
                  raw,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::TemplateElementBuilder::build_template(gc, template)
        }
        NodeKind::Property => {
          let key = cvt_node_ptr(cvt, gc, hermes_get_Property_key(n));
          let value = cvt_node_ptr(cvt, gc, hermes_get_Property_value(n));
          let kind = cvt_enum(hermes_get_Property_kind(n));
          let computed = hermes_get_Property_computed(n);
          let method = hermes_get_Property_method(n);
          let shorthand = hermes_get_Property_shorthand(n);
          let mut template = ast::PropertyTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  key,
                  value,
                  kind,
                  computed,
                  method,
                  shorthand,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::PropertyBuilder::build_template(gc, template)
        }
        NodeKind::ClassDeclaration => {
          let id = cvt_node_ptr_opt(cvt, gc, hermes_get_ClassDeclaration_id(n));
          let type_parameters = cvt_node_ptr_opt(cvt, gc, hermes_get_ClassDeclaration_typeParameters(n));
          let super_class = cvt_node_ptr_opt(cvt, gc, hermes_get_ClassDeclaration_superClass(n));
          let super_type_parameters = cvt_node_ptr_opt(cvt, gc, hermes_get_ClassDeclaration_superTypeParameters(n));
          let implements = cvt_node_list(cvt, gc, hermes_get_ClassDeclaration_implements(n));
          let decorators = cvt_node_list(cvt, gc, hermes_get_ClassDeclaration_decorators(n));
          let body = cvt_node_ptr(cvt, gc, hermes_get_ClassDeclaration_body(n));
          let mut template = ast::ClassDeclarationTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  id,
                  type_parameters,
                  super_class,
                  super_type_parameters,
                  implements,
                  decorators,
                  body,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::ClassDeclarationBuilder::build_template(gc, template)
        }
        NodeKind::ClassExpression => {
          let id = cvt_node_ptr_opt(cvt, gc, hermes_get_ClassExpression_id(n));
          let type_parameters = cvt_node_ptr_opt(cvt, gc, hermes_get_ClassExpression_typeParameters(n));
          let super_class = cvt_node_ptr_opt(cvt, gc, hermes_get_ClassExpression_superClass(n));
          let super_type_parameters = cvt_node_ptr_opt(cvt, gc, hermes_get_ClassExpression_superTypeParameters(n));
          let implements = cvt_node_list(cvt, gc, hermes_get_ClassExpression_implements(n));
          let decorators = cvt_node_list(cvt, gc, hermes_get_ClassExpression_decorators(n));
          let body = cvt_node_ptr(cvt, gc, hermes_get_ClassExpression_body(n));
          let mut template = ast::ClassExpressionTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  id,
                  type_parameters,
                  super_class,
                  super_type_parameters,
                  implements,
                  decorators,
                  body,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::ClassExpressionBuilder::build_template(gc, template)
        }
        NodeKind::ClassBody => {
          let body = cvt_node_list(cvt, gc, hermes_get_ClassBody_body(n));
          let mut template = ast::ClassBodyTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  body,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::ClassBodyBuilder::build_template(gc, template)
        }
        NodeKind::ClassProperty => {
          let key = cvt_node_ptr(cvt, gc, hermes_get_ClassProperty_key(n));
          let value = cvt_node_ptr_opt(cvt, gc, hermes_get_ClassProperty_value(n));
          let computed = hermes_get_ClassProperty_computed(n);
          let is_static = hermes_get_ClassProperty_static(n);
          let declare = hermes_get_ClassProperty_declare(n);
          let optional = hermes_get_ClassProperty_optional(n);
          let variance = cvt_node_ptr_opt(cvt, gc, hermes_get_ClassProperty_variance(n));
          let type_annotation = cvt_node_ptr_opt(cvt, gc, hermes_get_ClassProperty_typeAnnotation(n));
          let mut template = ast::ClassPropertyTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  key,
                  value,
                  computed,
                  is_static,
                  declare,
                  optional,
                  variance,
                  type_annotation,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::ClassPropertyBuilder::build_template(gc, template)
        }
        NodeKind::ClassPrivateProperty => {
          let key = cvt_node_ptr(cvt, gc, hermes_get_ClassPrivateProperty_key(n));
          let value = cvt_node_ptr_opt(cvt, gc, hermes_get_ClassPrivateProperty_value(n));
          let is_static = hermes_get_ClassPrivateProperty_static(n);
          let declare = hermes_get_ClassPrivateProperty_declare(n);
          let optional = hermes_get_ClassPrivateProperty_optional(n);
          let variance = cvt_node_ptr_opt(cvt, gc, hermes_get_ClassPrivateProperty_variance(n));
          let type_annotation = cvt_node_ptr_opt(cvt, gc, hermes_get_ClassPrivateProperty_typeAnnotation(n));
          let mut template = ast::ClassPrivatePropertyTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  key,
                  value,
                  is_static,
                  declare,
                  optional,
                  variance,
                  type_annotation,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::ClassPrivatePropertyBuilder::build_template(gc, template)
        }
        NodeKind::MethodDefinition => {
          let key = cvt_node_ptr(cvt, gc, hermes_get_MethodDefinition_key(n));
          let value = cvt_node_ptr(cvt, gc, hermes_get_MethodDefinition_value(n));
          let kind = cvt_enum(hermes_get_MethodDefinition_kind(n));
          let computed = hermes_get_MethodDefinition_computed(n);
          let is_static = hermes_get_MethodDefinition_static(n);
          let mut template = ast::MethodDefinitionTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  key,
                  value,
                  kind,
                  computed,
                  is_static,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::MethodDefinitionBuilder::build_template(gc, template)
        }
        NodeKind::ImportDeclaration => {
          let specifiers = cvt_node_list(cvt, gc, hermes_get_ImportDeclaration_specifiers(n));
          let source = cvt_node_ptr(cvt, gc, hermes_get_ImportDeclaration_source(n));
          let assertions = cvt_node_list_opt(cvt, gc, hermes_get_ImportDeclaration_assertions(n));
          let import_kind = cvt_enum(hermes_get_ImportDeclaration_importKind(n));
          let mut template = ast::ImportDeclarationTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  specifiers,
                  source,
                  assertions,
                  import_kind,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::ImportDeclarationBuilder::build_template(gc, template)
        }
        NodeKind::ImportSpecifier => {
          let imported = cvt_node_ptr(cvt, gc, hermes_get_ImportSpecifier_imported(n));
          let local = cvt_node_ptr(cvt, gc, hermes_get_ImportSpecifier_local(n));
          let import_kind = cvt_enum(hermes_get_ImportSpecifier_importKind(n));
          let mut template = ast::ImportSpecifierTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  imported,
                  local,
                  import_kind,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::ImportSpecifierBuilder::build_template(gc, template)
        }
        NodeKind::ImportDefaultSpecifier => {
          let local = cvt_node_ptr(cvt, gc, hermes_get_ImportDefaultSpecifier_local(n));
          let mut template = ast::ImportDefaultSpecifierTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  local,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::ImportDefaultSpecifierBuilder::build_template(gc, template)
        }
        NodeKind::ImportNamespaceSpecifier => {
          let local = cvt_node_ptr(cvt, gc, hermes_get_ImportNamespaceSpecifier_local(n));
          let mut template = ast::ImportNamespaceSpecifierTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  local,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::ImportNamespaceSpecifierBuilder::build_template(gc, template)
        }
        NodeKind::ImportAttribute => {
          let key = cvt_node_ptr(cvt, gc, hermes_get_ImportAttribute_key(n));
          let value = cvt_node_ptr(cvt, gc, hermes_get_ImportAttribute_value(n));
          let mut template = ast::ImportAttributeTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  key,
                  value,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::ImportAttributeBuilder::build_template(gc, template)
        }
        NodeKind::ExportNamedDeclaration => {
          let declaration = cvt_node_ptr_opt(cvt, gc, hermes_get_ExportNamedDeclaration_declaration(n));
          let specifiers = cvt_node_list(cvt, gc, hermes_get_ExportNamedDeclaration_specifiers(n));
          let source = cvt_node_ptr_opt(cvt, gc, hermes_get_ExportNamedDeclaration_source(n));
          let export_kind = cvt_enum(hermes_get_ExportNamedDeclaration_exportKind(n));
          let mut template = ast::ExportNamedDeclarationTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  declaration,
                  specifiers,
                  source,
                  export_kind,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::ExportNamedDeclarationBuilder::build_template(gc, template)
        }
        NodeKind::ExportSpecifier => {
          let exported = cvt_node_ptr(cvt, gc, hermes_get_ExportSpecifier_exported(n));
          let local = cvt_node_ptr(cvt, gc, hermes_get_ExportSpecifier_local(n));
          let mut template = ast::ExportSpecifierTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  exported,
                  local,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::ExportSpecifierBuilder::build_template(gc, template)
        }
        NodeKind::ExportNamespaceSpecifier => {
          let exported = cvt_node_ptr(cvt, gc, hermes_get_ExportNamespaceSpecifier_exported(n));
          let mut template = ast::ExportNamespaceSpecifierTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  exported,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::ExportNamespaceSpecifierBuilder::build_template(gc, template)
        }
        NodeKind::ExportDefaultDeclaration => {
          let declaration = cvt_node_ptr(cvt, gc, hermes_get_ExportDefaultDeclaration_declaration(n));
          let mut template = ast::ExportDefaultDeclarationTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  declaration,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::ExportDefaultDeclarationBuilder::build_template(gc, template)
        }
        NodeKind::ExportAllDeclaration => {
          let source = cvt_node_ptr(cvt, gc, hermes_get_ExportAllDeclaration_source(n));
          let export_kind = cvt_enum(hermes_get_ExportAllDeclaration_exportKind(n));
          let mut template = ast::ExportAllDeclarationTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  source,
                  export_kind,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::ExportAllDeclarationBuilder::build_template(gc, template)
        }
        NodeKind::ObjectPattern => {
          let properties = cvt_node_list(cvt, gc, hermes_get_ObjectPattern_properties(n));
          let type_annotation = cvt_node_ptr_opt(cvt, gc, hermes_get_ObjectPattern_typeAnnotation(n));
          let mut template = ast::ObjectPatternTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  properties,
                  type_annotation,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::ObjectPatternBuilder::build_template(gc, template)
        }
        NodeKind::ArrayPattern => {
          let elements = cvt_node_list(cvt, gc, hermes_get_ArrayPattern_elements(n));
          let type_annotation = cvt_node_ptr_opt(cvt, gc, hermes_get_ArrayPattern_typeAnnotation(n));
          let mut template = ast::ArrayPatternTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  elements,
                  type_annotation,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::ArrayPatternBuilder::build_template(gc, template)
        }
        NodeKind::RestElement => {
          let argument = cvt_node_ptr(cvt, gc, hermes_get_RestElement_argument(n));
          let mut template = ast::RestElementTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  argument,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::RestElementBuilder::build_template(gc, template)
        }
        NodeKind::AssignmentPattern => {
          let left = cvt_node_ptr(cvt, gc, hermes_get_AssignmentPattern_left(n));
          let right = cvt_node_ptr(cvt, gc, hermes_get_AssignmentPattern_right(n));
          let mut template = ast::AssignmentPatternTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  left,
                  right,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::AssignmentPatternBuilder::build_template(gc, template)
        }
        NodeKind::JSXIdentifier => {
          let name = cvt.cvt_label(gc, hermes_get_JSXIdentifier_name(n));
          let mut template = ast::JSXIdentifierTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  name,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::JSXIdentifierBuilder::build_template(gc, template)
        }
        NodeKind::JSXMemberExpression => {
          let object = cvt_node_ptr(cvt, gc, hermes_get_JSXMemberExpression_object(n));
          let property = cvt_node_ptr(cvt, gc, hermes_get_JSXMemberExpression_property(n));
          let mut template = ast::JSXMemberExpressionTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  object,
                  property,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::JSXMemberExpressionBuilder::build_template(gc, template)
        }
        NodeKind::JSXNamespacedName => {
          let namespace = cvt_node_ptr(cvt, gc, hermes_get_JSXNamespacedName_namespace(n));
          let name = cvt_node_ptr(cvt, gc, hermes_get_JSXNamespacedName_name(n));
          let mut template = ast::JSXNamespacedNameTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  namespace,
                  name,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::JSXNamespacedNameBuilder::build_template(gc, template)
        }
        NodeKind::JSXEmptyExpression => {
          let mut template = ast::JSXEmptyExpressionTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::JSXEmptyExpressionBuilder::build_template(gc, template)
        }
        NodeKind::JSXExpressionContainer => {
          let expression = cvt_node_ptr(cvt, gc, hermes_get_JSXExpressionContainer_expression(n));
          let mut template = ast::JSXExpressionContainerTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  expression,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::JSXExpressionContainerBuilder::build_template(gc, template)
        }
        NodeKind::JSXSpreadChild => {
          let expression = cvt_node_ptr(cvt, gc, hermes_get_JSXSpreadChild_expression(n));
          let mut template = ast::JSXSpreadChildTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  expression,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::JSXSpreadChildBuilder::build_template(gc, template)
        }
        NodeKind::JSXOpeningElement => {
          let name = cvt_node_ptr(cvt, gc, hermes_get_JSXOpeningElement_name(n));
          let attributes = cvt_node_list(cvt, gc, hermes_get_JSXOpeningElement_attributes(n));
          let self_closing = hermes_get_JSXOpeningElement_selfClosing(n);
          let mut template = ast::JSXOpeningElementTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  name,
                  attributes,
                  self_closing,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::JSXOpeningElementBuilder::build_template(gc, template)
        }
        NodeKind::JSXClosingElement => {
          let name = cvt_node_ptr(cvt, gc, hermes_get_JSXClosingElement_name(n));
          let mut template = ast::JSXClosingElementTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  name,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::JSXClosingElementBuilder::build_template(gc, template)
        }
        NodeKind::JSXAttribute => {
          let name = cvt_node_ptr(cvt, gc, hermes_get_JSXAttribute_name(n));
          let value = cvt_node_ptr_opt(cvt, gc, hermes_get_JSXAttribute_value(n));
          let mut template = ast::JSXAttributeTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  name,
                  value,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::JSXAttributeBuilder::build_template(gc, template)
        }
        NodeKind::JSXSpreadAttribute => {
          let argument = cvt_node_ptr(cvt, gc, hermes_get_JSXSpreadAttribute_argument(n));
          let mut template = ast::JSXSpreadAttributeTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  argument,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::JSXSpreadAttributeBuilder::build_template(gc, template)
        }
        NodeKind::JSXText => {
          let value = cvt_string(hermes_get_JSXText_value(n));
          let raw = cvt.cvt_label(gc, hermes_get_JSXText_raw(n));
          let mut template = ast::JSXTextTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  value,
                  raw,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::JSXTextBuilder::build_template(gc, template)
        }
        NodeKind::JSXElement => {
          let opening_element = cvt_node_ptr(cvt, gc, hermes_get_JSXElement_openingElement(n));
          let children = cvt_node_list(cvt, gc, hermes_get_JSXElement_children(n));
          let closing_element = cvt_node_ptr_opt(cvt, gc, hermes_get_JSXElement_closingElement(n));
          let mut template = ast::JSXElementTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  opening_element,
                  children,
                  closing_element,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::JSXElementBuilder::build_template(gc, template)
        }
        NodeKind::JSXFragment => {
          let opening_fragment = cvt_node_ptr(cvt, gc, hermes_get_JSXFragment_openingFragment(n));
          let children = cvt_node_list(cvt, gc, hermes_get_JSXFragment_children(n));
          let closing_fragment = cvt_node_ptr(cvt, gc, hermes_get_JSXFragment_closingFragment(n));
          let mut template = ast::JSXFragmentTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  opening_fragment,
                  children,
                  closing_fragment,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::JSXFragmentBuilder::build_template(gc, template)
        }
        NodeKind::JSXOpeningFragment => {
          let mut template = ast::JSXOpeningFragmentTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::JSXOpeningFragmentBuilder::build_template(gc, template)
        }
        NodeKind::JSXClosingFragment => {
          let mut template = ast::JSXClosingFragmentTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::JSXClosingFragmentBuilder::build_template(gc, template)
        }
        NodeKind::ExistsTypeAnnotation => {
          let mut template = ast::ExistsTypeAnnotationTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::ExistsTypeAnnotationBuilder::build_template(gc, template)
        }
        NodeKind::EmptyTypeAnnotation => {
          let mut template = ast::EmptyTypeAnnotationTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::EmptyTypeAnnotationBuilder::build_template(gc, template)
        }
        NodeKind::StringTypeAnnotation => {
          let mut template = ast::StringTypeAnnotationTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::StringTypeAnnotationBuilder::build_template(gc, template)
        }
        NodeKind::NumberTypeAnnotation => {
          let mut template = ast::NumberTypeAnnotationTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::NumberTypeAnnotationBuilder::build_template(gc, template)
        }
        NodeKind::StringLiteralTypeAnnotation => {
          let value = cvt_string(hermes_get_StringLiteralTypeAnnotation_value(n));
          let mut template = ast::StringLiteralTypeAnnotationTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  value,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::StringLiteralTypeAnnotationBuilder::build_template(gc, template)
        }
        NodeKind::NumberLiteralTypeAnnotation => {
          let value = hermes_get_NumberLiteralTypeAnnotation_value(n);
          let raw = cvt.cvt_label(gc, hermes_get_NumberLiteralTypeAnnotation_raw(n));
          let mut template = ast::NumberLiteralTypeAnnotationTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  value,
                  raw,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::NumberLiteralTypeAnnotationBuilder::build_template(gc, template)
        }
        NodeKind::BooleanTypeAnnotation => {
          let mut template = ast::BooleanTypeAnnotationTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::BooleanTypeAnnotationBuilder::build_template(gc, template)
        }
        NodeKind::BooleanLiteralTypeAnnotation => {
          let value = hermes_get_BooleanLiteralTypeAnnotation_value(n);
          let raw = cvt.cvt_label(gc, hermes_get_BooleanLiteralTypeAnnotation_raw(n));
          let mut template = ast::BooleanLiteralTypeAnnotationTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  value,
                  raw,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::BooleanLiteralTypeAnnotationBuilder::build_template(gc, template)
        }
        NodeKind::NullLiteralTypeAnnotation => {
          let mut template = ast::NullLiteralTypeAnnotationTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::NullLiteralTypeAnnotationBuilder::build_template(gc, template)
        }
        NodeKind::SymbolTypeAnnotation => {
          let mut template = ast::SymbolTypeAnnotationTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::SymbolTypeAnnotationBuilder::build_template(gc, template)
        }
        NodeKind::AnyTypeAnnotation => {
          let mut template = ast::AnyTypeAnnotationTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::AnyTypeAnnotationBuilder::build_template(gc, template)
        }
        NodeKind::MixedTypeAnnotation => {
          let mut template = ast::MixedTypeAnnotationTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::MixedTypeAnnotationBuilder::build_template(gc, template)
        }
        NodeKind::VoidTypeAnnotation => {
          let mut template = ast::VoidTypeAnnotationTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::VoidTypeAnnotationBuilder::build_template(gc, template)
        }
        NodeKind::FunctionTypeAnnotation => {
          let params = cvt_node_list(cvt, gc, hermes_get_FunctionTypeAnnotation_params(n));
          let this = cvt_node_ptr_opt(cvt, gc, hermes_get_FunctionTypeAnnotation_this(n));
          let return_type = cvt_node_ptr(cvt, gc, hermes_get_FunctionTypeAnnotation_returnType(n));
          let rest = cvt_node_ptr_opt(cvt, gc, hermes_get_FunctionTypeAnnotation_rest(n));
          let type_parameters = cvt_node_ptr_opt(cvt, gc, hermes_get_FunctionTypeAnnotation_typeParameters(n));
          let mut template = ast::FunctionTypeAnnotationTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  params,
                  this,
                  return_type,
                  rest,
                  type_parameters,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::FunctionTypeAnnotationBuilder::build_template(gc, template)
        }
        NodeKind::FunctionTypeParam => {
          let name = cvt_node_ptr_opt(cvt, gc, hermes_get_FunctionTypeParam_name(n));
          let type_annotation = cvt_node_ptr(cvt, gc, hermes_get_FunctionTypeParam_typeAnnotation(n));
          let optional = hermes_get_FunctionTypeParam_optional(n);
          let mut template = ast::FunctionTypeParamTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  name,
                  type_annotation,
                  optional,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::FunctionTypeParamBuilder::build_template(gc, template)
        }
        NodeKind::NullableTypeAnnotation => {
          let type_annotation = cvt_node_ptr(cvt, gc, hermes_get_NullableTypeAnnotation_typeAnnotation(n));
          let mut template = ast::NullableTypeAnnotationTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  type_annotation,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::NullableTypeAnnotationBuilder::build_template(gc, template)
        }
        NodeKind::QualifiedTypeIdentifier => {
          let qualification = cvt_node_ptr(cvt, gc, hermes_get_QualifiedTypeIdentifier_qualification(n));
          let id = cvt_node_ptr(cvt, gc, hermes_get_QualifiedTypeIdentifier_id(n));
          let mut template = ast::QualifiedTypeIdentifierTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  qualification,
                  id,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::QualifiedTypeIdentifierBuilder::build_template(gc, template)
        }
        NodeKind::TypeofTypeAnnotation => {
          let argument = cvt_node_ptr(cvt, gc, hermes_get_TypeofTypeAnnotation_argument(n));
          let mut template = ast::TypeofTypeAnnotationTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  argument,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::TypeofTypeAnnotationBuilder::build_template(gc, template)
        }
        NodeKind::TupleTypeAnnotation => {
          let types = cvt_node_list(cvt, gc, hermes_get_TupleTypeAnnotation_types(n));
          let mut template = ast::TupleTypeAnnotationTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  types,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::TupleTypeAnnotationBuilder::build_template(gc, template)
        }
        NodeKind::ArrayTypeAnnotation => {
          let element_type = cvt_node_ptr(cvt, gc, hermes_get_ArrayTypeAnnotation_elementType(n));
          let mut template = ast::ArrayTypeAnnotationTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  element_type,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::ArrayTypeAnnotationBuilder::build_template(gc, template)
        }
        NodeKind::UnionTypeAnnotation => {
          let types = cvt_node_list(cvt, gc, hermes_get_UnionTypeAnnotation_types(n));
          let mut template = ast::UnionTypeAnnotationTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  types,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::UnionTypeAnnotationBuilder::build_template(gc, template)
        }
        NodeKind::IntersectionTypeAnnotation => {
          let types = cvt_node_list(cvt, gc, hermes_get_IntersectionTypeAnnotation_types(n));
          let mut template = ast::IntersectionTypeAnnotationTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  types,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::IntersectionTypeAnnotationBuilder::build_template(gc, template)
        }
        NodeKind::GenericTypeAnnotation => {
          let id = cvt_node_ptr(cvt, gc, hermes_get_GenericTypeAnnotation_id(n));
          let type_parameters = cvt_node_ptr_opt(cvt, gc, hermes_get_GenericTypeAnnotation_typeParameters(n));
          let mut template = ast::GenericTypeAnnotationTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  id,
                  type_parameters,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::GenericTypeAnnotationBuilder::build_template(gc, template)
        }
        NodeKind::IndexedAccessType => {
          let object_type = cvt_node_ptr(cvt, gc, hermes_get_IndexedAccessType_objectType(n));
          let index_type = cvt_node_ptr(cvt, gc, hermes_get_IndexedAccessType_indexType(n));
          let mut template = ast::IndexedAccessTypeTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  object_type,
                  index_type,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::IndexedAccessTypeBuilder::build_template(gc, template)
        }
        NodeKind::OptionalIndexedAccessType => {
          let object_type = cvt_node_ptr(cvt, gc, hermes_get_OptionalIndexedAccessType_objectType(n));
          let index_type = cvt_node_ptr(cvt, gc, hermes_get_OptionalIndexedAccessType_indexType(n));
          let optional = hermes_get_OptionalIndexedAccessType_optional(n);
          let mut template = ast::OptionalIndexedAccessTypeTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  object_type,
                  index_type,
                  optional,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::OptionalIndexedAccessTypeBuilder::build_template(gc, template)
        }
        NodeKind::InterfaceTypeAnnotation => {
          let extends = cvt_node_list(cvt, gc, hermes_get_InterfaceTypeAnnotation_extends(n));
          let body = cvt_node_ptr_opt(cvt, gc, hermes_get_InterfaceTypeAnnotation_body(n));
          let mut template = ast::InterfaceTypeAnnotationTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  extends,
                  body,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::InterfaceTypeAnnotationBuilder::build_template(gc, template)
        }
        NodeKind::TypeAlias => {
          let id = cvt_node_ptr(cvt, gc, hermes_get_TypeAlias_id(n));
          let type_parameters = cvt_node_ptr_opt(cvt, gc, hermes_get_TypeAlias_typeParameters(n));
          let right = cvt_node_ptr(cvt, gc, hermes_get_TypeAlias_right(n));
          let mut template = ast::TypeAliasTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  id,
                  type_parameters,
                  right,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::TypeAliasBuilder::build_template(gc, template)
        }
        NodeKind::OpaqueType => {
          let id = cvt_node_ptr(cvt, gc, hermes_get_OpaqueType_id(n));
          let type_parameters = cvt_node_ptr_opt(cvt, gc, hermes_get_OpaqueType_typeParameters(n));
          let impltype = cvt_node_ptr(cvt, gc, hermes_get_OpaqueType_impltype(n));
          let supertype = cvt_node_ptr_opt(cvt, gc, hermes_get_OpaqueType_supertype(n));
          let mut template = ast::OpaqueTypeTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  id,
                  type_parameters,
                  impltype,
                  supertype,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::OpaqueTypeBuilder::build_template(gc, template)
        }
        NodeKind::InterfaceDeclaration => {
          let id = cvt_node_ptr(cvt, gc, hermes_get_InterfaceDeclaration_id(n));
          let type_parameters = cvt_node_ptr_opt(cvt, gc, hermes_get_InterfaceDeclaration_typeParameters(n));
          let extends = cvt_node_list(cvt, gc, hermes_get_InterfaceDeclaration_extends(n));
          let body = cvt_node_ptr(cvt, gc, hermes_get_InterfaceDeclaration_body(n));
          let mut template = ast::InterfaceDeclarationTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  id,
                  type_parameters,
                  extends,
                  body,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::InterfaceDeclarationBuilder::build_template(gc, template)
        }
        NodeKind::DeclareTypeAlias => {
          let id = cvt_node_ptr(cvt, gc, hermes_get_DeclareTypeAlias_id(n));
          let type_parameters = cvt_node_ptr_opt(cvt, gc, hermes_get_DeclareTypeAlias_typeParameters(n));
          let right = cvt_node_ptr(cvt, gc, hermes_get_DeclareTypeAlias_right(n));
          let mut template = ast::DeclareTypeAliasTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  id,
                  type_parameters,
                  right,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::DeclareTypeAliasBuilder::build_template(gc, template)
        }
        NodeKind::DeclareOpaqueType => {
          let id = cvt_node_ptr(cvt, gc, hermes_get_DeclareOpaqueType_id(n));
          let type_parameters = cvt_node_ptr_opt(cvt, gc, hermes_get_DeclareOpaqueType_typeParameters(n));
          let impltype = cvt_node_ptr_opt(cvt, gc, hermes_get_DeclareOpaqueType_impltype(n));
          let supertype = cvt_node_ptr_opt(cvt, gc, hermes_get_DeclareOpaqueType_supertype(n));
          let mut template = ast::DeclareOpaqueTypeTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  id,
                  type_parameters,
                  impltype,
                  supertype,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::DeclareOpaqueTypeBuilder::build_template(gc, template)
        }
        NodeKind::DeclareInterface => {
          let id = cvt_node_ptr(cvt, gc, hermes_get_DeclareInterface_id(n));
          let type_parameters = cvt_node_ptr_opt(cvt, gc, hermes_get_DeclareInterface_typeParameters(n));
          let extends = cvt_node_list(cvt, gc, hermes_get_DeclareInterface_extends(n));
          let body = cvt_node_ptr(cvt, gc, hermes_get_DeclareInterface_body(n));
          let mut template = ast::DeclareInterfaceTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  id,
                  type_parameters,
                  extends,
                  body,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::DeclareInterfaceBuilder::build_template(gc, template)
        }
        NodeKind::DeclareClass => {
          let id = cvt_node_ptr(cvt, gc, hermes_get_DeclareClass_id(n));
          let type_parameters = cvt_node_ptr_opt(cvt, gc, hermes_get_DeclareClass_typeParameters(n));
          let extends = cvt_node_list(cvt, gc, hermes_get_DeclareClass_extends(n));
          let implements = cvt_node_list(cvt, gc, hermes_get_DeclareClass_implements(n));
          let mixins = cvt_node_list(cvt, gc, hermes_get_DeclareClass_mixins(n));
          let body = cvt_node_ptr(cvt, gc, hermes_get_DeclareClass_body(n));
          let mut template = ast::DeclareClassTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  id,
                  type_parameters,
                  extends,
                  implements,
                  mixins,
                  body,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::DeclareClassBuilder::build_template(gc, template)
        }
        NodeKind::DeclareFunction => {
          let id = cvt_node_ptr(cvt, gc, hermes_get_DeclareFunction_id(n));
          let predicate = cvt_node_ptr_opt(cvt, gc, hermes_get_DeclareFunction_predicate(n));
          let mut template = ast::DeclareFunctionTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  id,
                  predicate,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::DeclareFunctionBuilder::build_template(gc, template)
        }
        NodeKind::DeclareVariable => {
          let id = cvt_node_ptr(cvt, gc, hermes_get_DeclareVariable_id(n));
          let mut template = ast::DeclareVariableTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  id,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::DeclareVariableBuilder::build_template(gc, template)
        }
        NodeKind::DeclareExportDeclaration => {
          let declaration = cvt_node_ptr_opt(cvt, gc, hermes_get_DeclareExportDeclaration_declaration(n));
          let specifiers = cvt_node_list(cvt, gc, hermes_get_DeclareExportDeclaration_specifiers(n));
          let source = cvt_node_ptr_opt(cvt, gc, hermes_get_DeclareExportDeclaration_source(n));
          let default = hermes_get_DeclareExportDeclaration_default(n);
          let mut template = ast::DeclareExportDeclarationTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  declaration,
                  specifiers,
                  source,
                  default,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::DeclareExportDeclarationBuilder::build_template(gc, template)
        }
        NodeKind::DeclareExportAllDeclaration => {
          let source = cvt_node_ptr(cvt, gc, hermes_get_DeclareExportAllDeclaration_source(n));
          let mut template = ast::DeclareExportAllDeclarationTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  source,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::DeclareExportAllDeclarationBuilder::build_template(gc, template)
        }
        NodeKind::DeclareModule => {
          let id = cvt_node_ptr(cvt, gc, hermes_get_DeclareModule_id(n));
          let body = cvt_node_ptr(cvt, gc, hermes_get_DeclareModule_body(n));
          let kind = cvt.cvt_label(gc, hermes_get_DeclareModule_kind(n));
          let mut template = ast::DeclareModuleTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  id,
                  body,
                  kind,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::DeclareModuleBuilder::build_template(gc, template)
        }
        NodeKind::DeclareModuleExports => {
          let type_annotation = cvt_node_ptr(cvt, gc, hermes_get_DeclareModuleExports_typeAnnotation(n));
          let mut template = ast::DeclareModuleExportsTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  type_annotation,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::DeclareModuleExportsBuilder::build_template(gc, template)
        }
        NodeKind::InterfaceExtends => {
          let id = cvt_node_ptr(cvt, gc, hermes_get_InterfaceExtends_id(n));
          let type_parameters = cvt_node_ptr_opt(cvt, gc, hermes_get_InterfaceExtends_typeParameters(n));
          let mut template = ast::InterfaceExtendsTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  id,
                  type_parameters,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::InterfaceExtendsBuilder::build_template(gc, template)
        }
        NodeKind::ClassImplements => {
          let id = cvt_node_ptr(cvt, gc, hermes_get_ClassImplements_id(n));
          let type_parameters = cvt_node_ptr_opt(cvt, gc, hermes_get_ClassImplements_typeParameters(n));
          let mut template = ast::ClassImplementsTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  id,
                  type_parameters,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::ClassImplementsBuilder::build_template(gc, template)
        }
        NodeKind::TypeAnnotation => {
          let type_annotation = cvt_node_ptr(cvt, gc, hermes_get_TypeAnnotation_typeAnnotation(n));
          let mut template = ast::TypeAnnotationTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  type_annotation,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::TypeAnnotationBuilder::build_template(gc, template)
        }
        NodeKind::ObjectTypeAnnotation => {
          let properties = cvt_node_list(cvt, gc, hermes_get_ObjectTypeAnnotation_properties(n));
          let indexers = cvt_node_list(cvt, gc, hermes_get_ObjectTypeAnnotation_indexers(n));
          let call_properties = cvt_node_list(cvt, gc, hermes_get_ObjectTypeAnnotation_callProperties(n));
          let internal_slots = cvt_node_list(cvt, gc, hermes_get_ObjectTypeAnnotation_internalSlots(n));
          let inexact = hermes_get_ObjectTypeAnnotation_inexact(n);
          let exact = hermes_get_ObjectTypeAnnotation_exact(n);
          let mut template = ast::ObjectTypeAnnotationTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  properties,
                  indexers,
                  call_properties,
                  internal_slots,
                  inexact,
                  exact,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::ObjectTypeAnnotationBuilder::build_template(gc, template)
        }
        NodeKind::ObjectTypeProperty => {
          let key = cvt_node_ptr(cvt, gc, hermes_get_ObjectTypeProperty_key(n));
          let value = cvt_node_ptr(cvt, gc, hermes_get_ObjectTypeProperty_value(n));
          let method = hermes_get_ObjectTypeProperty_method(n);
          let optional = hermes_get_ObjectTypeProperty_optional(n);
          let is_static = hermes_get_ObjectTypeProperty_static(n);
          let proto = hermes_get_ObjectTypeProperty_proto(n);
          let variance = cvt_node_ptr_opt(cvt, gc, hermes_get_ObjectTypeProperty_variance(n));
          let kind = cvt.cvt_label(gc, hermes_get_ObjectTypeProperty_kind(n));
          let mut template = ast::ObjectTypePropertyTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  key,
                  value,
                  method,
                  optional,
                  is_static,
                  proto,
                  variance,
                  kind,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::ObjectTypePropertyBuilder::build_template(gc, template)
        }
        NodeKind::ObjectTypeSpreadProperty => {
          let argument = cvt_node_ptr(cvt, gc, hermes_get_ObjectTypeSpreadProperty_argument(n));
          let mut template = ast::ObjectTypeSpreadPropertyTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  argument,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::ObjectTypeSpreadPropertyBuilder::build_template(gc, template)
        }
        NodeKind::ObjectTypeInternalSlot => {
          let id = cvt_node_ptr(cvt, gc, hermes_get_ObjectTypeInternalSlot_id(n));
          let value = cvt_node_ptr(cvt, gc, hermes_get_ObjectTypeInternalSlot_value(n));
          let optional = hermes_get_ObjectTypeInternalSlot_optional(n);
          let is_static = hermes_get_ObjectTypeInternalSlot_static(n);
          let method = hermes_get_ObjectTypeInternalSlot_method(n);
          let mut template = ast::ObjectTypeInternalSlotTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  id,
                  value,
                  optional,
                  is_static,
                  method,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::ObjectTypeInternalSlotBuilder::build_template(gc, template)
        }
        NodeKind::ObjectTypeCallProperty => {
          let value = cvt_node_ptr(cvt, gc, hermes_get_ObjectTypeCallProperty_value(n));
          let is_static = hermes_get_ObjectTypeCallProperty_static(n);
          let mut template = ast::ObjectTypeCallPropertyTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  value,
                  is_static,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::ObjectTypeCallPropertyBuilder::build_template(gc, template)
        }
        NodeKind::ObjectTypeIndexer => {
          let id = cvt_node_ptr_opt(cvt, gc, hermes_get_ObjectTypeIndexer_id(n));
          let key = cvt_node_ptr(cvt, gc, hermes_get_ObjectTypeIndexer_key(n));
          let value = cvt_node_ptr(cvt, gc, hermes_get_ObjectTypeIndexer_value(n));
          let is_static = hermes_get_ObjectTypeIndexer_static(n);
          let variance = cvt_node_ptr_opt(cvt, gc, hermes_get_ObjectTypeIndexer_variance(n));
          let mut template = ast::ObjectTypeIndexerTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  id,
                  key,
                  value,
                  is_static,
                  variance,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::ObjectTypeIndexerBuilder::build_template(gc, template)
        }
        NodeKind::Variance => {
          let kind = cvt.cvt_label(gc, hermes_get_Variance_kind(n));
          let mut template = ast::VarianceTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  kind,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::VarianceBuilder::build_template(gc, template)
        }
        NodeKind::TypeParameterDeclaration => {
          let params = cvt_node_list(cvt, gc, hermes_get_TypeParameterDeclaration_params(n));
          let mut template = ast::TypeParameterDeclarationTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  params,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::TypeParameterDeclarationBuilder::build_template(gc, template)
        }
        NodeKind::TypeParameter => {
          let name = cvt.cvt_label(gc, hermes_get_TypeParameter_name(n));
          let bound = cvt_node_ptr_opt(cvt, gc, hermes_get_TypeParameter_bound(n));
          let variance = cvt_node_ptr_opt(cvt, gc, hermes_get_TypeParameter_variance(n));
          let default = cvt_node_ptr_opt(cvt, gc, hermes_get_TypeParameter_default(n));
          let mut template = ast::TypeParameterTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  name,
                  bound,
                  variance,
                  default,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::TypeParameterBuilder::build_template(gc, template)
        }
        NodeKind::TypeParameterInstantiation => {
          let params = cvt_node_list(cvt, gc, hermes_get_TypeParameterInstantiation_params(n));
          let mut template = ast::TypeParameterInstantiationTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  params,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::TypeParameterInstantiationBuilder::build_template(gc, template)
        }
        NodeKind::TypeCastExpression => {
          let expression = cvt_node_ptr(cvt, gc, hermes_get_TypeCastExpression_expression(n));
          let type_annotation = cvt_node_ptr(cvt, gc, hermes_get_TypeCastExpression_typeAnnotation(n));
          let mut template = ast::TypeCastExpressionTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  expression,
                  type_annotation,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::TypeCastExpressionBuilder::build_template(gc, template)
        }
        NodeKind::InferredPredicate => {
          let mut template = ast::InferredPredicateTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::InferredPredicateBuilder::build_template(gc, template)
        }
        NodeKind::DeclaredPredicate => {
          let value = cvt_node_ptr(cvt, gc, hermes_get_DeclaredPredicate_value(n));
          let mut template = ast::DeclaredPredicateTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  value,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::DeclaredPredicateBuilder::build_template(gc, template)
        }
        NodeKind::EnumDeclaration => {
          let id = cvt_node_ptr(cvt, gc, hermes_get_EnumDeclaration_id(n));
          let body = cvt_node_ptr(cvt, gc, hermes_get_EnumDeclaration_body(n));
          let mut template = ast::EnumDeclarationTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  id,
                  body,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::EnumDeclarationBuilder::build_template(gc, template)
        }
        NodeKind::EnumStringBody => {
          let members = cvt_node_list(cvt, gc, hermes_get_EnumStringBody_members(n));
          let explicit_type = hermes_get_EnumStringBody_explicitType(n);
          let has_unknown_members = hermes_get_EnumStringBody_hasUnknownMembers(n);
          let mut template = ast::EnumStringBodyTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  members,
                  explicit_type,
                  has_unknown_members,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::EnumStringBodyBuilder::build_template(gc, template)
        }
        NodeKind::EnumNumberBody => {
          let members = cvt_node_list(cvt, gc, hermes_get_EnumNumberBody_members(n));
          let explicit_type = hermes_get_EnumNumberBody_explicitType(n);
          let has_unknown_members = hermes_get_EnumNumberBody_hasUnknownMembers(n);
          let mut template = ast::EnumNumberBodyTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  members,
                  explicit_type,
                  has_unknown_members,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::EnumNumberBodyBuilder::build_template(gc, template)
        }
        NodeKind::EnumBooleanBody => {
          let members = cvt_node_list(cvt, gc, hermes_get_EnumBooleanBody_members(n));
          let explicit_type = hermes_get_EnumBooleanBody_explicitType(n);
          let has_unknown_members = hermes_get_EnumBooleanBody_hasUnknownMembers(n);
          let mut template = ast::EnumBooleanBodyTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  members,
                  explicit_type,
                  has_unknown_members,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::EnumBooleanBodyBuilder::build_template(gc, template)
        }
        NodeKind::EnumSymbolBody => {
          let members = cvt_node_list(cvt, gc, hermes_get_EnumSymbolBody_members(n));
          let has_unknown_members = hermes_get_EnumSymbolBody_hasUnknownMembers(n);
          let mut template = ast::EnumSymbolBodyTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  members,
                  has_unknown_members,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::EnumSymbolBodyBuilder::build_template(gc, template)
        }
        NodeKind::EnumDefaultedMember => {
          let id = cvt_node_ptr(cvt, gc, hermes_get_EnumDefaultedMember_id(n));
          let mut template = ast::EnumDefaultedMemberTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  id,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::EnumDefaultedMemberBuilder::build_template(gc, template)
        }
        NodeKind::EnumStringMember => {
          let id = cvt_node_ptr(cvt, gc, hermes_get_EnumStringMember_id(n));
          let init = cvt_node_ptr(cvt, gc, hermes_get_EnumStringMember_init(n));
          let mut template = ast::EnumStringMemberTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  id,
                  init,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::EnumStringMemberBuilder::build_template(gc, template)
        }
        NodeKind::EnumNumberMember => {
          let id = cvt_node_ptr(cvt, gc, hermes_get_EnumNumberMember_id(n));
          let init = cvt_node_ptr(cvt, gc, hermes_get_EnumNumberMember_init(n));
          let mut template = ast::EnumNumberMemberTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  id,
                  init,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::EnumNumberMemberBuilder::build_template(gc, template)
        }
        NodeKind::EnumBooleanMember => {
          let id = cvt_node_ptr(cvt, gc, hermes_get_EnumBooleanMember_id(n));
          let init = cvt_node_ptr(cvt, gc, hermes_get_EnumBooleanMember_init(n));
          let mut template = ast::EnumBooleanMemberTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  id,
                  init,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::EnumBooleanMemberBuilder::build_template(gc, template)
        }
        NodeKind::TSTypeAnnotation => {
          let type_annotation = cvt_node_ptr(cvt, gc, hermes_get_TSTypeAnnotation_typeAnnotation(n));
          let mut template = ast::TSTypeAnnotationTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  type_annotation,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::TSTypeAnnotationBuilder::build_template(gc, template)
        }
        NodeKind::TSAnyKeyword => {
          let mut template = ast::TSAnyKeywordTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::TSAnyKeywordBuilder::build_template(gc, template)
        }
        NodeKind::TSNumberKeyword => {
          let mut template = ast::TSNumberKeywordTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::TSNumberKeywordBuilder::build_template(gc, template)
        }
        NodeKind::TSBooleanKeyword => {
          let mut template = ast::TSBooleanKeywordTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::TSBooleanKeywordBuilder::build_template(gc, template)
        }
        NodeKind::TSStringKeyword => {
          let mut template = ast::TSStringKeywordTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::TSStringKeywordBuilder::build_template(gc, template)
        }
        NodeKind::TSSymbolKeyword => {
          let mut template = ast::TSSymbolKeywordTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::TSSymbolKeywordBuilder::build_template(gc, template)
        }
        NodeKind::TSVoidKeyword => {
          let mut template = ast::TSVoidKeywordTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::TSVoidKeywordBuilder::build_template(gc, template)
        }
        NodeKind::TSThisType => {
          let mut template = ast::TSThisTypeTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::TSThisTypeBuilder::build_template(gc, template)
        }
        NodeKind::TSLiteralType => {
          let literal = cvt_node_ptr(cvt, gc, hermes_get_TSLiteralType_literal(n));
          let mut template = ast::TSLiteralTypeTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  literal,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::TSLiteralTypeBuilder::build_template(gc, template)
        }
        NodeKind::TSIndexedAccessType => {
          let object_type = cvt_node_ptr(cvt, gc, hermes_get_TSIndexedAccessType_objectType(n));
          let index_type = cvt_node_ptr(cvt, gc, hermes_get_TSIndexedAccessType_indexType(n));
          let mut template = ast::TSIndexedAccessTypeTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  object_type,
                  index_type,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::TSIndexedAccessTypeBuilder::build_template(gc, template)
        }
        NodeKind::TSArrayType => {
          let element_type = cvt_node_ptr(cvt, gc, hermes_get_TSArrayType_elementType(n));
          let mut template = ast::TSArrayTypeTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  element_type,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::TSArrayTypeBuilder::build_template(gc, template)
        }
        NodeKind::TSTypeReference => {
          let type_name = cvt_node_ptr(cvt, gc, hermes_get_TSTypeReference_typeName(n));
          let type_parameters = cvt_node_ptr_opt(cvt, gc, hermes_get_TSTypeReference_typeParameters(n));
          let mut template = ast::TSTypeReferenceTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  type_name,
                  type_parameters,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::TSTypeReferenceBuilder::build_template(gc, template)
        }
        NodeKind::TSQualifiedName => {
          let left = cvt_node_ptr(cvt, gc, hermes_get_TSQualifiedName_left(n));
          let right = cvt_node_ptr_opt(cvt, gc, hermes_get_TSQualifiedName_right(n));
          let mut template = ast::TSQualifiedNameTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  left,
                  right,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::TSQualifiedNameBuilder::build_template(gc, template)
        }
        NodeKind::TSFunctionType => {
          let params = cvt_node_list(cvt, gc, hermes_get_TSFunctionType_params(n));
          let return_type = cvt_node_ptr(cvt, gc, hermes_get_TSFunctionType_returnType(n));
          let type_parameters = cvt_node_ptr_opt(cvt, gc, hermes_get_TSFunctionType_typeParameters(n));
          let mut template = ast::TSFunctionTypeTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  params,
                  return_type,
                  type_parameters,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::TSFunctionTypeBuilder::build_template(gc, template)
        }
        NodeKind::TSConstructorType => {
          let params = cvt_node_list(cvt, gc, hermes_get_TSConstructorType_params(n));
          let return_type = cvt_node_ptr(cvt, gc, hermes_get_TSConstructorType_returnType(n));
          let type_parameters = cvt_node_ptr_opt(cvt, gc, hermes_get_TSConstructorType_typeParameters(n));
          let mut template = ast::TSConstructorTypeTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  params,
                  return_type,
                  type_parameters,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::TSConstructorTypeBuilder::build_template(gc, template)
        }
        NodeKind::TSTypePredicate => {
          let parameter_name = cvt_node_ptr(cvt, gc, hermes_get_TSTypePredicate_parameterName(n));
          let type_annotation = cvt_node_ptr(cvt, gc, hermes_get_TSTypePredicate_typeAnnotation(n));
          let mut template = ast::TSTypePredicateTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  parameter_name,
                  type_annotation,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::TSTypePredicateBuilder::build_template(gc, template)
        }
        NodeKind::TSTupleType => {
          let element_types = cvt_node_list(cvt, gc, hermes_get_TSTupleType_elementTypes(n));
          let mut template = ast::TSTupleTypeTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  element_types,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::TSTupleTypeBuilder::build_template(gc, template)
        }
        NodeKind::TSTypeAssertion => {
          let type_annotation = cvt_node_ptr(cvt, gc, hermes_get_TSTypeAssertion_typeAnnotation(n));
          let expression = cvt_node_ptr(cvt, gc, hermes_get_TSTypeAssertion_expression(n));
          let mut template = ast::TSTypeAssertionTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  type_annotation,
                  expression,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::TSTypeAssertionBuilder::build_template(gc, template)
        }
        NodeKind::TSAsExpression => {
          let expression = cvt_node_ptr(cvt, gc, hermes_get_TSAsExpression_expression(n));
          let type_annotation = cvt_node_ptr(cvt, gc, hermes_get_TSAsExpression_typeAnnotation(n));
          let mut template = ast::TSAsExpressionTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  expression,
                  type_annotation,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::TSAsExpressionBuilder::build_template(gc, template)
        }
        NodeKind::TSParameterProperty => {
          let parameter = cvt_node_ptr(cvt, gc, hermes_get_TSParameterProperty_parameter(n));
          let accessibility = cvt.cvt_label_opt(gc, hermes_get_TSParameterProperty_accessibility(n));
          let readonly = hermes_get_TSParameterProperty_readonly(n);
          let is_static = hermes_get_TSParameterProperty_static(n);
          let export = hermes_get_TSParameterProperty_export(n);
          let mut template = ast::TSParameterPropertyTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  parameter,
                  accessibility,
                  readonly,
                  is_static,
                  export,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::TSParameterPropertyBuilder::build_template(gc, template)
        }
        NodeKind::TSTypeAliasDeclaration => {
          let id = cvt_node_ptr(cvt, gc, hermes_get_TSTypeAliasDeclaration_id(n));
          let type_parameters = cvt_node_ptr_opt(cvt, gc, hermes_get_TSTypeAliasDeclaration_typeParameters(n));
          let type_annotation = cvt_node_ptr(cvt, gc, hermes_get_TSTypeAliasDeclaration_typeAnnotation(n));
          let mut template = ast::TSTypeAliasDeclarationTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  id,
                  type_parameters,
                  type_annotation,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::TSTypeAliasDeclarationBuilder::build_template(gc, template)
        }
        NodeKind::TSInterfaceDeclaration => {
          let id = cvt_node_ptr(cvt, gc, hermes_get_TSInterfaceDeclaration_id(n));
          let body = cvt_node_ptr(cvt, gc, hermes_get_TSInterfaceDeclaration_body(n));
          let extends = cvt_node_list(cvt, gc, hermes_get_TSInterfaceDeclaration_extends(n));
          let type_parameters = cvt_node_ptr_opt(cvt, gc, hermes_get_TSInterfaceDeclaration_typeParameters(n));
          let mut template = ast::TSInterfaceDeclarationTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  id,
                  body,
                  extends,
                  type_parameters,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::TSInterfaceDeclarationBuilder::build_template(gc, template)
        }
        NodeKind::TSInterfaceHeritage => {
          let expression = cvt_node_ptr(cvt, gc, hermes_get_TSInterfaceHeritage_expression(n));
          let type_parameters = cvt_node_ptr_opt(cvt, gc, hermes_get_TSInterfaceHeritage_typeParameters(n));
          let mut template = ast::TSInterfaceHeritageTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  expression,
                  type_parameters,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::TSInterfaceHeritageBuilder::build_template(gc, template)
        }
        NodeKind::TSInterfaceBody => {
          let body = cvt_node_list(cvt, gc, hermes_get_TSInterfaceBody_body(n));
          let mut template = ast::TSInterfaceBodyTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  body,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::TSInterfaceBodyBuilder::build_template(gc, template)
        }
        NodeKind::TSEnumDeclaration => {
          let id = cvt_node_ptr(cvt, gc, hermes_get_TSEnumDeclaration_id(n));
          let members = cvt_node_list(cvt, gc, hermes_get_TSEnumDeclaration_members(n));
          let mut template = ast::TSEnumDeclarationTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  id,
                  members,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::TSEnumDeclarationBuilder::build_template(gc, template)
        }
        NodeKind::TSEnumMember => {
          let id = cvt_node_ptr(cvt, gc, hermes_get_TSEnumMember_id(n));
          let initializer = cvt_node_ptr_opt(cvt, gc, hermes_get_TSEnumMember_initializer(n));
          let mut template = ast::TSEnumMemberTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  id,
                  initializer,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::TSEnumMemberBuilder::build_template(gc, template)
        }
        NodeKind::TSModuleDeclaration => {
          let id = cvt_node_ptr(cvt, gc, hermes_get_TSModuleDeclaration_id(n));
          let body = cvt_node_ptr(cvt, gc, hermes_get_TSModuleDeclaration_body(n));
          let mut template = ast::TSModuleDeclarationTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  id,
                  body,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::TSModuleDeclarationBuilder::build_template(gc, template)
        }
        NodeKind::TSModuleBlock => {
          let body = cvt_node_list(cvt, gc, hermes_get_TSModuleBlock_body(n));
          let mut template = ast::TSModuleBlockTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  body,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::TSModuleBlockBuilder::build_template(gc, template)
        }
        NodeKind::TSModuleMember => {
          let id = cvt_node_ptr(cvt, gc, hermes_get_TSModuleMember_id(n));
          let initializer = cvt_node_ptr_opt(cvt, gc, hermes_get_TSModuleMember_initializer(n));
          let mut template = ast::TSModuleMemberTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  id,
                  initializer,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::TSModuleMemberBuilder::build_template(gc, template)
        }
        NodeKind::TSTypeParameterDeclaration => {
          let params = cvt_node_list(cvt, gc, hermes_get_TSTypeParameterDeclaration_params(n));
          let mut template = ast::TSTypeParameterDeclarationTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  params,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::TSTypeParameterDeclarationBuilder::build_template(gc, template)
        }
        NodeKind::TSTypeParameter => {
          let name = cvt_node_ptr(cvt, gc, hermes_get_TSTypeParameter_name(n));
          let constraint = cvt_node_ptr_opt(cvt, gc, hermes_get_TSTypeParameter_constraint(n));
          let default = cvt_node_ptr_opt(cvt, gc, hermes_get_TSTypeParameter_default(n));
          let mut template = ast::TSTypeParameterTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  name,
                  constraint,
                  default,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::TSTypeParameterBuilder::build_template(gc, template)
        }
        NodeKind::TSTypeParameterInstantiation => {
          let params = cvt_node_list(cvt, gc, hermes_get_TSTypeParameterInstantiation_params(n));
          let mut template = ast::TSTypeParameterInstantiationTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  params,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::TSTypeParameterInstantiationBuilder::build_template(gc, template)
        }
        NodeKind::TSUnionType => {
          let types = cvt_node_list(cvt, gc, hermes_get_TSUnionType_types(n));
          let mut template = ast::TSUnionTypeTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  types,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::TSUnionTypeBuilder::build_template(gc, template)
        }
        NodeKind::TSIntersectionType => {
          let types = cvt_node_list(cvt, gc, hermes_get_TSIntersectionType_types(n));
          let mut template = ast::TSIntersectionTypeTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  types,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::TSIntersectionTypeBuilder::build_template(gc, template)
        }
        NodeKind::TSTypeQuery => {
          let expr_name = cvt_node_ptr(cvt, gc, hermes_get_TSTypeQuery_exprName(n));
          let mut template = ast::TSTypeQueryTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  expr_name,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::TSTypeQueryBuilder::build_template(gc, template)
        }
        NodeKind::TSConditionalType => {
          let extends_type = cvt_node_ptr(cvt, gc, hermes_get_TSConditionalType_extendsType(n));
          let check_type = cvt_node_ptr(cvt, gc, hermes_get_TSConditionalType_checkType(n));
          let true_type = cvt_node_ptr(cvt, gc, hermes_get_TSConditionalType_trueType(n));
          let false_t_ype = cvt_node_ptr(cvt, gc, hermes_get_TSConditionalType_falseTYpe(n));
          let mut template = ast::TSConditionalTypeTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  extends_type,
                  check_type,
                  true_type,
                  false_t_ype,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::TSConditionalTypeBuilder::build_template(gc, template)
        }
        NodeKind::TSTypeLiteral => {
          let members = cvt_node_list(cvt, gc, hermes_get_TSTypeLiteral_members(n));
          let mut template = ast::TSTypeLiteralTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  members,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::TSTypeLiteralBuilder::build_template(gc, template)
        }
        NodeKind::TSPropertySignature => {
          let key = cvt_node_ptr(cvt, gc, hermes_get_TSPropertySignature_key(n));
          let type_annotation = cvt_node_ptr_opt(cvt, gc, hermes_get_TSPropertySignature_typeAnnotation(n));
          let initializer = cvt_node_ptr_opt(cvt, gc, hermes_get_TSPropertySignature_initializer(n));
          let optional = hermes_get_TSPropertySignature_optional(n);
          let computed = hermes_get_TSPropertySignature_computed(n);
          let readonly = hermes_get_TSPropertySignature_readonly(n);
          let is_static = hermes_get_TSPropertySignature_static(n);
          let export = hermes_get_TSPropertySignature_export(n);
          let mut template = ast::TSPropertySignatureTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  key,
                  type_annotation,
                  initializer,
                  optional,
                  computed,
                  readonly,
                  is_static,
                  export,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::TSPropertySignatureBuilder::build_template(gc, template)
        }
        NodeKind::TSMethodSignature => {
          let key = cvt_node_ptr(cvt, gc, hermes_get_TSMethodSignature_key(n));
          let params = cvt_node_list(cvt, gc, hermes_get_TSMethodSignature_params(n));
          let return_type = cvt_node_ptr_opt(cvt, gc, hermes_get_TSMethodSignature_returnType(n));
          let computed = hermes_get_TSMethodSignature_computed(n);
          let mut template = ast::TSMethodSignatureTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  key,
                  params,
                  return_type,
                  computed,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::TSMethodSignatureBuilder::build_template(gc, template)
        }
        NodeKind::TSIndexSignature => {
          let parameters = cvt_node_list(cvt, gc, hermes_get_TSIndexSignature_parameters(n));
          let type_annotation = cvt_node_ptr_opt(cvt, gc, hermes_get_TSIndexSignature_typeAnnotation(n));
          let mut template = ast::TSIndexSignatureTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  parameters,
                  type_annotation,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::TSIndexSignatureBuilder::build_template(gc, template)
        }
        NodeKind::TSCallSignatureDeclaration => {
          let params = cvt_node_list(cvt, gc, hermes_get_TSCallSignatureDeclaration_params(n));
          let return_type = cvt_node_ptr_opt(cvt, gc, hermes_get_TSCallSignatureDeclaration_returnType(n));
          let mut template = ast::TSCallSignatureDeclarationTemplate {
              metadata: ast::TemplateMetadata {range, ..Default::default()},
                  params,
                  return_type,
          };
          template.metadata.range.end = cvt.cvt_smloc(nr.source_range.end.pred());
          ast::TSCallSignatureDeclarationBuilder::build_template(gc, template)
        }
        _ => panic!("Invalid node kind")
    };

    res
}
