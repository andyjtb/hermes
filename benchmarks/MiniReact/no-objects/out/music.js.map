{"version":3,"names":["react_invariant$default","condition","format","Error","sh_CHECKED_CAST$default","value","T","sh_microtask$INTERNAL$microtaskQueue","sh_microtask$drainMicrotaskQueue","i","length","undefined","sh_microtask$queueMicrotask","callback","push","sh_fastarray$fastArrayJoin","arr","sep","result","e","react_index$INTERNAL$padString","str","len","react_index$INTERNAL$React$ElementType","react_index$INTERNAL$Component","react_index$INTERNAL$React$Element","type","ElementType","props","react_index$Props","key","react_index$INTERNAL$React$Key","ref","constructor","react_index$React$MixedElement","react_index$INTERNAL$React$NodeWithoutArray","react_index$React$Node","react_index$INTERNAL$REACT_FRAGMENT_TYPE","react_index$INTERNAL$workInProgressRoot","react_index$INTERNAL$Root","react_index$INTERNAL$workInProgressFiber","react_index$INTERNAL$Fiber","react_index$INTERNAL$workInProgressState","react_index$INTERNAL$State","react_index$INTERNAL$renderPhaseUpdateQueue","react_index$INTERNAL$Update","react_index$createRoot","react_index$useState","initial","prev","root","fiber","state","_workInProgressState","nextState","next","updater","update","notify","react_index$INTERNAL$callbacks","Map","react_index$callOnClickOrChange","id","event","get","run","fn","changed","Object","is","element","updateQueue","doWork","render","hasChanges","output","printFiber","mustRender","mountFiber","fiber2","renderFiber","child","sibling","parent","out","level","kind","tag","react_index$INTERNAL$FiberTypeHost","padStr","propName","propValue","entries","JSON","stringify","printChildren","text","react_index$INTERNAL$FiberTypeText","current","react_index$INTERNAL$FiberTypeComponent","component","iterationCount","reconcileFiber","onClick","set","onChange","elementOrString","react_index$INTERNAL$FiberType","children","mountChildren","react_index$INTERNAL$FiberTypeFragment","parentFiber","Array","isArray","childElement","prevChild","reconcileChildren","childrenArray","reconcileMultipleChildren","keyedChildren","prevByIndex","prevFiber","react_index$jsx","react_index$Fragment","react_index$forwardRef","comp","class_variance_authority_index$cva","base","variants","opts","baseString","utils$cn","rest","join","button$buttonVariants","variant","default","destructive","outline","secondary","ghost","link","size","sm","lg","icon","defaultVariants","button$Button","className","asChild","page$default","toggle","setToggle","String","index$INTERNAL$printIf1","print","index$INTERNAL$run","N","rootElement"],"sources":["../src/packages/react/invariant.js","../src/packages/sh/CHECKED_CAST.js","../src/packages/sh/microtask.js","../src/packages/sh/fastarray.js","../src/packages/react/index.js","../src/packages/class-variance-authority/index.js","../src/lib/utils.js","../src/registry/new-york/ui/button.js","../src/app/music/page.js","../src/app/music/index.js","/Users/pieterv/fbsource/xplat/static_h/benchmarks/MiniReact/no-objects/src/packages/react/invariant.js","/Users/pieterv/fbsource/xplat/static_h/benchmarks/MiniReact/no-objects/src/packages/sh/CHECKED_CAST.js","/Users/pieterv/fbsource/xplat/static_h/benchmarks/MiniReact/no-objects/src/packages/sh/microtask.js","/Users/pieterv/fbsource/xplat/static_h/benchmarks/MiniReact/no-objects/src/packages/sh/fastarray.js","/Users/pieterv/fbsource/xplat/static_h/benchmarks/MiniReact/no-objects/src/packages/react/index.js","/Users/pieterv/fbsource/xplat/static_h/benchmarks/MiniReact/no-objects/src/packages/class-variance-authority/index.js","/Users/pieterv/fbsource/xplat/static_h/benchmarks/MiniReact/no-objects/src/lib/utils.js","/Users/pieterv/fbsource/xplat/static_h/benchmarks/MiniReact/no-objects/src/registry/new-york/ui/button.js","/Users/pieterv/fbsource/xplat/static_h/benchmarks/MiniReact/no-objects/src/app/music/page.js","/Users/pieterv/fbsource/xplat/static_h/benchmarks/MiniReact/no-objects/src/app/music/index.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nexport default function invariant(condition: boolean, format: string): void {\n  'inline';\n\n  if (!condition) {\n    throw new Error(format);\n  }\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nexport default function CHECKED_CAST<T>(value: mixed): T {\n  'inline';\n  return (value: any);\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nlet microtaskQueue = [];\n\nexport function drainMicrotaskQueue(): void {\n  for (let i = 0; i < microtaskQueue.length; i++) {\n    microtaskQueue[i]();\n    microtaskQueue[i] = undefined;\n  }\n  microtaskQueue = [];\n}\n\nexport function queueMicrotask(callback: () => void): void {\n  microtaskQueue.push(callback);\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nexport function fastArrayJoin(arr: string[], sep: string): string {\n  let result: string = '';\n  for (let i: number = 0, e = arr.length; i < e; ++i) {\n    if (i !== 0) result += sep;\n    result += arr[i];\n  }\n  return result;\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport invariant from './invariant';\nimport CHECKED_CAST from 'sh/CHECKED_CAST';\nimport {queueMicrotask} from 'sh/microtask';\nimport {fastArrayJoin} from 'sh/fastarray';\n\nfunction padString(str: string, len: number): string {\n  let result: string = '';\n  for (let i: number = 0; i < len; i++) {\n    result += str;\n  }\n  return result;\n}\n\n/**\n * The type of an element in React. A React element may be a:\n *\n * - String. These elements are intrinsics that depend on the React renderer\n *   implementation.\n * - React component. See `ComponentType` for more information about its\n *   different variants.\n */\ntype React$ElementType =\n  | string\n  | Component /* TODO: React$AbstractComponent<empty, mixed> */\n  | number /* TODO: symbol */;\n\n/**\n * Type of a React element. React elements are commonly created using JSX\n * literals, which desugar to React.createElement calls (see below).\n */\n// type React$Element<ElementType: React$ElementType> = {|\n//   type: ElementType,\n//   props: Props,\n//   key: React$Key | null,\n//   ref: any,\n// |};\nclass React$Element<ElementType> {\n  type: ElementType;\n  props: Props;\n  key: React$Key | null;\n  ref: any;\n\n  constructor(\n    type: ElementType,\n    props: Props,\n    key: React$Key | null,\n    ref: any,\n  ) {\n    this.type = type;\n    this.props = props;\n    this.key = key;\n    this.ref = ref;\n  }\n}\n\nexport type React$MixedElement = React$Element<React$ElementType>;\ntype React$NodeWithoutArray = React$MixedElement | string | null | void;\nexport type React$Node = React$NodeWithoutArray[] | React$NodeWithoutArray;\n\n/**\n * The type of the key that React uses to determine where items in a new list\n * have moved.\n */\ntype React$Key = string | number;\n\nconst REACT_FRAGMENT_TYPE: number = 1 /* Symbol.for('react.fragment') */;\n\n/* eslint-disable lint/strictly-null, lint/react-state-props-mutation, lint/flow-react-element */\n\n/**\n * The current root\n */\nlet workInProgressRoot: Root | null = null;\n\n/**\n * The currently rendering fiber. Only set when a component is being rendered.\n */\nlet workInProgressFiber: Fiber | null = null;\n\n/**\n * The previous state hook, or null if no state hook has been evaluated yet.\n */\nlet workInProgressState: State<mixed> | null = null;\n\n/**\n * Queue of updates triggered *during* render.\n */\nconst renderPhaseUpdateQueue: Update<mixed>[] = [];\n\n/**\n * Public API to create a new \"root\", this is where React attaches rendering to a host element.\n * In our case we don't actually have a real host, and currently only \"render\" to strings.\n */\nexport function createRoot(): Root {\n  return new Root();\n}\n\n/**\n * Hook to create (on initial render) or access (on update) a state, using the index of the useState\n * call within the component as the identity. Thus conditionally calling this API can cause state to\n * be lost.\n */\nexport function useState<T>(\n  /**\n   * Initial value of the state\n   */\n  initial: T,\n): [T, (value: T | ((prev: T) => T)) => void] {\n  const root: Root = CHECKED_CAST<Root>(workInProgressRoot);\n  const fiber: Fiber = CHECKED_CAST<Fiber>(workInProgressFiber);\n  invariant(\n    fiber !== null && root !== null,\n    'useState() called outside of render',\n  );\n\n  let state: State<T>;\n  const _workInProgressState: State<mixed> | null = workInProgressState;\n  if (_workInProgressState === null) {\n    // Get or initialize the first state on the fiber\n    let nextState = fiber.state;\n    if (nextState === null) {\n      nextState = new State<mixed>(initial);\n      fiber.state = nextState;\n    }\n    // NOTE: in case of a re-render we assume that the hook types match but\n    // can't statically prove this\n    state = CHECKED_CAST<State<T>>(nextState);\n  } else {\n    let nextState = CHECKED_CAST<State<mixed>>(_workInProgressState).next;\n    if (nextState === null) {\n      nextState = new State<mixed>(initial);\n      CHECKED_CAST<State<mixed>>(_workInProgressState).next = nextState;\n    }\n    // NOTE: in case of a re-render we assume that the hook types match but\n    // can't statically prove this\n    state = CHECKED_CAST<State<T>>(nextState);\n  }\n  // NOTE: this should just work because of subtying, State<T> should be subtype of State<mixed>\n  workInProgressState = CHECKED_CAST<State<mixed>>(state);\n  return [\n    // Untyped check that the existing state value has the correct type,\n    // This is safe if components follow the rules of hooks\n    CHECKED_CAST<T>(state.value),\n    (updater: T | ((prev: T) => T)): void => {\n      const update = new Update<mixed>(\n        fiber,\n        CHECKED_CAST<State<mixed>>(state),\n        CHECKED_CAST<T | ((prev: T) => T)>(updater),\n      );\n      if (workInProgressFiber !== null) {\n        // called during render\n        renderPhaseUpdateQueue.push(update);\n      } else {\n        root.notify(update);\n      }\n    },\n  ];\n}\n\nconst callbacks = new Map();\nexport function callOnClickOrChange(id: string, event: any): void {\n  const callback = callbacks.get(id);\n  if (callback == null) {\n    throw new Error('No callback registered with id: ' + id);\n  }\n  callback(event);\n}\n\n/**\n * The type of value that may be passed to the setState function (second part of useState return value).\n * - T: the new value\n * - (prev: T) => T: a function to compute the new value from the old value\n */\n// type Updater<T> = T | ((prev: T) => T);\n\n/**\n * The type of the setState function (second element of the array returned by useState).\n */\n// type SetState<T> = (value: Updater<T>) => void;\n\n/**\n * A queued state update.\n */\nclass Update<T> {\n  fiber: Fiber; // used to check state updates that occur during render to see if they came from the current component.\n  state: State<T>;\n  updater: T | ((prev: T) => T); // Updater<T>;\n\n  constructor(fiber: Fiber, state: State<T>, updater: T | ((prev: T) => T)) {\n    this.fiber = fiber;\n    this.state = state;\n    this.updater = updater;\n  }\n\n  /**\n   * Process the state update\n   */\n  run(): boolean {\n    const state = this.state;\n    let value: T = state.value;\n    const updater = this.updater;\n    if (typeof updater === 'function') {\n      // NOTE: The type of Updater<T> is meant to expresss `T (not function) | T (function of T => T)`\n      // thus the fact that updater is a function here menas its a function of T => T.\n      const fn = CHECKED_CAST<(prev: T) => T>(updater);\n      value = fn(state.value);\n    } else {\n      // NOTE: The type of Updater<T> is meant to expresss `T (not function) | T (function of T => T)`\n      // thus the fact that updater is *not* a function here means it is a T\n      value = CHECKED_CAST<T>(updater);\n    }\n    const changed = !Object.is(state.value, value);\n    state.value = value;\n    return changed;\n  }\n}\n\nclass Root {\n  /**\n   * The fiber representing the root node (`element`), null until\n   * render is first called.\n   */\n  root: Fiber | null;\n\n  /**\n   * The last rendered root element, initially null.\n   */\n  element: React$MixedElement | null;\n\n  /**\n   * Queue of updates (state changes) to apply on the next render\n   */\n  updateQueue: Update<mixed>[];\n\n  constructor() {\n    this.root = null;\n    this.element = null;\n    this.updateQueue = ([]: Update<mixed>[]);\n  }\n\n  /**\n   * Notify the root that an update is scheduled\n   */\n  notify(update: Update<mixed>): void {\n    this.updateQueue.push(update);\n    if (this.updateQueue.length === 1) {\n      queueMicrotask((): void => {\n        const element = this.element;\n        invariant(\n          element !== null,\n          'Expected an element to be set after rendering',\n        );\n        this.doWork(CHECKED_CAST<React$MixedElement>(element));\n      });\n    }\n  }\n\n  /**\n   * Drive any remaining work to completion and return the rendered result\n   */\n  render(element: React$MixedElement): string {\n    invariant(\n      workInProgressFiber === null && workInProgressState === null,\n      'Cannot render, an existing render is in progress',\n    );\n    const hasChanges = element !== this.element;\n    this.element = element;\n    if (hasChanges) {\n      this.doWork(element);\n    }\n\n    invariant(this.root !== null, 'Expected root to be rendered');\n    const root: Fiber = CHECKED_CAST<Fiber>(this.root);\n    const output: string[] = [];\n    this.printFiber(root, output, 0);\n    return fastArrayJoin(output, '\\n');\n  }\n\n  doWork(element: React$MixedElement): void {\n    let mustRender = this.root === null;\n    for (const update of this.updateQueue) {\n      mustRender = update.run() || mustRender;\n    }\n    this.updateQueue = ([]: Update<mixed>[]);\n    if (!mustRender) {\n      return;\n    }\n\n    // Visit the tree in pre-order, rendering each node\n    // and then processing its children\n    // eslint-disable-next-line consistent-this\n    workInProgressRoot = this;\n    let fiber = this.root;\n    if (fiber === null) {\n      fiber = this.mountFiber(element, null);\n      this.root = fiber;\n    }\n    while (fiber !== null) {\n      // Render the fiber, which creates child/sibling nodes\n      let fiber2: Fiber = CHECKED_CAST<Fiber>(fiber);\n      this.renderFiber(fiber2);\n      // advance to the next fiber\n      if (fiber2.child !== null) {\n        fiber = fiber2.child;\n      } else if (fiber2.sibling !== null) {\n        fiber = fiber2.sibling;\n      } else {\n        fiber = fiber2.parent;\n        while (fiber !== null && CHECKED_CAST<Fiber>(fiber).sibling === null) {\n          fiber = CHECKED_CAST<Fiber>(fiber).parent;\n        }\n        if (fiber !== null) {\n          fiber = CHECKED_CAST<Fiber>(fiber).sibling;\n        }\n      }\n    }\n    workInProgressRoot = null;\n  }\n\n  /**\n   * Prints a representation of the output DOM as HTML, emitting HTML snippets to @param out.\n   */\n  printFiber(fiber: Fiber, out: string[], level: number): void {\n    switch (fiber.type.kind) {\n      case 'host': {\n        const tag = CHECKED_CAST<FiberTypeHost>(fiber.type).tag;\n        const padStr = padString(' ', level);\n        let str = padStr + '<' + tag;\n        for (const [propName, propValue] of Object.entries(fiber.props)) {\n          if (propValue == null || typeof propValue === 'function') {\n            continue;\n          }\n\n          str += ` ${propName}=${JSON.stringify(propValue) ?? 'undefined'}`;\n        }\n        if (fiber.child == null) {\n          str += ' />';\n          out.push(str);\n        } else {\n          str += '>';\n          out.push(str);\n          this.printChildren(fiber, out, level + 1);\n          out.push(padStr + '</' + tag + '>');\n        }\n        break;\n      }\n      case 'text': {\n        const text = CHECKED_CAST<FiberTypeText>(fiber.type).text;\n        if (text !== '') {\n          out.push(padString(' ', level) + text);\n        }\n        break;\n      }\n      case 'fragment':\n      case 'component': {\n        this.printChildren(fiber, out, level);\n        break;\n      }\n    }\n  }\n\n  printChildren(fiber: Fiber, out: string[], level: number): void {\n    let current: Fiber | null = fiber.child;\n    while (current !== null) {\n      this.printFiber(CHECKED_CAST<Fiber>(current), out, level);\n      current = CHECKED_CAST<Fiber>(current).sibling;\n    }\n  }\n\n  /**\n   * Renders and reconciles the output of the given @param fiber. Note that this does not *render*\n   * children, it only reconciles the current output of the fiber with the previous children.\n   */\n  renderFiber(fiber: Fiber): void {\n    try {\n      workInProgressFiber = fiber;\n      workInProgressState = null;\n      switch (fiber.type.kind) {\n        case 'component': {\n          invariant(\n            renderPhaseUpdateQueue.length === 0,\n            'Expected no queued render updates',\n          );\n          const render: (props: Props) => React$MixedElement =\n            CHECKED_CAST<FiberTypeComponent>(fiber.type).component;\n          let element = render(fiber.props);\n          let iterationCount: number = 0;\n          while (renderPhaseUpdateQueue.length !== 0) {\n            iterationCount++;\n            invariant(\n              iterationCount < 1000,\n              'Possible infinite loop with setState during render',\n            );\n            let hasChanges = false;\n            for (const update of renderPhaseUpdateQueue) {\n              invariant(\n                update.fiber === fiber,\n                'setState() during render is currently only supported when updating the component ' +\n                  'being rendered. Setting state from another component is not supported.',\n              );\n              hasChanges = update.run() || hasChanges;\n            }\n            renderPhaseUpdateQueue.length = 0;\n            if (!hasChanges) {\n              break;\n            }\n            element = render(fiber.props);\n          }\n          fiber.child = this.reconcileFiber(fiber, fiber.child, element);\n          break;\n        }\n        case 'host': {\n          const id = fiber.props.id;\n          if (id != null) {\n            const onClick = fiber.props.onClick;\n            if (onClick != null) {\n              callbacks.set(id, onClick);\n            }\n            const onChange = fiber.props.onChange;\n            if (onChange != null) {\n              callbacks.set(id, onChange);\n            }\n          }\n          break;\n        }\n        case 'fragment':\n        case 'text': {\n          // Nothing to reconcile, these nodes are visited by the main doWork() loop\n          break;\n        }\n        default: {\n          throw new Error('Unexpected fiber kind: ' + fiber.type.kind);\n        }\n      }\n    } finally {\n      workInProgressFiber = null;\n      workInProgressState = null;\n    }\n  }\n\n  /**\n   * Create a new fiber for the given element. Used when there is no fiber at\n   * a given tree position which can be reused.\n   */\n  mountFiber(elementOrString: React$Node, parent: Fiber | null): Fiber {\n    let fiber: Fiber;\n    // TODO: Support Array of Node's being returned from a component.\n    if (typeof elementOrString === 'object') {\n      const element = CHECKED_CAST<React$MixedElement>(elementOrString);\n      if (typeof element.type === 'function') {\n        const component: Component = CHECKED_CAST<Component>(element.type);\n        const type: FiberType = new FiberTypeComponent(component);\n        fiber = new Fiber(type, (element.props: any), element.key);\n      } else if (typeof element.type === 'string') {\n        invariant(\n          typeof element.type === 'string',\n          'Expected a host component name such as \"div\" or \"span\", got ' +\n            typeof element.type,\n        );\n        const type: FiberType = new FiberTypeHost(\n          CHECKED_CAST<string>(element.type),\n        );\n        invariant(\n          element.props !== null && typeof element.props === 'object',\n          'Expected component props',\n        );\n\n        // const {children, ...props} = element.props;\n        const children = element.props.children;\n        const props = {...element.props};\n        delete props.children;\n\n        fiber = new Fiber(type, props, element.key);\n        this.mountChildren(children, fiber);\n      } else {\n        switch (element.type) {\n          case REACT_FRAGMENT_TYPE: {\n            const type: FiberType = new FiberTypeFragment();\n            fiber = new Fiber(type, (element.props: any), element.key);\n            this.mountChildren(element.props.children, fiber);\n            break;\n          }\n          default: {\n            throw new Error(`Unknown element type ${element.type}`);\n          }\n        }\n      }\n    } else if (typeof elementOrString === 'string') {\n      const type = new FiberTypeText(CHECKED_CAST<string>(elementOrString));\n      fiber = new Fiber(type, {}, null);\n    } else {\n      throw new Error(`Unexpected element type of ${typeof elementOrString}`);\n    }\n    fiber.parent = parent;\n    return fiber;\n  }\n\n  mountChildren(children: React$Node, parentFiber: Fiber): void {\n    if (Array.isArray(children)) {\n      let prev: Fiber | null = null;\n      for (const childElement of CHECKED_CAST<any[]>(children)) {\n        if (childElement == null) {\n          continue;\n        }\n        const child = this.mountFiber(\n          CHECKED_CAST<React$Node>(childElement),\n          parentFiber,\n        );\n        if (prev !== null) {\n          CHECKED_CAST<Fiber>(prev).sibling = child;\n        } else {\n          // set parent to point to first child\n          parentFiber.child = child;\n        }\n        prev = child;\n      }\n    } else if (children != null) {\n      const child = this.mountFiber((children: any), parentFiber);\n      parentFiber.child = child;\n    }\n  }\n\n  /**\n   * Update's @param parent's child to reflect the latest desired output as described by @param element.\n   * This either reuses @param prevChild if present and the component type matches, otherwise it creates\n   * a new Fiber.\n   */\n  reconcileFiber(\n    parent: Fiber,\n    prevChild: Fiber | null,\n    element: React$MixedElement,\n  ): Fiber {\n    if (\n      prevChild !== null &&\n      CHECKED_CAST<Fiber>(prevChild).type === element.type\n    ) {\n      let prevChild: Fiber = CHECKED_CAST<Fiber>(prevChild);\n      // Only host and fragment nodes have to be reconciled: otherwise this is a\n      // function component and its children will be reconciled when they are later\n      // emitted in a host position (ie as a direct result of render)\n      switch (prevChild.type.kind) {\n        case 'host': {\n          invariant(\n            element.props !== null && typeof element.props === 'object',\n            'Expected component props',\n          );\n\n          // const {children, ...props} = element.props;\n          const children = element.props.children;\n          const props = {...element.props};\n          delete props.children;\n\n          prevChild.props = props;\n          this.reconcileChildren(prevChild, (children: any));\n          break;\n        }\n        case 'fragment': {\n          invariant(\n            element.props !== null && typeof element.props === 'object',\n            'Expected component props',\n          );\n\n          const children = element.props.children;\n          this.reconcileChildren(prevChild, (children: any));\n          break;\n        }\n        case 'component': {\n          invariant(\n            element.props !== null && typeof element.props === 'object',\n            'Expected component props',\n          );\n          prevChild.props = element.props;\n          break;\n        }\n        default: {\n          throw new Error(`Unknown node kind ${prevChild.type.kind}`);\n        }\n      }\n      return prevChild;\n    } else {\n      const child = this.mountFiber(element, parent);\n      return child;\n    }\n  }\n\n  /**\n   * Reconciles the @param parent fiber's children nodes.\n   */\n  reconcileChildren(parent: Fiber, children: React$Node): void {\n    const prevChild: Fiber | null = parent.child;\n    if (Array.isArray(children)) {\n      let childrenArray = CHECKED_CAST<React$MixedElement[]>(children);\n      // Fast-path for empty and single-element arrays\n      if (childrenArray.length === 0) {\n        parent.child = null;\n      } else if (childrenArray.length === 1) {\n        parent.child = this.reconcileFiber(parent, prevChild, childrenArray[0]);\n        CHECKED_CAST<Fiber>(parent.child).sibling = null;\n      } else {\n        this.reconcileMultipleChildren(parent, childrenArray);\n      }\n    } else if (typeof children === 'string') {\n      if (\n        prevChild === null ||\n        CHECKED_CAST<Fiber>(prevChild).type.kind !== 'text'\n      ) {\n        const child = new Fiber({kind: 'text', text: children}, {}, null);\n        parent.child = child;\n      } else {\n        CHECKED_CAST<FiberTypeText>(CHECKED_CAST<Fiber>(prevChild).type).text =\n          CHECKED_CAST<string>(children);\n      }\n    } else if (children != null) {\n      parent.child = this.reconcileFiber(\n        parent,\n        prevChild,\n        CHECKED_CAST<React$MixedElement>(children),\n      );\n      CHECKED_CAST<Fiber>(parent.child).sibling = null;\n    } else {\n      parent.child = null;\n      if (prevChild !== null) {\n        CHECKED_CAST<Fiber>(prevChild).parent = null;\n      }\n    }\n  }\n\n  /**\n   * Reconciles the @param parent fiber's children when the children are known to\n   * have 2+ items. Note that the algorithm works for 0+ elements but a fast-path\n   * should be used for 0/1 item cases.\n   */\n  reconcileMultipleChildren(\n    parent: Fiber,\n    children: React$MixedElement[],\n  ): void {\n    invariant(\n      children.length > 1,\n      'Expected children to have multiple elements',\n    );\n    // map existing children by key to make subsequent lookup O(log n)\n    const keyedChildren: any = new Map();\n    let current: Fiber | null = parent.child;\n    while (current !== null) {\n      if (CHECKED_CAST<Fiber>(current).key !== null) {\n        keyedChildren.set(CHECKED_CAST<Fiber>(current).key, current);\n      }\n      current = CHECKED_CAST<Fiber>(current).sibling;\n    }\n    let prev: Fiber | null = null; // previous fiber at this key/index\n    let prevByIndex: Fiber | null = parent.child; // keep track of prev fiber at this index\n    for (const childElement of children) {\n      const prevFiber =\n        (childElement.key != null\n          ? keyedChildren.get(childElement.key)\n          : null) ?? prevByIndex;\n      let child: Fiber;\n      if (prevFiber != null) {\n        child = this.reconcileFiber(parent, prevFiber, childElement);\n      } else {\n        child = this.mountFiber(childElement, parent);\n      }\n      if (prev !== null) {\n        CHECKED_CAST<Fiber>(prev).sibling = child;\n      } else {\n        // set parent to point to first child\n        parent.child = child;\n      }\n      prev = child;\n      prevByIndex =\n        prevByIndex !== null ? CHECKED_CAST<Fiber>(prevByIndex).sibling : null;\n    }\n  }\n}\n\n/**\n * Describes the `type` field of Fiber, which can hold different data depending on the fiber's kind:\n * - Component stores a function of props => element.\n * - Host stores the name of the host component, ie \"div\"\n * - Text stores the text itself.\n */\ntype Component = (props: Props) => React$MixedElement;\n\n// type FiberType =\n//   | {\n//       kind: 'component',\n//       component: Component,\n//     }\n//   | {\n//       kind: 'host',\n//       tag: string,\n//     }\n//   | {\n//       kind: 'text',\n//       text: string,\n//     };\n\nclass FiberType {\n  kind: string;\n  constructor(kind: string) {\n    this.kind = kind;\n  }\n}\n\nclass FiberTypeComponent extends FiberType {\n  component: Component;\n  constructor(component: Component) {\n    super('component');\n    this.component = component;\n  }\n}\nclass FiberTypeHost extends FiberType {\n  tag: string;\n  constructor(tag: string) {\n    super('host');\n    this.tag = tag;\n  }\n}\nclass FiberTypeFragment extends FiberType {\n  constructor() {\n    super('fragment');\n  }\n}\nclass FiberTypeText extends FiberType {\n  text: string;\n  constructor(text: string) {\n    super('text');\n    this.text = text;\n  }\n}\n\n/**\n * The type of component props as seen by the framework, because processing is heterogenous\n * the framework only looks at the identity of prop values and does not otherwise make any\n * assumptions about which props may exist and what their types are.\n */\nexport type Props = any;\n\n/**\n * Data storage for the useState() hook\n */\nclass State<T> {\n  value: T;\n  next: State<T> | null;\n  prev: State<T> | null;\n\n  constructor(value: T) {\n    this.value = value;\n\n    this.next = null;\n    this.prev = null;\n  }\n}\n\n/**\n * Represents a node in the UI tree, and may correspond to a user-defined function component,\n * a host node, or a text node.\n */\nclass Fiber {\n  type: FiberType;\n  props: Props;\n  parent: Fiber | null;\n  child: Fiber | null;\n  sibling: Fiber | null;\n  state: State<mixed> | null;\n  key: React$Key | null;\n\n  constructor(type: FiberType, props: Props, key: React$Key | null) {\n    this.type = type;\n    this.props = props;\n    this.key = key;\n\n    this.parent = null;\n    this.child = null;\n    this.sibling = null;\n    this.state = null;\n  }\n}\n\nexport function jsx(\n  type: React$ElementType,\n  props: Props,\n  key: React$Key | null,\n): React$MixedElement {\n  'inline';\n  return {\n    type: type,\n    props: props,\n    key: key,\n    ref: null,\n  };\n}\n\nexport function Fragment(props: Props): React$MixedElement {\n  'inline';\n  return {\n    type: REACT_FRAGMENT_TYPE,\n    props: props,\n    key: null,\n    ref: null,\n  };\n}\n\nexport function forwardRef(\n  comp: (props: Props, ref: mixed) => React$MixedElement,\n): Component {\n  return (props: Props): React$MixedElement => comp(props, null);\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport CHECKED_CAST from 'sh/CHECKED_CAST';\nimport {fastArrayJoin} from 'sh/fastarray';\n\nexport function cva(\n  base: string[] | string,\n  variants: mixed,\n): (opts: mixed) => string {\n  const baseString: string =\n    typeof base === 'string'\n      ? CHECKED_CAST<string>(base)\n      : fastArrayJoin(CHECKED_CAST<string[]>(base), ' ');\n  return (opts: mixed): string => baseString;\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nexport function cn(...rest: any): string {\n  return rest.join(' ');\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport type {React$MixedElement} from 'react';\n\nimport * as React from 'react';\nimport {cva} from 'class-variance-authority';\n\nimport {cn} from '@/lib/utils';\n\nconst buttonVariants = cva(\n  'inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50',\n  {\n    variants: {\n      variant: {\n        default:\n          'bg-primary text-primary-foreground shadow hover:bg-primary/90',\n        destructive:\n          'bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90',\n        outline:\n          'border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground',\n        secondary:\n          'bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80',\n        ghost: 'hover:bg-accent hover:text-accent-foreground',\n        link: 'text-primary underline-offset-4 hover:underline',\n      },\n      size: {\n        default: 'h-9 px-4 py-2',\n        sm: 'h-8 rounded-md px-3 text-xs',\n        lg: 'h-10 rounded-md px-8',\n        icon: 'h-9 w-9',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  },\n);\n\nconst Button = React.forwardRef(\n  (\n    {className, variant, size, asChild = false, ...props},\n    ref,\n  ): React$MixedElement => {\n    return (\n      <button\n        className={cn(buttonVariants({variant, size, className}))}\n        ref={ref}\n        {...props}\n      />\n    );\n  },\n);\n\nexport {Button, buttonVariants};\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport type {Props, React$MixedElement} from 'react';\n\nimport {Button} from '@/registry/new-york/ui/button';\nimport {useState} from 'react';\n\nexport default function MusicPage(props: Props): React$MixedElement {\n  const [toggle, setToggle] = useState<boolean>(true);\n  return (\n    <>\n      <Button id=\"click-me\" onClick={() => setToggle(!toggle)}>\n        Click me: {String(toggle)}\n      </Button>\n      <span>Other</span>\n    </>\n  );\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport * as React from 'react';\nimport MusicPage from './page';\nimport {drainMicrotaskQueue} from 'sh/microtask';\n\nfunction printIf1(i: number, str: string): void {\n  if (i === 1) {\n    print('===============================');\n    print(str);\n    print('===============================');\n  }\n}\n\nfunction run(N: number): void {\n  for (let i: number = 1; i <= N; ++i) {\n    const root = React.createRoot();\n    const rootElement = <MusicPage />;\n    printIf1(i, root.render(rootElement));\n\n    React.callOnClickOrChange('click-me', null);\n    drainMicrotaskQueue();\n    printIf1(i, root.render(rootElement));\n  }\n}\n\nrun(1);\n",null,null,null,null,null,null,null,null,null,null],"mappings":"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"}