{"version":3,"names":["react_invariant$default","condition","format","Error","sh_CHECKED_CAST$default","value","sh_microtask$INTERNAL$microtaskQueue","sh_microtask$drainMicrotaskQueue","i","length","undefined","sh_microtask$queueMicrotask","callback","push","react_index$INTERNAL$fastArrayJoin","arr","sep","result","e","react_index$INTERNAL$padString","str","len","react_index$INTERNAL$React$Element","constructor","type","props","key","ref","react_index$INTERNAL$workInProgressRoot","react_index$INTERNAL$workInProgressFiber","react_index$INTERNAL$workInProgressState","react_index$INTERNAL$renderPhaseUpdateQueue","react_index$createRoot","react_index$INTERNAL$Root","react_index$useState","initial","root","fiber","state","_workInProgressState","nextState","react_index$INTERNAL$State","next","updater","update","react_index$INTERNAL$Update","notify","react_index$INTERNAL$callbacks","Map","react_index$callOnClickOrChange","id","event","get","run","fn","changed","Object","is","element","updateQueue","doWork","render","hasChanges","output","printFiber","mustRender","mountFiber","fiber2","renderFiber","child","sibling","parent","out","level","kind","tag","padStr","propName","propValue","entries","JSON","stringify","printChildren","text","current","component","iterationCount","reconcileFiber","onClick","set","onChange","elementOrString","react_index$INTERNAL$FiberTypeComponent","react_index$INTERNAL$Fiber","react_index$INTERNAL$FiberTypeHost","children","Array","isArray","prev","childElement","react_index$INTERNAL$FiberTypeText","prevChild","reconcileChildren","childrenArray","reconcileMultipleChildren","keyedChildren","prevByIndex","prevFiber","react_index$INTERNAL$FiberType","react_index$jsx","react_index$Fragment","App$INTERNAL$Button","App$INTERNAL$Input","App$INTERNAL$TextArea","App$INTERNAL$Select","options","option","label","App$INTERNAL$Checkbox","checked","App$INTERNAL$Radio","App$INTERNAL$Slider","min","max","step","App$INTERNAL$ProgressBar","style","width","progress","App$INTERNAL$Spinner","className","App$INTERNAL$Modal","isOpen","onClose","App$INTERNAL$Tooltip","App$default","setText","number","setNumber","isChecked","setIsChecked","isSelected","setIsSelected","setIsOpen","isTooltipOpen","setIsTooltipOpen","target","parseInt","index$INTERNAL$printIf1","print","index$INTERNAL$run","N","rootElement"],"sources":["../src/packages/react/invariant.js","../src/packages/sh/CHECKED_CAST.js","../src/packages/sh/microtask.js","../src/packages/react/index.js","../src/app/simple/App.js","../src/app/simple/index.js","/Users/pieterv/fbsource/xplat/static_h/benchmarks/MiniReact/no-objects/src/packages/react/invariant.js","/Users/pieterv/fbsource/xplat/static_h/benchmarks/MiniReact/no-objects/src/packages/sh/CHECKED_CAST.js","/Users/pieterv/fbsource/xplat/static_h/benchmarks/MiniReact/no-objects/src/packages/sh/microtask.js","/Users/pieterv/fbsource/xplat/static_h/benchmarks/MiniReact/no-objects/src/packages/react/index.js","/Users/pieterv/fbsource/xplat/static_h/benchmarks/MiniReact/no-objects/src/app/simple/App.js","/Users/pieterv/fbsource/xplat/static_h/benchmarks/MiniReact/no-objects/src/app/simple/index.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nexport default function invariant(condition: boolean, format: string): void {\n  'inline';\n\n  if (!condition) {\n    throw new Error(format);\n  }\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nexport default function CHECKED_CAST<T>(value: mixed): T {\n  'inline';\n  return (value: any);\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nlet microtaskQueue = [];\n\nexport function drainMicrotaskQueue(): void {\n  for (let i = 0; i < microtaskQueue.length; i++) {\n    microtaskQueue[i]();\n    microtaskQueue[i] = undefined;\n  }\n  microtaskQueue = [];\n}\n\nexport function queueMicrotask(callback: () => void): void {\n  microtaskQueue.push(callback);\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport invariant from './invariant';\nimport CHECKED_CAST from 'sh/CHECKED_CAST';\nimport {queueMicrotask} from 'sh/microtask';\n\nfunction fastArrayJoin(arr: string[], sep: string): string {\n  let result: string = '';\n  for (let i: number = 0, e = arr.length; i < e; ++i) {\n    if (i !== 0) result += sep;\n    result += arr[i];\n  }\n  return result;\n}\n\nfunction padString(str: string, len: number): string {\n  let result: string = '';\n  for (let i: number = 0; i < len; i++) {\n    result += str;\n  }\n  return result;\n}\n\nexport type React$Node = string | React$Element<React$ElementType>;\n\n/**\n * The type of an element in React. A React element may be a:\n *\n * - String. These elements are intrinsics that depend on the React renderer\n *   implementation.\n * - React component. See `ComponentType` for more information about its\n *   different variants.\n */\ntype React$ElementType =\n  | string\n  | Component /* TODO: React$AbstractComponent<empty, mixed> */;\n\n/**\n * Type of a React element. React elements are commonly created using JSX\n * literals, which desugar to React.createElement calls (see below).\n */\n// type React$Element<ElementType: React$ElementType> = {|\n//   type: ElementType,\n//   props: Props,\n//   key: React$Key | null,\n//   ref: any,\n// |};\nclass React$Element<ElementType> {\n  type: ElementType;\n  props: Props;\n  key: React$Key | null;\n  ref: any;\n\n  constructor(\n    type: ElementType,\n    props: Props,\n    key: React$Key | null,\n    ref: any,\n  ) {\n    this.type = type;\n    this.props = props;\n    this.key = key;\n    this.ref = ref;\n  }\n}\n\nexport type React$MixedElement = React$Element<React$ElementType>;\n\n/**\n * The type of the key that React uses to determine where items in a new list\n * have moved.\n */\ntype React$Key = string | number;\n\n/* eslint-disable lint/strictly-null, lint/react-state-props-mutation, lint/flow-react-element */\n\n/**\n * The current root\n */\nlet workInProgressRoot: Root | null = null;\n\n/**\n * The currently rendering fiber. Only set when a component is being rendered.\n */\nlet workInProgressFiber: Fiber | null = null;\n\n/**\n * The previous state hook, or null if no state hook has been evaluated yet.\n */\nlet workInProgressState: State<mixed> | null = null;\n\n/**\n * Queue of updates triggered *during* render.\n */\nconst renderPhaseUpdateQueue: Update<mixed>[] = [];\n\n/**\n * Public API to create a new \"root\", this is where React attaches rendering to a host element.\n * In our case we don't actually have a real host, and currently only \"render\" to strings.\n */\nexport function createRoot(): Root {\n  return new Root();\n}\n\n/**\n * Hook to create (on initial render) or access (on update) a state, using the index of the useState\n * call within the component as the identity. Thus conditionally calling this API can cause state to\n * be lost.\n */\nexport function useState<T>(\n  /**\n   * Initial value of the state\n   */\n  initial: T,\n): [T, (value: T | ((prev: T) => T)) => void] {\n  const root: Root = CHECKED_CAST<Root>(workInProgressRoot);\n  const fiber: Fiber = CHECKED_CAST<Fiber>(workInProgressFiber);\n  invariant(\n    fiber !== null && root !== null,\n    'useState() called outside of render',\n  );\n\n  let state: State<T>;\n  const _workInProgressState: State<mixed> | null = workInProgressState;\n  if (_workInProgressState === null) {\n    // Get or initialize the first state on the fiber\n    let nextState = fiber.state;\n    if (nextState === null) {\n      nextState = new State<mixed>(initial);\n      fiber.state = nextState;\n    }\n    // NOTE: in case of a re-render we assume that the hook types match but\n    // can't statically prove this\n    state = CHECKED_CAST<State<T>>(nextState);\n  } else {\n    let nextState = CHECKED_CAST<State<mixed>>(_workInProgressState).next;\n    if (nextState === null) {\n      nextState = new State<mixed>(initial);\n      CHECKED_CAST<State<mixed>>(_workInProgressState).next = nextState;\n    }\n    // NOTE: in case of a re-render we assume that the hook types match but\n    // can't statically prove this\n    state = CHECKED_CAST<State<T>>(nextState);\n  }\n  // NOTE: this should just work because of subtying, State<T> should be subtype of State<mixed>\n  workInProgressState = CHECKED_CAST<State<mixed>>(state);\n  return [\n    // Untyped check that the existing state value has the correct type,\n    // This is safe if components follow the rules of hooks\n    CHECKED_CAST<T>(state.value),\n    (updater: T | ((prev: T) => T)): void => {\n      const update = new Update<mixed>(\n        fiber,\n        CHECKED_CAST<State<mixed>>(state),\n        CHECKED_CAST<T | ((prev: T) => T)>(updater),\n      );\n      if (workInProgressFiber !== null) {\n        // called during render\n        renderPhaseUpdateQueue.push(update);\n      } else {\n        root.notify(update);\n      }\n    },\n  ];\n}\n\nconst callbacks = new Map();\nexport function callOnClickOrChange(id: string, event: any): void {\n  const callback = callbacks.get(id);\n  if (callback == null) {\n    throw new Error('No callback registered with id: ' + id);\n  }\n  callback(event);\n}\n\n/**\n * The type of value that may be passed to the setState function (second part of useState return value).\n * - T: the new value\n * - (prev: T) => T: a function to compute the new value from the old value\n */\n// type Updater<T> = T | ((prev: T) => T);\n\n/**\n * The type of the setState function (second element of the array returned by useState).\n */\n// type SetState<T> = (value: Updater<T>) => void;\n\n/**\n * A queued state update.\n */\nclass Update<T> {\n  fiber: Fiber; // used to check state updates that occur during render to see if they came from the current component.\n  state: State<T>;\n  updater: T | ((prev: T) => T); // Updater<T>;\n\n  constructor(fiber: Fiber, state: State<T>, updater: T | ((prev: T) => T)) {\n    this.fiber = fiber;\n    this.state = state;\n    this.updater = updater;\n  }\n\n  /**\n   * Process the state update\n   */\n  run(): boolean {\n    const state = this.state;\n    let value: T = state.value;\n    const updater = this.updater;\n    if (typeof updater === 'function') {\n      // NOTE: The type of Updater<T> is meant to expresss `T (not function) | T (function of T => T)`\n      // thus the fact that updater is a function here menas its a function of T => T.\n      const fn = CHECKED_CAST<(prev: T) => T>(updater);\n      value = fn(state.value);\n    } else {\n      // NOTE: The type of Updater<T> is meant to expresss `T (not function) | T (function of T => T)`\n      // thus the fact that updater is *not* a function here means it is a T\n      value = CHECKED_CAST<T>(updater);\n    }\n    const changed = !Object.is(state.value, value);\n    state.value = value;\n    return changed;\n  }\n}\n\nclass Root {\n  /**\n   * The fiber representing the root node (`element`), null until\n   * render is first called.\n   */\n  root: Fiber | null;\n\n  /**\n   * The last rendered root element, initially null.\n   */\n  element: React$MixedElement | null;\n\n  /**\n   * Queue of updates (state changes) to apply on the next render\n   */\n  updateQueue: Update<mixed>[];\n\n  constructor() {\n    this.root = null;\n    this.element = null;\n    this.updateQueue = ([]: Update<mixed>[]);\n  }\n\n  /**\n   * Notify the root that an update is scheduled\n   */\n  notify(update: Update<mixed>): void {\n    this.updateQueue.push(update);\n    if (this.updateQueue.length === 1) {\n      queueMicrotask((): void => {\n        const element = this.element;\n        invariant(\n          element !== null,\n          'Expected an element to be set after rendering',\n        );\n        this.doWork(CHECKED_CAST<React$MixedElement>(element));\n      });\n    }\n  }\n\n  /**\n   * Drive any remaining work to completion and return the rendered result\n   */\n  render(element: React$MixedElement): string {\n    invariant(\n      workInProgressFiber === null && workInProgressState === null,\n      'Cannot render, an existing render is in progress',\n    );\n    const hasChanges = element !== this.element;\n    this.element = element;\n    if (hasChanges) {\n      this.doWork(element);\n    }\n\n    invariant(this.root !== null, 'Expected root to be rendered');\n    const root: Fiber = CHECKED_CAST<Fiber>(this.root);\n    const output: string[] = [];\n    this.printFiber(root, output, 0);\n    // return output.join('');\n    return fastArrayJoin(output, '\\n');\n  }\n\n  doWork(element: React$MixedElement): void {\n    let mustRender = this.root === null;\n    for (const update of this.updateQueue) {\n      mustRender = update.run() || mustRender;\n    }\n    this.updateQueue = ([]: Update<mixed>[]);\n    if (!mustRender) {\n      return;\n    }\n\n    // Visit the tree in pre-order, rendering each node\n    // and then processing its children\n    // eslint-disable-next-line consistent-this\n    workInProgressRoot = this;\n    let fiber = this.root;\n    if (fiber === null) {\n      fiber = this.mountFiber(element, null);\n      this.root = fiber;\n    }\n    while (fiber !== null) {\n      // Render the fiber, which creates child/sibling nodes\n      let fiber2: Fiber = CHECKED_CAST<Fiber>(fiber);\n      this.renderFiber(fiber2);\n      // advance to the next fiber\n      if (fiber2.child !== null) {\n        fiber = fiber2.child;\n      } else if (fiber2.sibling !== null) {\n        fiber = fiber2.sibling;\n      } else {\n        fiber = fiber2.parent;\n        while (fiber !== null && CHECKED_CAST<Fiber>(fiber).sibling === null) {\n          fiber = CHECKED_CAST<Fiber>(fiber).parent;\n        }\n        if (fiber !== null) {\n          fiber = CHECKED_CAST<Fiber>(fiber).sibling;\n        }\n      }\n    }\n    workInProgressRoot = null;\n  }\n\n  /**\n   * Prints a representation of the output DOM as HTML, emitting HTML snippets to @param out.\n   */\n  printFiber(fiber: Fiber, out: string[], level: number): void {\n    switch (fiber.type.kind) {\n      case 'host': {\n        const tag = CHECKED_CAST<FiberTypeHost>(fiber.type).tag;\n        const padStr = padString(' ', level);\n        let str = padStr + '<' + tag;\n        for (const [propName, propValue] of Object.entries(fiber.props)) {\n          if (typeof propValue === 'function') {\n            continue;\n          }\n\n          str += ` ${propName}=${JSON.stringify(propValue) ?? 'undefined'}`;\n        }\n        str += '>';\n        out.push(str);\n        this.printChildren(fiber, out, level + 1);\n        out.push(padStr + '</' + tag + '>');\n        break;\n      }\n      case 'text': {\n        const text = CHECKED_CAST<FiberTypeText>(fiber.type).text;\n        if (text !== '') {\n          out.push(padString(' ', level) + text);\n        }\n        break;\n      }\n      case 'component': {\n        this.printChildren(fiber, out, level);\n        break;\n      }\n    }\n  }\n\n  printChildren(fiber: Fiber, out: string[], level: number): void {\n    let current: Fiber | null = fiber.child;\n    while (current !== null) {\n      this.printFiber(CHECKED_CAST<Fiber>(current), out, level);\n      current = CHECKED_CAST<Fiber>(current).sibling;\n    }\n  }\n\n  /**\n   * Renders and reconciles the output of the given @param fiber. Note that this does not *render*\n   * children, it only reconciles the current output of the fiber with the previous children.\n   */\n  renderFiber(fiber: Fiber): void {\n    try {\n      workInProgressFiber = fiber;\n      workInProgressState = null;\n      switch (fiber.type.kind) {\n        case 'component': {\n          invariant(\n            renderPhaseUpdateQueue.length === 0,\n            'Expected no queued render updates',\n          );\n          const render: (props: Props) => React$MixedElement =\n            CHECKED_CAST<FiberTypeComponent>(fiber.type).component;\n          let element = render(fiber.props);\n          let iterationCount: number = 0;\n          while (renderPhaseUpdateQueue.length !== 0) {\n            iterationCount++;\n            invariant(\n              iterationCount < 1000,\n              'Possible infinite loop with setState during render',\n            );\n            let hasChanges = false;\n            for (const update of renderPhaseUpdateQueue) {\n              invariant(\n                update.fiber === fiber,\n                'setState() during render is currently only supported when updating the component ' +\n                  'being rendered. Setting state from another component is not supported.',\n              );\n              hasChanges = update.run() || hasChanges;\n            }\n            renderPhaseUpdateQueue.length = 0;\n            if (!hasChanges) {\n              break;\n            }\n            element = render(fiber.props);\n          }\n          fiber.child = this.reconcileFiber(fiber, fiber.child, element);\n          break;\n        }\n        case 'host': {\n          const id = fiber.props.id;\n          if (id != null) {\n            const onClick = fiber.props.onClick;\n            if (onClick != null) {\n              callbacks.set(id, onClick);\n            }\n            const onChange = fiber.props.onChange;\n            if (onChange != null) {\n              callbacks.set(id, onChange);\n            }\n          }\n          break;\n        }\n        case 'text': {\n          // Nothing to reconcile, these nodes are visited by the main doWork() loop\n          break;\n        }\n      }\n    } finally {\n      workInProgressFiber = null;\n      workInProgressState = null;\n    }\n  }\n\n  /**\n   * Create a new fiber for the given element. Used when there is no fiber at\n   * a given tree position which can be reused.\n   */\n  mountFiber(elementOrString: React$Node, parent: Fiber | null): Fiber {\n    let fiber: Fiber;\n    if (typeof elementOrString === 'object') {\n      const element = CHECKED_CAST<React$MixedElement>(elementOrString);\n      if (typeof element.type === 'function') {\n        const component: Component = CHECKED_CAST<Component>(element.type);\n        // const type: FiberType = {\n        //   kind: 'component',\n        //   component,\n        // };\n        const type: FiberType = new FiberTypeComponent(component);\n        fiber = new Fiber(type, (element.props: any), element.key);\n      } else {\n        invariant(\n          typeof element.type === 'string',\n          'Expected a host component name such as \"div\" or \"span\", got ' +\n            CHECKED_CAST<string>(element.type),\n        );\n        // const type: FiberType = {\n        //   kind: 'host',\n        //   tag: element.type,\n        // };\n        const type: FiberType = new FiberTypeHost(\n          CHECKED_CAST<string>(element.type),\n        );\n        invariant(\n          element.props !== null && typeof element.props === 'object',\n          'Expected component props',\n        );\n\n        // const {children, ...props} = element.props;\n        const children = element.props.children;\n        const props = {...element.props};\n        delete props.children;\n\n        fiber = new Fiber(type, props, element.key);\n        if (Array.isArray(children)) {\n          let prev: Fiber | null = null;\n          for (const childElement of CHECKED_CAST<any[]>(children)) {\n            const child = this.mountFiber(\n              CHECKED_CAST<React$Node>(childElement),\n              fiber,\n            );\n            if (prev !== null) {\n              CHECKED_CAST<Fiber>(prev).sibling = child;\n            } else {\n              // set parent to point to first child\n              fiber.child = child;\n            }\n            prev = child;\n          }\n        } else if (typeof children === 'string') {\n          const child = new Fiber({kind: 'text', text: children}, {}, null);\n          child.parent = fiber;\n          fiber.child = child;\n        } else if (children != null) {\n          const child = this.mountFiber((children: any), fiber);\n          fiber.child = child;\n        }\n      }\n    } else {\n      invariant(typeof elementOrString === 'string', 'Expected a string');\n      // const type: FiberType = {\n      //   kind: 'text',\n      //   text: element,\n      // };\n      const type = new FiberTypeText(CHECKED_CAST<string>(elementOrString));\n      fiber = new Fiber(type, {}, null);\n    }\n    fiber.parent = parent;\n    return fiber;\n  }\n\n  /**\n   * Update's @param parent's child to reflect the latest desired output as described by @param element.\n   * This either reuses @param prevChild if present and the component type matches, otherwise it creates\n   * a new Fiber.\n   */\n  reconcileFiber(\n    parent: Fiber,\n    prevChild: Fiber | null,\n    element: React$MixedElement,\n  ): Fiber {\n    if (\n      prevChild !== null &&\n      CHECKED_CAST<Fiber>(prevChild).type === element.type\n    ) {\n      let prevChild: Fiber = CHECKED_CAST<Fiber>(prevChild);\n      // Only host nodes have to be reconciled: otherwise this is a function component\n      // and its children will be reconciled when they are later emitted in a host\n      // position (ie as a direct result of render)\n      if (prevChild.type.kind === 'host') {\n        invariant(\n          element.props !== null && typeof element.props === 'object',\n          'Expected component props',\n        );\n\n        // const {children, ...props} = element.props;\n        const children = element.props.children;\n        const props = {...element.props};\n        delete props.children;\n\n        prevChild.props = props;\n        this.reconcileChildren(prevChild, (children: any));\n      } else if (prevChild.type.kind === 'component') {\n        invariant(\n          element.props !== null && typeof element.props === 'object',\n          'Expected component props',\n        );\n        prevChild.props = element.props;\n      }\n      return prevChild;\n    } else {\n      const child = this.mountFiber(element, parent);\n      return child;\n    }\n  }\n\n  /**\n   * Reconciles the @param parent fiber's children nodes.\n   */\n  reconcileChildren(\n    parent: Fiber,\n    children: React$MixedElement[] | React$MixedElement | string | null | void,\n  ): void {\n    const prevChild: Fiber | null = parent.child;\n    if (Array.isArray(children)) {\n      let childrenArray = CHECKED_CAST<React$MixedElement[]>(children);\n      // Fast-path for empty and single-element arrays\n      if (childrenArray.length === 0) {\n        parent.child = null;\n      } else if (childrenArray.length === 1) {\n        parent.child = this.reconcileFiber(parent, prevChild, childrenArray[0]);\n        CHECKED_CAST<Fiber>(parent.child).sibling = null;\n      } else {\n        this.reconcileMultipleChildren(parent, childrenArray);\n      }\n    } else if (typeof children === 'string') {\n      if (\n        prevChild === null ||\n        CHECKED_CAST<Fiber>(prevChild).type.kind !== 'text'\n      ) {\n        const child = new Fiber({kind: 'text', text: children}, {}, null);\n        parent.child = child;\n      } else {\n        CHECKED_CAST<FiberTypeText>(CHECKED_CAST<Fiber>(prevChild).type).text =\n          CHECKED_CAST<string>(children);\n      }\n    } else if (children != null) {\n      parent.child = this.reconcileFiber(\n        parent,\n        prevChild,\n        CHECKED_CAST<React$MixedElement>(children),\n      );\n      CHECKED_CAST<Fiber>(parent.child).sibling = null;\n    } else {\n      parent.child = null;\n      if (prevChild !== null) {\n        CHECKED_CAST<Fiber>(prevChild).parent = null;\n      }\n    }\n  }\n\n  /**\n   * Reconciles the @param parent fiber's children when the children are known to\n   * have 2+ items. Note that the algorithm works for 0+ elements but a fast-path\n   * should be used for 0/1 item cases.\n   */\n  reconcileMultipleChildren(\n    parent: Fiber,\n    children: React$MixedElement[],\n  ): void {\n    invariant(\n      children.length > 1,\n      'Expected children to have multiple elements',\n    );\n    // map existing children by key to make subsequent lookup O(log n)\n    const keyedChildren: any = new Map();\n    let current: Fiber | null = parent.child;\n    while (current !== null) {\n      if (CHECKED_CAST<Fiber>(current).key !== null) {\n        keyedChildren.set(CHECKED_CAST<Fiber>(current).key, current);\n      }\n      current = CHECKED_CAST<Fiber>(current).sibling;\n    }\n    let prev: Fiber | null = null; // previous fiber at this key/index\n    let prevByIndex: Fiber | null = parent.child; // keep track of prev fiber at this index\n    for (const childElement of children) {\n      const prevFiber =\n        (childElement.key != null\n          ? keyedChildren.get(childElement.key)\n          : null) ?? prevByIndex;\n      let child: Fiber;\n      if (prevFiber != null) {\n        child = this.reconcileFiber(parent, prevFiber, childElement);\n      } else {\n        child = this.mountFiber(childElement, parent);\n      }\n      if (prev !== null) {\n        CHECKED_CAST<Fiber>(prev).sibling = child;\n      } else {\n        // set parent to point to first child\n        parent.child = child;\n      }\n      prev = child;\n      prevByIndex =\n        prevByIndex !== null ? CHECKED_CAST<Fiber>(prevByIndex).sibling : null;\n    }\n  }\n}\n\n/**\n * Describes the `type` field of Fiber, which can hold different data depending on the fiber's kind:\n * - Component stores a function of props => element.\n * - Host stores the name of the host component, ie \"div\"\n * - Text stores the text itself.\n */\ntype Component = (props: Props) => React$MixedElement;\n\n// type FiberType =\n//   | {\n//       kind: 'component',\n//       component: Component,\n//     }\n//   | {\n//       kind: 'host',\n//       tag: string,\n//     }\n//   | {\n//       kind: 'text',\n//       text: string,\n//     };\n\nclass FiberType {\n  kind: string;\n  constructor(kind: string) {\n    this.kind = kind;\n  }\n}\n\nclass FiberTypeComponent extends FiberType {\n  component: Component;\n  constructor(component: Component) {\n    super('component');\n    this.component = component;\n  }\n}\nclass FiberTypeHost extends FiberType {\n  tag: string;\n  constructor(tag: string) {\n    super('host');\n    this.tag = tag;\n  }\n}\nclass FiberTypeText extends FiberType {\n  text: string;\n  constructor(text: string) {\n    super('text');\n    this.text = text;\n  }\n}\n\n/**\n * The type of component props as seen by the framework, because processing is heterogenous\n * the framework only looks at the identity of prop values and does not otherwise make any\n * assumptions about which props may exist and what their types are.\n */\nexport type Props = any;\n\n/**\n * Data storage for the useState() hook\n */\nclass State<T> {\n  value: T;\n  next: State<T> | null;\n  prev: State<T> | null;\n\n  constructor(value: T) {\n    this.value = value;\n\n    this.next = null;\n    this.prev = null;\n  }\n}\n\n/**\n * Represents a node in the UI tree, and may correspond to a user-defined function component,\n * a host node, or a text node.\n */\nclass Fiber {\n  type: FiberType;\n  props: Props;\n  parent: Fiber | null;\n  child: Fiber | null;\n  sibling: Fiber | null;\n  state: State<mixed> | null;\n  key: React$Key | null;\n\n  constructor(type: FiberType, props: Props, key: React$Key | null) {\n    this.type = type;\n    this.props = props;\n    this.key = key;\n\n    this.parent = null;\n    this.child = null;\n    this.sibling = null;\n    this.state = null;\n  }\n}\n\nexport function jsx(\n  type: React$ElementType,\n  props: Props,\n  key: React$Key | null,\n): React$MixedElement {\n  'inline';\n  return {\n    type: type,\n    props: props,\n    key: key,\n    ref: null,\n  };\n}\n\nexport function Fragment(props: Props): React$Node {\n  // TODO: Get this to work.\n  return props.children;\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport type {Props, React$MixedElement} from 'react';\n\nimport {useState} from 'react';\n\nfunction Button(props: Props): React$MixedElement {\n  return (\n    <button id={props.id} onClick={props.onClick}>\n      Click me\n    </button>\n  );\n}\n\nfunction Input(props: Props): React$MixedElement {\n  return (\n    <input\n      id={props.id}\n      type=\"text\"\n      onChange={props.onChange}\n      value={props.value}\n    />\n  );\n}\n\nfunction TextArea(props: Props): React$MixedElement {\n  return <textarea onChange={props.onChange}>{props.value}</textarea>;\n}\n\nfunction Select(props: Props): React$MixedElement {\n  const children = [];\n  for (let i = 0; i < props.options.length; i++) {\n    const option = props.options[i];\n    children.push(\n      <option key={option.value} value={option.value}>\n        {option.label}\n      </option>,\n    );\n  }\n  return <select onChange={props.onChange}>{children}</select>;\n}\n\nfunction Checkbox(props: Props): React$MixedElement {\n  return (\n    <input type=\"checkbox\" checked={props.checked} onChange={props.onChange} />\n  );\n}\n\nfunction Radio(props: Props): React$MixedElement {\n  return (\n    <input type=\"radio\" checked={props.checked} onChange={props.onChange} />\n  );\n}\n\nfunction Slider(props: Props): React$MixedElement {\n  return (\n    <input\n      type=\"range\"\n      min={props.min}\n      max={props.max}\n      step={props.step}\n      value={props.value}\n      onChange={props.onChange}\n    />\n  );\n}\n\nfunction ProgressBar(props: Props): React$MixedElement {\n  return <div style={{width: `${props.progress}%`}}></div>;\n}\n\nfunction Spinner(props: Props): React$MixedElement {\n  return <div className=\"spinner\">Loading...</div>;\n}\n\nfunction Modal(props: Props): React$MixedElement {\n  if (!props.isOpen) {\n    return <div className=\"modal closed\" />;\n  }\n\n  return (\n    <div className=\"modal open\">\n      <div className=\"overlay\" onClick={props.onClose}>\n        X\n      </div>\n      <div className=\"content\">{props.children}</div>\n    </div>\n  );\n}\n\nfunction Tooltip(props: Props): React$MixedElement {\n  if (!props.isOpen) {\n    return <div className=\"tooltip closed\" />;\n  }\n\n  return (\n    <div className=\"tooltip open\">\n      <div className=\"arrow\"></div>\n      <div className=\"content\">{props.children}</div>\n    </div>\n  );\n}\n\nexport default function App(props: Props): React$MixedElement {\n  const [text, setText] = useState<string>('');\n  const [number, setNumber] = useState<number>(0);\n  const [isChecked, setIsChecked] = useState<boolean>(false);\n  const [isSelected, setIsSelected] = useState<boolean>(false);\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n  const [isTooltipOpen, setIsTooltipOpen] = useState<boolean>(true);\n  return (\n    <div>\n      <h1>React Benchmark</h1>\n      <Button id=\"toggle-modal\" onClick={(): void => setIsOpen(!isOpen)}>\n        Toggle Modal\n      </Button>\n      <Modal isOpen={isOpen} onClose={(): void => setIsOpen(false)}>\n        <h2>Modal Content</h2>\n        <p>This is some modal content.</p>\n        <Tooltip\n          isOpen={isTooltipOpen}\n          onClose={(): void => setIsTooltipOpen(false)}>\n          <h3>Tooltip Content</h3>\n          <p>This is some tooltip content.</p>\n        </Tooltip>\n      </Modal>\n      <div>\n        <h2>Form Elements</h2>\n        <Input\n          id=\"update-text\"\n          value={text}\n          onChange={e => setText(e.target.value)}\n        />\n        <TextArea value={text} onChange={e => setText(e.target.value)} />\n        <Select\n          options={[\n            {label: 'Option 1', value: 1},\n            {label: 'Option 2', value: 2},\n            {label: 'Option 3', value: 3},\n          ]}\n          onChange={e => setNumber(parseInt(e.target.value))}\n        />\n        <Checkbox\n          checked={isChecked}\n          onChange={e => setIsChecked(e.target.checked)}\n        />\n        <Radio\n          checked={isSelected}\n          onChange={e => setIsSelected(e.target.checked)}\n        />\n        <Slider\n          min={0}\n          max={100}\n          step={1}\n          value={number}\n          onChange={e => setNumber(parseInt(e.target.value))}\n        />\n        <ProgressBar progress={number} />\n        <Spinner />\n      </div>\n    </div>\n  );\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport * as React from 'react';\nimport App from './App';\nimport {drainMicrotaskQueue} from 'sh/microtask';\n\nfunction printIf1(i: number, str: string): void {\n  if (i === 1) {\n    print('===============================');\n    print(str);\n    print('===============================');\n  }\n}\n\nfunction run(N: number): void {\n  for (let i: number = 1; i <= N; ++i) {\n    const root = React.createRoot();\n    const rootElement = <App />;\n    printIf1(i, root.render(rootElement));\n\n    React.callOnClickOrChange('toggle-modal', null);\n    React.callOnClickOrChange('update-text', {\n      target: {value: '!!!!! some text !!!!!'},\n    });\n    drainMicrotaskQueue();\n    printIf1(i, root.render(rootElement));\n  }\n}\n\nrun(1);\n",null,null,null,null,null,null],"mappings":"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"}