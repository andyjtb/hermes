{"version":3,"names":["react_invariant$default","condition","format","Error","sh_CHECKED_CAST$default","value","sh_microtask$INTERNAL$microtaskQueue","sh_microtask$drainMicrotaskQueue","i","length","undefined","sh_microtask$queueMicrotask","callback","push","sh_fastarray$fastArrayJoin","arr","sep","result","e","react_index$INTERNAL$padString","str","len","react_index$INTERNAL$React$Element","constructor","type","props","key","ref","react_index$INTERNAL$REACT_FRAGMENT_TYPE","react_index$INTERNAL$workInProgressRoot","react_index$INTERNAL$workInProgressFiber","react_index$INTERNAL$workInProgressState","react_index$INTERNAL$renderPhaseUpdateQueue","react_index$createRoot","react_index$INTERNAL$Root","react_index$useState","initial","root","fiber","state","_workInProgressState","nextState","react_index$INTERNAL$State","next","updater","update","react_index$INTERNAL$Update","notify","react_index$INTERNAL$callbacks","Map","react_index$callOnClickOrChange","id","event","get","run","fn","changed","Object","is","element","updateQueue","doWork","render","hasChanges","output","printFiber","mustRender","mountFiber","fiber2","renderFiber","child","sibling","parent","out","level","kind","tag","padStr","propName","propValue","entries","JSON","stringify","printChildren","text","current","component","iterationCount","reconcileFiber","onClick","set","onChange","elementOrString","react_index$INTERNAL$FiberTypeComponent","react_index$INTERNAL$Fiber","react_index$INTERNAL$FiberTypeHost","children","mountChildren","react_index$INTERNAL$FiberTypeFragment","react_index$INTERNAL$FiberTypeText","parentFiber","Array","isArray","prev","childElement","prevChild","reconcileChildren","childrenArray","reconcileMultipleChildren","keyedChildren","prevByIndex","prevFiber","react_index$INTERNAL$FiberType","react_index$jsx","react_index$Fragment","react_index$forwardRef","comp","App$INTERNAL$Button","App$INTERNAL$Input","App$INTERNAL$TextArea","App$INTERNAL$Select","options","option","label","App$INTERNAL$Checkbox","checked","App$INTERNAL$Radio","App$INTERNAL$Slider","min","max","step","App$INTERNAL$ProgressBar","style","width","progress","App$INTERNAL$Spinner","className","App$INTERNAL$Modal","isOpen","onClose","App$INTERNAL$Tooltip","App$default","setText","number","setNumber","isChecked","setIsChecked","isSelected","setIsSelected","setIsOpen","isTooltipOpen","setIsTooltipOpen","target","parseInt","index$INTERNAL$printIf1","print","index$INTERNAL$run","N","rootElement"],"sources":["../src/packages/react/invariant.js","../src/packages/sh/CHECKED_CAST.js","../src/packages/sh/microtask.js","../src/packages/sh/fastarray.js","../src/packages/react/index.js","../src/app/simple/App.js","../src/app/simple/index.js","/Users/pieterv/fbsource/xplat/static_h/benchmarks/MiniReact/no-objects/src/packages/react/invariant.js","/Users/pieterv/fbsource/xplat/static_h/benchmarks/MiniReact/no-objects/src/packages/sh/CHECKED_CAST.js","/Users/pieterv/fbsource/xplat/static_h/benchmarks/MiniReact/no-objects/src/packages/sh/microtask.js","/Users/pieterv/fbsource/xplat/static_h/benchmarks/MiniReact/no-objects/src/packages/sh/fastarray.js","/Users/pieterv/fbsource/xplat/static_h/benchmarks/MiniReact/no-objects/src/packages/react/index.js","/Users/pieterv/fbsource/xplat/static_h/benchmarks/MiniReact/no-objects/src/app/simple/App.js","/Users/pieterv/fbsource/xplat/static_h/benchmarks/MiniReact/no-objects/src/app/simple/index.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nexport default function invariant(condition: boolean, format: string): void {\n  'inline';\n\n  if (!condition) {\n    throw new Error(format);\n  }\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nexport default function CHECKED_CAST<T>(value: mixed): T {\n  'inline';\n  return (value: any);\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nlet microtaskQueue = [];\n\nexport function drainMicrotaskQueue(): void {\n  for (let i = 0; i < microtaskQueue.length; i++) {\n    microtaskQueue[i]();\n    microtaskQueue[i] = undefined;\n  }\n  microtaskQueue = [];\n}\n\nexport function queueMicrotask(callback: () => void): void {\n  microtaskQueue.push(callback);\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nexport function fastArrayJoin(arr: string[], sep: string): string {\n  let result: string = '';\n  for (let i: number = 0, e = arr.length; i < e; ++i) {\n    if (i !== 0) result += sep;\n    result += arr[i];\n  }\n  return result;\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport invariant from './invariant';\nimport CHECKED_CAST from 'sh/CHECKED_CAST';\nimport {queueMicrotask} from 'sh/microtask';\nimport {fastArrayJoin} from 'sh/fastarray';\n\nfunction padString(str: string, len: number): string {\n  let result: string = '';\n  for (let i: number = 0; i < len; i++) {\n    result += str;\n  }\n  return result;\n}\n\n/**\n * The type of an element in React. A React element may be a:\n *\n * - String. These elements are intrinsics that depend on the React renderer\n *   implementation.\n * - React component. See `ComponentType` for more information about its\n *   different variants.\n */\ntype React$ElementType =\n  | string\n  | Component /* TODO: React$AbstractComponent<empty, mixed> */\n  | number /* TODO: symbol */;\n\n/**\n * Type of a React element. React elements are commonly created using JSX\n * literals, which desugar to React.createElement calls (see below).\n */\n// type React$Element<ElementType: React$ElementType> = {|\n//   type: ElementType,\n//   props: Props,\n//   key: React$Key | null,\n//   ref: any,\n// |};\nclass React$Element<ElementType> {\n  type: ElementType;\n  props: Props;\n  key: React$Key | null;\n  ref: any;\n\n  constructor(\n    type: ElementType,\n    props: Props,\n    key: React$Key | null,\n    ref: any,\n  ) {\n    this.type = type;\n    this.props = props;\n    this.key = key;\n    this.ref = ref;\n  }\n}\n\nexport type React$MixedElement = React$Element<React$ElementType>;\ntype React$NodeWithoutArray = React$MixedElement | string | null | void;\nexport type React$Node = React$NodeWithoutArray[] | React$NodeWithoutArray;\n\n/**\n * The type of the key that React uses to determine where items in a new list\n * have moved.\n */\ntype React$Key = string | number;\n\nconst REACT_FRAGMENT_TYPE: number = 1 /* Symbol.for('react.fragment') */;\n\n/* eslint-disable lint/strictly-null, lint/react-state-props-mutation, lint/flow-react-element */\n\n/**\n * The current root\n */\nlet workInProgressRoot: Root | null = null;\n\n/**\n * The currently rendering fiber. Only set when a component is being rendered.\n */\nlet workInProgressFiber: Fiber | null = null;\n\n/**\n * The previous state hook, or null if no state hook has been evaluated yet.\n */\nlet workInProgressState: State<mixed> | null = null;\n\n/**\n * Queue of updates triggered *during* render.\n */\nconst renderPhaseUpdateQueue: Update<mixed>[] = [];\n\n/**\n * Public API to create a new \"root\", this is where React attaches rendering to a host element.\n * In our case we don't actually have a real host, and currently only \"render\" to strings.\n */\nexport function createRoot(): Root {\n  return new Root();\n}\n\n/**\n * Hook to create (on initial render) or access (on update) a state, using the index of the useState\n * call within the component as the identity. Thus conditionally calling this API can cause state to\n * be lost.\n */\nexport function useState<T>(\n  /**\n   * Initial value of the state\n   */\n  initial: T,\n): [T, (value: T | ((prev: T) => T)) => void] {\n  const root: Root = CHECKED_CAST<Root>(workInProgressRoot);\n  const fiber: Fiber = CHECKED_CAST<Fiber>(workInProgressFiber);\n  invariant(\n    fiber !== null && root !== null,\n    'useState() called outside of render',\n  );\n\n  let state: State<T>;\n  const _workInProgressState: State<mixed> | null = workInProgressState;\n  if (_workInProgressState === null) {\n    // Get or initialize the first state on the fiber\n    let nextState = fiber.state;\n    if (nextState === null) {\n      nextState = new State<mixed>(initial);\n      fiber.state = nextState;\n    }\n    // NOTE: in case of a re-render we assume that the hook types match but\n    // can't statically prove this\n    state = CHECKED_CAST<State<T>>(nextState);\n  } else {\n    let nextState = CHECKED_CAST<State<mixed>>(_workInProgressState).next;\n    if (nextState === null) {\n      nextState = new State<mixed>(initial);\n      CHECKED_CAST<State<mixed>>(_workInProgressState).next = nextState;\n    }\n    // NOTE: in case of a re-render we assume that the hook types match but\n    // can't statically prove this\n    state = CHECKED_CAST<State<T>>(nextState);\n  }\n  // NOTE: this should just work because of subtying, State<T> should be subtype of State<mixed>\n  workInProgressState = CHECKED_CAST<State<mixed>>(state);\n  return [\n    // Untyped check that the existing state value has the correct type,\n    // This is safe if components follow the rules of hooks\n    CHECKED_CAST<T>(state.value),\n    (updater: T | ((prev: T) => T)): void => {\n      const update = new Update<mixed>(\n        fiber,\n        CHECKED_CAST<State<mixed>>(state),\n        CHECKED_CAST<T | ((prev: T) => T)>(updater),\n      );\n      if (workInProgressFiber !== null) {\n        // called during render\n        renderPhaseUpdateQueue.push(update);\n      } else {\n        root.notify(update);\n      }\n    },\n  ];\n}\n\nconst callbacks = new Map();\nexport function callOnClickOrChange(id: string, event: any): void {\n  const callback = callbacks.get(id);\n  if (callback == null) {\n    throw new Error('No callback registered with id: ' + id);\n  }\n  callback(event);\n}\n\n/**\n * The type of value that may be passed to the setState function (second part of useState return value).\n * - T: the new value\n * - (prev: T) => T: a function to compute the new value from the old value\n */\n// type Updater<T> = T | ((prev: T) => T);\n\n/**\n * The type of the setState function (second element of the array returned by useState).\n */\n// type SetState<T> = (value: Updater<T>) => void;\n\n/**\n * A queued state update.\n */\nclass Update<T> {\n  fiber: Fiber; // used to check state updates that occur during render to see if they came from the current component.\n  state: State<T>;\n  updater: T | ((prev: T) => T); // Updater<T>;\n\n  constructor(fiber: Fiber, state: State<T>, updater: T | ((prev: T) => T)) {\n    this.fiber = fiber;\n    this.state = state;\n    this.updater = updater;\n  }\n\n  /**\n   * Process the state update\n   */\n  run(): boolean {\n    const state = this.state;\n    let value: T = state.value;\n    const updater = this.updater;\n    if (typeof updater === 'function') {\n      // NOTE: The type of Updater<T> is meant to expresss `T (not function) | T (function of T => T)`\n      // thus the fact that updater is a function here menas its a function of T => T.\n      const fn = CHECKED_CAST<(prev: T) => T>(updater);\n      value = fn(state.value);\n    } else {\n      // NOTE: The type of Updater<T> is meant to expresss `T (not function) | T (function of T => T)`\n      // thus the fact that updater is *not* a function here means it is a T\n      value = CHECKED_CAST<T>(updater);\n    }\n    const changed = !Object.is(state.value, value);\n    state.value = value;\n    return changed;\n  }\n}\n\nclass Root {\n  /**\n   * The fiber representing the root node (`element`), null until\n   * render is first called.\n   */\n  root: Fiber | null;\n\n  /**\n   * The last rendered root element, initially null.\n   */\n  element: React$MixedElement | null;\n\n  /**\n   * Queue of updates (state changes) to apply on the next render\n   */\n  updateQueue: Update<mixed>[];\n\n  constructor() {\n    this.root = null;\n    this.element = null;\n    this.updateQueue = ([]: Update<mixed>[]);\n  }\n\n  /**\n   * Notify the root that an update is scheduled\n   */\n  notify(update: Update<mixed>): void {\n    this.updateQueue.push(update);\n    if (this.updateQueue.length === 1) {\n      queueMicrotask((): void => {\n        const element = this.element;\n        invariant(\n          element !== null,\n          'Expected an element to be set after rendering',\n        );\n        this.doWork(CHECKED_CAST<React$MixedElement>(element));\n      });\n    }\n  }\n\n  /**\n   * Drive any remaining work to completion and return the rendered result\n   */\n  render(element: React$MixedElement): string {\n    invariant(\n      workInProgressFiber === null && workInProgressState === null,\n      'Cannot render, an existing render is in progress',\n    );\n    const hasChanges = element !== this.element;\n    this.element = element;\n    if (hasChanges) {\n      this.doWork(element);\n    }\n\n    invariant(this.root !== null, 'Expected root to be rendered');\n    const root: Fiber = CHECKED_CAST<Fiber>(this.root);\n    const output: string[] = [];\n    this.printFiber(root, output, 0);\n    return fastArrayJoin(output, '\\n');\n  }\n\n  doWork(element: React$MixedElement): void {\n    let mustRender = this.root === null;\n    for (const update of this.updateQueue) {\n      mustRender = update.run() || mustRender;\n    }\n    this.updateQueue = ([]: Update<mixed>[]);\n    if (!mustRender) {\n      return;\n    }\n\n    // Visit the tree in pre-order, rendering each node\n    // and then processing its children\n    // eslint-disable-next-line consistent-this\n    workInProgressRoot = this;\n    let fiber = this.root;\n    if (fiber === null) {\n      fiber = this.mountFiber(element, null);\n      this.root = fiber;\n    }\n    while (fiber !== null) {\n      // Render the fiber, which creates child/sibling nodes\n      let fiber2: Fiber = CHECKED_CAST<Fiber>(fiber);\n      this.renderFiber(fiber2);\n      // advance to the next fiber\n      if (fiber2.child !== null) {\n        fiber = fiber2.child;\n      } else if (fiber2.sibling !== null) {\n        fiber = fiber2.sibling;\n      } else {\n        fiber = fiber2.parent;\n        while (fiber !== null && CHECKED_CAST<Fiber>(fiber).sibling === null) {\n          fiber = CHECKED_CAST<Fiber>(fiber).parent;\n        }\n        if (fiber !== null) {\n          fiber = CHECKED_CAST<Fiber>(fiber).sibling;\n        }\n      }\n    }\n    workInProgressRoot = null;\n  }\n\n  /**\n   * Prints a representation of the output DOM as HTML, emitting HTML snippets to @param out.\n   */\n  printFiber(fiber: Fiber, out: string[], level: number): void {\n    switch (fiber.type.kind) {\n      case 'host': {\n        const tag = CHECKED_CAST<FiberTypeHost>(fiber.type).tag;\n        const padStr = padString(' ', level);\n        let str = padStr + '<' + tag;\n        for (const [propName, propValue] of Object.entries(fiber.props)) {\n          if (propValue == null || typeof propValue === 'function') {\n            continue;\n          }\n\n          str += ` ${propName}=${JSON.stringify(propValue) ?? 'undefined'}`;\n        }\n        if (fiber.child == null) {\n          str += ' />';\n          out.push(str);\n        } else {\n          str += '>';\n          out.push(str);\n          this.printChildren(fiber, out, level + 1);\n          out.push(padStr + '</' + tag + '>');\n        }\n        break;\n      }\n      case 'text': {\n        const text = CHECKED_CAST<FiberTypeText>(fiber.type).text;\n        if (text !== '') {\n          out.push(padString(' ', level) + text);\n        }\n        break;\n      }\n      case 'fragment':\n      case 'component': {\n        this.printChildren(fiber, out, level);\n        break;\n      }\n    }\n  }\n\n  printChildren(fiber: Fiber, out: string[], level: number): void {\n    let current: Fiber | null = fiber.child;\n    while (current !== null) {\n      this.printFiber(CHECKED_CAST<Fiber>(current), out, level);\n      current = CHECKED_CAST<Fiber>(current).sibling;\n    }\n  }\n\n  /**\n   * Renders and reconciles the output of the given @param fiber. Note that this does not *render*\n   * children, it only reconciles the current output of the fiber with the previous children.\n   */\n  renderFiber(fiber: Fiber): void {\n    try {\n      workInProgressFiber = fiber;\n      workInProgressState = null;\n      switch (fiber.type.kind) {\n        case 'component': {\n          invariant(\n            renderPhaseUpdateQueue.length === 0,\n            'Expected no queued render updates',\n          );\n          const render: (props: Props) => React$MixedElement =\n            CHECKED_CAST<FiberTypeComponent>(fiber.type).component;\n          let element = render(fiber.props);\n          let iterationCount: number = 0;\n          while (renderPhaseUpdateQueue.length !== 0) {\n            iterationCount++;\n            invariant(\n              iterationCount < 1000,\n              'Possible infinite loop with setState during render',\n            );\n            let hasChanges = false;\n            for (const update of renderPhaseUpdateQueue) {\n              invariant(\n                update.fiber === fiber,\n                'setState() during render is currently only supported when updating the component ' +\n                  'being rendered. Setting state from another component is not supported.',\n              );\n              hasChanges = update.run() || hasChanges;\n            }\n            renderPhaseUpdateQueue.length = 0;\n            if (!hasChanges) {\n              break;\n            }\n            element = render(fiber.props);\n          }\n          fiber.child = this.reconcileFiber(fiber, fiber.child, element);\n          break;\n        }\n        case 'host': {\n          const id = fiber.props.id;\n          if (id != null) {\n            const onClick = fiber.props.onClick;\n            if (onClick != null) {\n              callbacks.set(id, onClick);\n            }\n            const onChange = fiber.props.onChange;\n            if (onChange != null) {\n              callbacks.set(id, onChange);\n            }\n          }\n          break;\n        }\n        case 'fragment':\n        case 'text': {\n          // Nothing to reconcile, these nodes are visited by the main doWork() loop\n          break;\n        }\n        default: {\n          throw new Error('Unexpected fiber kind: ' + fiber.type.kind);\n        }\n      }\n    } finally {\n      workInProgressFiber = null;\n      workInProgressState = null;\n    }\n  }\n\n  /**\n   * Create a new fiber for the given element. Used when there is no fiber at\n   * a given tree position which can be reused.\n   */\n  mountFiber(elementOrString: React$Node, parent: Fiber | null): Fiber {\n    let fiber: Fiber;\n    // TODO: Support Array of Node's being returned from a component.\n    if (typeof elementOrString === 'object') {\n      const element = CHECKED_CAST<React$MixedElement>(elementOrString);\n      if (typeof element.type === 'function') {\n        const component: Component = CHECKED_CAST<Component>(element.type);\n        const type: FiberType = new FiberTypeComponent(component);\n        fiber = new Fiber(type, (element.props: any), element.key);\n      } else if (typeof element.type === 'string') {\n        invariant(\n          typeof element.type === 'string',\n          'Expected a host component name such as \"div\" or \"span\", got ' +\n            typeof element.type,\n        );\n        const type: FiberType = new FiberTypeHost(\n          CHECKED_CAST<string>(element.type),\n        );\n        invariant(\n          element.props !== null && typeof element.props === 'object',\n          'Expected component props',\n        );\n\n        // const {children, ...props} = element.props;\n        const children = element.props.children;\n        const props = {...element.props};\n        delete props.children;\n\n        fiber = new Fiber(type, props, element.key);\n        this.mountChildren(children, fiber);\n      } else {\n        switch (element.type) {\n          case REACT_FRAGMENT_TYPE: {\n            const type: FiberType = new FiberTypeFragment();\n            fiber = new Fiber(type, (element.props: any), element.key);\n            this.mountChildren(element.props.children, fiber);\n            break;\n          }\n          default: {\n            throw new Error(`Unknown element type ${element.type}`);\n          }\n        }\n      }\n    } else if (typeof elementOrString === 'string') {\n      const type = new FiberTypeText(CHECKED_CAST<string>(elementOrString));\n      fiber = new Fiber(type, {}, null);\n    } else {\n      throw new Error(`Unexpected element type of ${typeof elementOrString}`);\n    }\n    fiber.parent = parent;\n    return fiber;\n  }\n\n  mountChildren(children: React$Node, parentFiber: Fiber): void {\n    if (Array.isArray(children)) {\n      let prev: Fiber | null = null;\n      for (const childElement of CHECKED_CAST<any[]>(children)) {\n        if (childElement == null) {\n          continue;\n        }\n        const child = this.mountFiber(\n          CHECKED_CAST<React$Node>(childElement),\n          parentFiber,\n        );\n        if (prev !== null) {\n          CHECKED_CAST<Fiber>(prev).sibling = child;\n        } else {\n          // set parent to point to first child\n          parentFiber.child = child;\n        }\n        prev = child;\n      }\n    } else if (children != null) {\n      const child = this.mountFiber((children: any), parentFiber);\n      parentFiber.child = child;\n    }\n  }\n\n  /**\n   * Update's @param parent's child to reflect the latest desired output as described by @param element.\n   * This either reuses @param prevChild if present and the component type matches, otherwise it creates\n   * a new Fiber.\n   */\n  reconcileFiber(\n    parent: Fiber,\n    prevChild: Fiber | null,\n    element: React$MixedElement,\n  ): Fiber {\n    if (\n      prevChild !== null &&\n      CHECKED_CAST<Fiber>(prevChild).type === element.type\n    ) {\n      let prevChild: Fiber = CHECKED_CAST<Fiber>(prevChild);\n      // Only host and fragment nodes have to be reconciled: otherwise this is a\n      // function component and its children will be reconciled when they are later\n      // emitted in a host position (ie as a direct result of render)\n      switch (prevChild.type.kind) {\n        case 'host': {\n          invariant(\n            element.props !== null && typeof element.props === 'object',\n            'Expected component props',\n          );\n\n          // const {children, ...props} = element.props;\n          const children = element.props.children;\n          const props = {...element.props};\n          delete props.children;\n\n          prevChild.props = props;\n          this.reconcileChildren(prevChild, (children: any));\n          break;\n        }\n        case 'fragment': {\n          invariant(\n            element.props !== null && typeof element.props === 'object',\n            'Expected component props',\n          );\n\n          const children = element.props.children;\n          this.reconcileChildren(prevChild, (children: any));\n          break;\n        }\n        case 'component': {\n          invariant(\n            element.props !== null && typeof element.props === 'object',\n            'Expected component props',\n          );\n          prevChild.props = element.props;\n          break;\n        }\n        default: {\n          throw new Error(`Unknown node kind ${prevChild.type.kind}`);\n        }\n      }\n      return prevChild;\n    } else {\n      const child = this.mountFiber(element, parent);\n      return child;\n    }\n  }\n\n  /**\n   * Reconciles the @param parent fiber's children nodes.\n   */\n  reconcileChildren(parent: Fiber, children: React$Node): void {\n    const prevChild: Fiber | null = parent.child;\n    if (Array.isArray(children)) {\n      let childrenArray = CHECKED_CAST<React$MixedElement[]>(children);\n      // Fast-path for empty and single-element arrays\n      if (childrenArray.length === 0) {\n        parent.child = null;\n      } else if (childrenArray.length === 1) {\n        parent.child = this.reconcileFiber(parent, prevChild, childrenArray[0]);\n        CHECKED_CAST<Fiber>(parent.child).sibling = null;\n      } else {\n        this.reconcileMultipleChildren(parent, childrenArray);\n      }\n    } else if (typeof children === 'string') {\n      if (\n        prevChild === null ||\n        CHECKED_CAST<Fiber>(prevChild).type.kind !== 'text'\n      ) {\n        const child = new Fiber({kind: 'text', text: children}, {}, null);\n        parent.child = child;\n      } else {\n        CHECKED_CAST<FiberTypeText>(CHECKED_CAST<Fiber>(prevChild).type).text =\n          CHECKED_CAST<string>(children);\n      }\n    } else if (children != null) {\n      parent.child = this.reconcileFiber(\n        parent,\n        prevChild,\n        CHECKED_CAST<React$MixedElement>(children),\n      );\n      CHECKED_CAST<Fiber>(parent.child).sibling = null;\n    } else {\n      parent.child = null;\n      if (prevChild !== null) {\n        CHECKED_CAST<Fiber>(prevChild).parent = null;\n      }\n    }\n  }\n\n  /**\n   * Reconciles the @param parent fiber's children when the children are known to\n   * have 2+ items. Note that the algorithm works for 0+ elements but a fast-path\n   * should be used for 0/1 item cases.\n   */\n  reconcileMultipleChildren(\n    parent: Fiber,\n    children: React$MixedElement[],\n  ): void {\n    invariant(\n      children.length > 1,\n      'Expected children to have multiple elements',\n    );\n    // map existing children by key to make subsequent lookup O(log n)\n    const keyedChildren: any = new Map();\n    let current: Fiber | null = parent.child;\n    while (current !== null) {\n      if (CHECKED_CAST<Fiber>(current).key !== null) {\n        keyedChildren.set(CHECKED_CAST<Fiber>(current).key, current);\n      }\n      current = CHECKED_CAST<Fiber>(current).sibling;\n    }\n    let prev: Fiber | null = null; // previous fiber at this key/index\n    let prevByIndex: Fiber | null = parent.child; // keep track of prev fiber at this index\n    for (const childElement of children) {\n      const prevFiber =\n        (childElement.key != null\n          ? keyedChildren.get(childElement.key)\n          : null) ?? prevByIndex;\n      let child: Fiber;\n      if (prevFiber != null) {\n        child = this.reconcileFiber(parent, prevFiber, childElement);\n      } else {\n        child = this.mountFiber(childElement, parent);\n      }\n      if (prev !== null) {\n        CHECKED_CAST<Fiber>(prev).sibling = child;\n      } else {\n        // set parent to point to first child\n        parent.child = child;\n      }\n      prev = child;\n      prevByIndex =\n        prevByIndex !== null ? CHECKED_CAST<Fiber>(prevByIndex).sibling : null;\n    }\n  }\n}\n\n/**\n * Describes the `type` field of Fiber, which can hold different data depending on the fiber's kind:\n * - Component stores a function of props => element.\n * - Host stores the name of the host component, ie \"div\"\n * - Text stores the text itself.\n */\ntype Component = (props: Props) => React$MixedElement;\n\n// type FiberType =\n//   | {\n//       kind: 'component',\n//       component: Component,\n//     }\n//   | {\n//       kind: 'host',\n//       tag: string,\n//     }\n//   | {\n//       kind: 'text',\n//       text: string,\n//     };\n\nclass FiberType {\n  kind: string;\n  constructor(kind: string) {\n    this.kind = kind;\n  }\n}\n\nclass FiberTypeComponent extends FiberType {\n  component: Component;\n  constructor(component: Component) {\n    super('component');\n    this.component = component;\n  }\n}\nclass FiberTypeHost extends FiberType {\n  tag: string;\n  constructor(tag: string) {\n    super('host');\n    this.tag = tag;\n  }\n}\nclass FiberTypeFragment extends FiberType {\n  constructor() {\n    super('fragment');\n  }\n}\nclass FiberTypeText extends FiberType {\n  text: string;\n  constructor(text: string) {\n    super('text');\n    this.text = text;\n  }\n}\n\n/**\n * The type of component props as seen by the framework, because processing is heterogenous\n * the framework only looks at the identity of prop values and does not otherwise make any\n * assumptions about which props may exist and what their types are.\n */\nexport type Props = any;\n\n/**\n * Data storage for the useState() hook\n */\nclass State<T> {\n  value: T;\n  next: State<T> | null;\n  prev: State<T> | null;\n\n  constructor(value: T) {\n    this.value = value;\n\n    this.next = null;\n    this.prev = null;\n  }\n}\n\n/**\n * Represents a node in the UI tree, and may correspond to a user-defined function component,\n * a host node, or a text node.\n */\nclass Fiber {\n  type: FiberType;\n  props: Props;\n  parent: Fiber | null;\n  child: Fiber | null;\n  sibling: Fiber | null;\n  state: State<mixed> | null;\n  key: React$Key | null;\n\n  constructor(type: FiberType, props: Props, key: React$Key | null) {\n    this.type = type;\n    this.props = props;\n    this.key = key;\n\n    this.parent = null;\n    this.child = null;\n    this.sibling = null;\n    this.state = null;\n  }\n}\n\nexport function jsx(\n  type: React$ElementType,\n  props: Props,\n  key: React$Key | null,\n): React$MixedElement {\n  'inline';\n  return {\n    type: type,\n    props: props,\n    key: key,\n    ref: null,\n  };\n}\n\nexport function Fragment(props: Props): React$MixedElement {\n  'inline';\n  return {\n    type: REACT_FRAGMENT_TYPE,\n    props: props,\n    key: null,\n    ref: null,\n  };\n}\n\nexport function forwardRef(\n  comp: (props: Props, ref: mixed) => React$MixedElement,\n): Component {\n  return (props: Props): React$MixedElement => comp(props, null);\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport type {Props, React$MixedElement} from 'react';\n\nimport {useState} from 'react';\n\nfunction Button(props: Props): React$MixedElement {\n  return (\n    <button id={props.id} onClick={props.onClick}>\n      Click me\n    </button>\n  );\n}\n\nfunction Input(props: Props): React$MixedElement {\n  return (\n    <input\n      id={props.id}\n      type=\"text\"\n      onChange={props.onChange}\n      value={props.value}\n    />\n  );\n}\n\nfunction TextArea(props: Props): React$MixedElement {\n  return <textarea onChange={props.onChange}>{props.value}</textarea>;\n}\n\nfunction Select(props: Props): React$MixedElement {\n  const children = [];\n  for (let i = 0; i < props.options.length; i++) {\n    const option = props.options[i];\n    children.push(\n      <option key={option.value} value={option.value}>\n        {option.label}\n      </option>,\n    );\n  }\n  return <select onChange={props.onChange}>{children}</select>;\n}\n\nfunction Checkbox(props: Props): React$MixedElement {\n  return (\n    <input type=\"checkbox\" checked={props.checked} onChange={props.onChange} />\n  );\n}\n\nfunction Radio(props: Props): React$MixedElement {\n  return (\n    <input type=\"radio\" checked={props.checked} onChange={props.onChange} />\n  );\n}\n\nfunction Slider(props: Props): React$MixedElement {\n  return (\n    <input\n      type=\"range\"\n      min={props.min}\n      max={props.max}\n      step={props.step}\n      value={props.value}\n      onChange={props.onChange}\n    />\n  );\n}\n\nfunction ProgressBar(props: Props): React$MixedElement {\n  return <div style={{width: `${props.progress}%`}}></div>;\n}\n\nfunction Spinner(props: Props): React$MixedElement {\n  return <div className=\"spinner\">Loading...</div>;\n}\n\nfunction Modal(props: Props): React$MixedElement {\n  if (!props.isOpen) {\n    return <div className=\"modal closed\" />;\n  }\n\n  return (\n    <div className=\"modal open\">\n      <div className=\"overlay\" onClick={props.onClose}>\n        X\n      </div>\n      <div className=\"content\">{props.children}</div>\n    </div>\n  );\n}\n\nfunction Tooltip(props: Props): React$MixedElement {\n  if (!props.isOpen) {\n    return <div className=\"tooltip closed\" />;\n  }\n\n  return (\n    <div className=\"tooltip open\">\n      <div className=\"arrow\"></div>\n      <div className=\"content\">{props.children}</div>\n    </div>\n  );\n}\n\nexport default function App(props: Props): React$MixedElement {\n  const [text, setText] = useState<string>('');\n  const [number, setNumber] = useState<number>(0);\n  const [isChecked, setIsChecked] = useState<boolean>(false);\n  const [isSelected, setIsSelected] = useState<boolean>(false);\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n  const [isTooltipOpen, setIsTooltipOpen] = useState<boolean>(true);\n  return (\n    <div>\n      <h1>React Benchmark</h1>\n      <Button id=\"toggle-modal\" onClick={(): void => setIsOpen(!isOpen)}>\n        Toggle Modal\n      </Button>\n      <Modal isOpen={isOpen} onClose={(): void => setIsOpen(false)}>\n        <h2>Modal Content</h2>\n        <p>This is some modal content.</p>\n        <Tooltip\n          isOpen={isTooltipOpen}\n          onClose={(): void => setIsTooltipOpen(false)}>\n          <h3>Tooltip Content</h3>\n          <p>This is some tooltip content.</p>\n        </Tooltip>\n      </Modal>\n      <div>\n        <h2>Form Elements</h2>\n        <Input\n          id=\"update-text\"\n          value={text}\n          onChange={e => setText(e.target.value)}\n        />\n        <TextArea value={text} onChange={e => setText(e.target.value)} />\n        <Select\n          options={[\n            {label: 'Option 1', value: 1},\n            {label: 'Option 2', value: 2},\n            {label: 'Option 3', value: 3},\n          ]}\n          onChange={e => setNumber(parseInt(e.target.value))}\n        />\n        <Checkbox\n          checked={isChecked}\n          onChange={e => setIsChecked(e.target.checked)}\n        />\n        <Radio\n          checked={isSelected}\n          onChange={e => setIsSelected(e.target.checked)}\n        />\n        <Slider\n          min={0}\n          max={100}\n          step={1}\n          value={number}\n          onChange={e => setNumber(parseInt(e.target.value))}\n        />\n        <ProgressBar progress={number} />\n        <Spinner />\n      </div>\n    </div>\n  );\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport * as React from 'react';\nimport App from './App';\nimport {drainMicrotaskQueue} from 'sh/microtask';\n\nfunction printIf1(i: number, str: string): void {\n  if (i === 1) {\n    print('===============================');\n    print(str);\n    print('===============================');\n  }\n}\n\nfunction run(N: number): void {\n  for (let i: number = 1; i <= N; ++i) {\n    const root = React.createRoot();\n    const rootElement = <App />;\n    printIf1(i, root.render(rootElement));\n\n    React.callOnClickOrChange('toggle-modal', null);\n    React.callOnClickOrChange('update-text', {\n      target: {value: '!!!!! some text !!!!!'},\n    });\n    drainMicrotaskQueue();\n    printIf1(i, root.render(rootElement));\n  }\n}\n\nrun(1);\n",null,null,null,null,null,null,null],"mappings":"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"}