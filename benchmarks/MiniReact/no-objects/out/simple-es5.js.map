{"version":3,"names":["M$react_invariant$default","condition","format","Error","M$sh_CHECKED_CAST$default","value","M$sh_microtask$INTERNAL$microtaskQueue","M$sh_microtask$drainMicrotaskQueue","i","length","undefined","M$sh_microtask$queueMicrotask","callback","push","M$sh_fastarray$join","arr","sep","result","e","M$sh_fastarray$reduce","fn","initialValue","acc","M$sh_fastarray$map","output","M$sh_fastarray$includes","searchElement","M$react_index$INTERNAL$padString","str","len","M$react_index$INTERNAL$React$Element","_createClass","type","props","key","ref","_classCallCheck","M$react_index$INTERNAL$REACT_FRAGMENT_TYPE","M$react_index$INTERNAL$workInProgressRoot","M$react_index$INTERNAL$workInProgressFiber","M$react_index$INTERNAL$workInProgressState","M$react_index$INTERNAL$renderPhaseUpdateQueue","M$react_index$createRoot","M$react_index$INTERNAL$Root","M$react_index$useState","initial","root","fiber","state","_workInProgressState","nextState","M$react_index$INTERNAL$State","next","updater","update","M$react_index$INTERNAL$Update","notify","M$react_index$INTERNAL$callbacks","Map","M$react_index$callOnClickOrChange","id","event","get","run","changed","Object","is","element","updateQueue","_this","doWork","render","hasChanges","printFiber","mustRender","mountFiber","fiber2","renderFiber","child","sibling","parent","out","level","kind","tag","padStr","_ref","entries","_JSON$stringify","_ref2","_slicedToArray","propName","propValue","JSON","stringify","printChildren","text","current","component","iterationCount","reconcileFiber","onClick","set","onChange","elementOrString","M$react_index$INTERNAL$FiberTypeComponent","M$react_index$INTERNAL$Fiber","M$react_index$INTERNAL$FiberTypeHost","children","assign","mountChildren","M$react_index$INTERNAL$FiberTypeFragment","M$react_index$INTERNAL$FiberTypeText","parentFiber","Array","isArray","prev","childElement","prevChild","reconcileChildren","childrenArray","reconcileMultipleChildren","keyedChildren","prevByIndex","_ref3","prevFiber","M$react_index$INTERNAL$FiberType","_M$react_index$INTERN","_inherits","_super","_createSuper","_this2","call","_M$react_index$INTERN2","_super2","_this3","_M$react_index$INTERN3","_super3","_M$react_index$INTERN4","_super4","_this4","M$react_index$jsx","M$react_index$Fragment","M$react_index$forwardRef","comp","M$App$INTERNAL$Button","M$App$INTERNAL$Input","M$App$INTERNAL$TextArea","M$App$INTERNAL$Select","options","option","label","M$App$INTERNAL$Checkbox","checked","M$App$INTERNAL$Radio","M$App$INTERNAL$Slider","min","max","step","M$App$INTERNAL$ProgressBar","style","width","progress","M$App$INTERNAL$Spinner","className","M$App$INTERNAL$Modal","isOpen","onClose","M$App$INTERNAL$Tooltip","M$App$default","_M$react_index$useSta","_M$react_index$useSta2","setText","_M$react_index$useSta3","_M$react_index$useSta4","number","setNumber","_M$react_index$useSta5","_M$react_index$useSta6","isChecked","setIsChecked","_M$react_index$useSta7","_M$react_index$useSta8","isSelected","setIsSelected","_M$react_index$useSta9","_M$react_index$useSta10","setIsOpen","_M$react_index$useSta11","_M$react_index$useSta12","isTooltipOpen","setIsTooltipOpen","target","parseInt","M$index$INTERNAL$printIf1","print","M$index$INTERNAL$run","N","rootElement","start","Date","now","end"],"sources":["../src/packages/react/invariant.js","../src/packages/sh/CHECKED_CAST.js","../src/packages/sh/microtask.js","../src/packages/sh/fastarray.js","../src/packages/react/index.js","../src/app/simple/App.js","../src/app/simple/index.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nexport default function invariant(condition: boolean, format: string): void {\n  'inline';\n\n  if (!condition) {\n    throw new Error(format);\n  }\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nexport default function CHECKED_CAST<T>(value: mixed): T {\n  'inline';\n  return (value: any);\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nlet microtaskQueue = [];\n\nexport function drainMicrotaskQueue(): void {\n  for (let i = 0; i < microtaskQueue.length; i++) {\n    microtaskQueue[i]();\n    microtaskQueue[i] = undefined;\n  }\n  microtaskQueue = [];\n}\n\nexport function queueMicrotask(callback: () => void): void {\n  microtaskQueue.push(callback);\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nexport function join(arr: string[], sep: string): string {\n  let result: string = '';\n  for (let i: number = 0, e = arr.length; i < e; ++i) {\n    if (i !== 0) result += sep;\n    result += arr[i];\n  }\n  return result;\n}\n\nexport function reduce<TInput, TAcc>(\n  arr: TInput[],\n  fn: (acc: TAcc, item: TInput, index: number) => TAcc,\n  initialValue: TAcc,\n): TAcc {\n  let acc = initialValue;\n  for (let i = 0, e = arr.length; i < e; ++i) {\n    acc = fn(acc, arr[i], i);\n  }\n  return acc;\n}\n\nexport function map<TInput, TOutput>(\n  arr: TInput[],\n  fn: (item: TInput, index: number) => TOutput,\n): TOutput[] {\n  const output: TOutput[] = [];\n  for (let i = 0, e = arr.length; i < e; ++i) {\n    output.push(fn(arr[i], i));\n  }\n  return output;\n}\n\nexport function includes<T>(arr: T[], searchElement: T): boolean {\n  for (let i = 0, e = arr.length; i < e; ++i) {\n    if (arr[i] === searchElement) {\n      return true;\n    }\n  }\n  return false;\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport invariant from './invariant';\nimport CHECKED_CAST from 'sh/CHECKED_CAST';\nimport {queueMicrotask} from 'sh/microtask';\nimport {join} from 'sh/fastarray';\n\nfunction padString(str: string, len: number): string {\n  let result: string = '';\n  for (let i: number = 0; i < len; i++) {\n    result += str;\n  }\n  return result;\n}\n\n/**\n * The type of an element in React. A React element may be a:\n *\n * - String. These elements are intrinsics that depend on the React renderer\n *   implementation.\n * - React component. See `ComponentType` for more information about its\n *   different variants.\n */\ntype React$ElementType =\n  | string\n  | Component /* TODO: React$AbstractComponent<empty, mixed> */\n  | number /* TODO: symbol */;\n\n/**\n * Type of a React element. React elements are commonly created using JSX\n * literals, which desugar to React.createElement calls (see below).\n */\n// type React$Element<ElementType: React$ElementType> = {|\n//   type: ElementType,\n//   props: Props,\n//   key: React$Key | null,\n//   ref: any,\n// |};\nclass React$Element<ElementType> {\n  type: ElementType;\n  props: Props;\n  key: React$Key | null;\n  ref: any;\n\n  constructor(\n    type: ElementType,\n    props: Props,\n    key: React$Key | null,\n    ref: any,\n  ) {\n    this.type = type;\n    this.props = props;\n    this.key = key;\n    this.ref = ref;\n  }\n}\n\nexport type React$MixedElement = React$Element<React$ElementType>;\ntype React$NodeWithoutArray = React$MixedElement | string | null | void;\nexport type React$Node = React$NodeWithoutArray[] | React$NodeWithoutArray;\n\n/**\n * The type of the key that React uses to determine where items in a new list\n * have moved.\n */\ntype React$Key = string | number;\n\nconst REACT_FRAGMENT_TYPE: number = 1 /* Symbol.for('react.fragment') */;\n\n/* eslint-disable lint/strictly-null, lint/react-state-props-mutation, lint/flow-react-element */\n\n/**\n * The current root\n */\nlet workInProgressRoot: Root | null = null;\n\n/**\n * The currently rendering fiber. Only set when a component is being rendered.\n */\nlet workInProgressFiber: Fiber | null = null;\n\n/**\n * The previous state hook, or null if no state hook has been evaluated yet.\n */\nlet workInProgressState: State<mixed> | null = null;\n\n/**\n * Queue of updates triggered *during* render.\n */\nconst renderPhaseUpdateQueue: Update<mixed>[] = [];\n\n/**\n * Public API to create a new \"root\", this is where React attaches rendering to a host element.\n * In our case we don't actually have a real host, and currently only \"render\" to strings.\n */\nexport function createRoot(): Root {\n  return new Root();\n}\n\n/**\n * Hook to create (on initial render) or access (on update) a state, using the index of the useState\n * call within the component as the identity. Thus conditionally calling this API can cause state to\n * be lost.\n */\nexport function useState<T>(\n  /**\n   * Initial value of the state\n   */\n  initial: T,\n): [T, SetState<T>] {\n  const root: Root = CHECKED_CAST<Root>(workInProgressRoot);\n  const fiber: Fiber = CHECKED_CAST<Fiber>(workInProgressFiber);\n  invariant(\n    fiber !== null && root !== null,\n    'useState() called outside of render',\n  );\n\n  let state: State<T>;\n  const _workInProgressState: State<mixed> | null = workInProgressState;\n  if (_workInProgressState === null) {\n    // Get or initialize the first state on the fiber\n    let nextState = fiber.state;\n    if (nextState === null) {\n      nextState = new State<mixed>(initial);\n      fiber.state = nextState;\n    }\n    // NOTE: in case of a re-render we assume that the hook types match but\n    // can't statically prove this\n    state = CHECKED_CAST<State<T>>(nextState);\n  } else {\n    let nextState = CHECKED_CAST<State<mixed>>(_workInProgressState).next;\n    if (nextState === null) {\n      nextState = new State<mixed>(initial);\n      CHECKED_CAST<State<mixed>>(_workInProgressState).next = nextState;\n    }\n    // NOTE: in case of a re-render we assume that the hook types match but\n    // can't statically prove this\n    state = CHECKED_CAST<State<T>>(nextState);\n  }\n  // NOTE: this should just work because of subtying, State<T> should be subtype of State<mixed>\n  workInProgressState = CHECKED_CAST<State<mixed>>(state);\n  return [\n    // Untyped check that the existing state value has the correct type,\n    // This is safe if components follow the rules of hooks\n    CHECKED_CAST<T>(state.value),\n    (updater: Updater<T>): void => {\n      const update = new Update<mixed>(\n        fiber,\n        CHECKED_CAST<State<mixed>>(state),\n        CHECKED_CAST<Updater<mixed>>(updater),\n      );\n      if (workInProgressFiber !== null) {\n        // called during render\n        renderPhaseUpdateQueue.push(update);\n      } else {\n        root.notify(update);\n      }\n    },\n  ];\n}\n\nconst callbacks = new Map();\nexport function callOnClickOrChange(id: string, event: any): void {\n  const callback = callbacks.get(id);\n  if (callback == null) {\n    throw new Error('No callback registered with id: ' + id);\n  }\n  callback(event);\n}\n\n/**\n * The type of value that may be passed to the setState function (second part of useState return value).\n * - T: the new value\n * - (prev: T) => T: a function to compute the new value from the old value\n */\ntype Updater<T> = T | ((prev: T) => T);\n\n/**\n * The type of the setState function (second element of the array returned by useState).\n */\ntype SetState<T> = (value: Updater<T>) => void;\n\n/**\n * A queued state update.\n */\nclass Update<T> {\n  fiber: Fiber; // used to check state updates that occur during render to see if they came from the current component.\n  state: State<T>;\n  updater: Updater<T>;\n\n  constructor(fiber: Fiber, state: State<T>, updater: Updater<T>) {\n    this.fiber = fiber;\n    this.state = state;\n    this.updater = updater;\n  }\n\n  /**\n   * Process the state update\n   */\n  run(): boolean {\n    const state = this.state;\n    let value: T = state.value;\n    const updater = this.updater;\n    if (typeof updater === 'function') {\n      // NOTE: The type of Updater<T> is meant to expresss `T (not function) | T (function of T => T)`\n      // thus the fact that updater is a function here menas its a function of T => T.\n      const fn = CHECKED_CAST<(prev: T) => T>(updater);\n      value = fn(state.value);\n    } else {\n      // NOTE: The type of Updater<T> is meant to expresss `T (not function) | T (function of T => T)`\n      // thus the fact that updater is *not* a function here means it is a T\n      value = CHECKED_CAST<T>(updater);\n    }\n    const changed = !Object.is(state.value, value);\n    state.value = value;\n    return changed;\n  }\n}\n\nclass Root {\n  /**\n   * The fiber representing the root node (`element`), null until\n   * render is first called.\n   */\n  root: Fiber | null;\n\n  /**\n   * The last rendered root element, initially null.\n   */\n  element: React$MixedElement | null;\n\n  /**\n   * Queue of updates (state changes) to apply on the next render\n   */\n  updateQueue: Update<mixed>[];\n\n  constructor() {\n    this.root = null;\n    this.element = null;\n    this.updateQueue = ([]: Update<mixed>[]);\n  }\n\n  /**\n   * Notify the root that an update is scheduled\n   */\n  notify(update: Update<mixed>): void {\n    this.updateQueue.push(update);\n    if (this.updateQueue.length === 1) {\n      queueMicrotask((): void => {\n        const element = this.element;\n        invariant(\n          element !== null,\n          'Expected an element to be set after rendering',\n        );\n        this.doWork(CHECKED_CAST<React$MixedElement>(element));\n      });\n    }\n  }\n\n  /**\n   * Drive any remaining work to completion and return the rendered result\n   */\n  render(element: React$MixedElement): string {\n    invariant(\n      workInProgressFiber === null && workInProgressState === null,\n      'Cannot render, an existing render is in progress',\n    );\n    const hasChanges = element !== this.element;\n    this.element = element;\n    if (hasChanges) {\n      this.doWork(element);\n    }\n\n    invariant(this.root !== null, 'Expected root to be rendered');\n    const root: Fiber = CHECKED_CAST<Fiber>(this.root);\n    const output: string[] = [];\n    this.printFiber(root, output, 0);\n    return join(output, '\\n');\n  }\n\n  doWork(element: React$MixedElement): void {\n    let mustRender = this.root === null;\n    for (const update of this.updateQueue) {\n      mustRender = update.run() || mustRender;\n    }\n    this.updateQueue = ([]: Update<mixed>[]);\n    if (!mustRender) {\n      return;\n    }\n\n    // Visit the tree in pre-order, rendering each node\n    // and then processing its children\n    // eslint-disable-next-line consistent-this\n    workInProgressRoot = this;\n    let fiber = this.root;\n    if (fiber === null) {\n      fiber = this.mountFiber(element, null);\n      this.root = fiber;\n    }\n    while (fiber !== null) {\n      // Render the fiber, which creates child/sibling nodes\n      let fiber2: Fiber = CHECKED_CAST<Fiber>(fiber);\n      this.renderFiber(fiber2);\n      // advance to the next fiber\n      if (fiber2.child !== null) {\n        fiber = fiber2.child;\n      } else if (fiber2.sibling !== null) {\n        fiber = fiber2.sibling;\n      } else {\n        fiber = fiber2.parent;\n        while (fiber !== null && CHECKED_CAST<Fiber>(fiber).sibling === null) {\n          fiber = CHECKED_CAST<Fiber>(fiber).parent;\n        }\n        if (fiber !== null) {\n          fiber = CHECKED_CAST<Fiber>(fiber).sibling;\n        }\n      }\n    }\n    workInProgressRoot = null;\n  }\n\n  /**\n   * Prints a representation of the output DOM as HTML, emitting HTML snippets to @param out.\n   */\n  printFiber(fiber: Fiber, out: string[], level: number): void {\n    switch (fiber.type.kind) {\n      case 'host': {\n        const tag = CHECKED_CAST<FiberTypeHost>(fiber.type).tag;\n        const padStr = padString(' ', level);\n        let str = padStr + '<' + tag;\n        for (const [propName, propValue] of Object.entries(fiber.props)) {\n          if (propValue == null || typeof propValue === 'function') {\n            continue;\n          }\n\n          str += ` ${propName}=${JSON.stringify(propValue) ?? 'undefined'}`;\n        }\n        if (fiber.child == null) {\n          str += ' />';\n          out.push(str);\n        } else {\n          str += '>';\n          out.push(str);\n          this.printChildren(fiber, out, level + 1);\n          out.push(padStr + '</' + tag + '>');\n        }\n        break;\n      }\n      case 'text': {\n        const text = CHECKED_CAST<FiberTypeText>(fiber.type).text;\n        if (text !== '') {\n          out.push(padString(' ', level) + text);\n        }\n        break;\n      }\n      case 'fragment':\n      case 'component': {\n        this.printChildren(fiber, out, level);\n        break;\n      }\n    }\n  }\n\n  printChildren(fiber: Fiber, out: string[], level: number): void {\n    let current: Fiber | null = fiber.child;\n    while (current !== null) {\n      this.printFiber(CHECKED_CAST<Fiber>(current), out, level);\n      current = CHECKED_CAST<Fiber>(current).sibling;\n    }\n  }\n\n  /**\n   * Renders and reconciles the output of the given @param fiber. Note that this does not *render*\n   * children, it only reconciles the current output of the fiber with the previous children.\n   */\n  renderFiber(fiber: Fiber): void {\n    try {\n      workInProgressFiber = fiber;\n      workInProgressState = null;\n      switch (fiber.type.kind) {\n        case 'component': {\n          invariant(\n            renderPhaseUpdateQueue.length === 0,\n            'Expected no queued render updates',\n          );\n          const render: (props: Props) => React$MixedElement =\n            CHECKED_CAST<FiberTypeComponent>(fiber.type).component;\n          let element = render(fiber.props);\n          let iterationCount: number = 0;\n          while (renderPhaseUpdateQueue.length !== 0) {\n            iterationCount++;\n            invariant(\n              iterationCount < 1000,\n              'Possible infinite loop with setState during render',\n            );\n            let hasChanges = false;\n            for (const update of renderPhaseUpdateQueue) {\n              invariant(\n                update.fiber === fiber,\n                'setState() during render is currently only supported when updating the component ' +\n                  'being rendered. Setting state from another component is not supported.',\n              );\n              hasChanges = update.run() || hasChanges;\n            }\n            renderPhaseUpdateQueue.length = 0;\n            if (!hasChanges) {\n              break;\n            }\n            element = render(fiber.props);\n          }\n          fiber.child = this.reconcileFiber(fiber, fiber.child, element);\n          break;\n        }\n        case 'host': {\n          const id = fiber.props.id;\n          if (id != null) {\n            const onClick = fiber.props.onClick;\n            if (onClick != null) {\n              callbacks.set(id, onClick);\n            }\n            const onChange = fiber.props.onChange;\n            if (onChange != null) {\n              callbacks.set(id, onChange);\n            }\n          }\n          break;\n        }\n        case 'fragment':\n        case 'text': {\n          // Nothing to reconcile, these nodes are visited by the main doWork() loop\n          break;\n        }\n        default: {\n          throw new Error('Unexpected fiber kind: ' + fiber.type.kind);\n        }\n      }\n    } finally {\n      workInProgressFiber = null;\n      workInProgressState = null;\n    }\n  }\n\n  /**\n   * Create a new fiber for the given element. Used when there is no fiber at\n   * a given tree position which can be reused.\n   */\n  mountFiber(elementOrString: React$Node, parent: Fiber | null): Fiber {\n    let fiber: Fiber;\n    // TODO: Support Array of Node's being returned from a component.\n    if (typeof elementOrString === 'object') {\n      const element = CHECKED_CAST<React$MixedElement>(elementOrString);\n      if (typeof element.type === 'function') {\n        const component: Component = CHECKED_CAST<Component>(element.type);\n        const type: FiberType = new FiberTypeComponent(component);\n        fiber = new Fiber(type, (element.props: any), element.key);\n      } else if (typeof element.type === 'string') {\n        invariant(\n          typeof element.type === 'string',\n          'Expected a host component name such as \"div\" or \"span\", got ' +\n            typeof element.type,\n        );\n        const type: FiberType = new FiberTypeHost(\n          CHECKED_CAST<string>(element.type),\n        );\n        invariant(\n          element.props !== null && typeof element.props === 'object',\n          'Expected component props',\n        );\n\n        // const {children, ...props} = element.props;\n        const children = element.props.children;\n        const props = {...element.props};\n        delete props.children;\n\n        fiber = new Fiber(type, props, element.key);\n        this.mountChildren(children, fiber);\n      } else {\n        switch (element.type) {\n          case REACT_FRAGMENT_TYPE: {\n            const type: FiberType = new FiberTypeFragment();\n            fiber = new Fiber(type, (element.props: any), element.key);\n            this.mountChildren(element.props.children, fiber);\n            break;\n          }\n          default: {\n            throw new Error(`Unknown element type ${element.type}`);\n          }\n        }\n      }\n    } else if (typeof elementOrString === 'string') {\n      const type = new FiberTypeText(CHECKED_CAST<string>(elementOrString));\n      fiber = new Fiber(type, {}, null);\n    } else {\n      throw new Error(`Unexpected element type of ${typeof elementOrString}`);\n    }\n    fiber.parent = parent;\n    return fiber;\n  }\n\n  mountChildren(children: React$Node, parentFiber: Fiber): void {\n    if (Array.isArray(children)) {\n      let prev: Fiber | null = null;\n      for (const childElement of CHECKED_CAST<any[]>(children)) {\n        if (childElement == null) {\n          continue;\n        }\n        const child = this.mountFiber(\n          CHECKED_CAST<React$Node>(childElement),\n          parentFiber,\n        );\n        if (prev !== null) {\n          CHECKED_CAST<Fiber>(prev).sibling = child;\n        } else {\n          // set parent to point to first child\n          parentFiber.child = child;\n        }\n        prev = child;\n      }\n    } else if (children != null) {\n      const child = this.mountFiber((children: any), parentFiber);\n      parentFiber.child = child;\n    }\n  }\n\n  /**\n   * Update's @param parent's child to reflect the latest desired output as described by @param element.\n   * This either reuses @param prevChild if present and the component type matches, otherwise it creates\n   * a new Fiber.\n   */\n  reconcileFiber(\n    parent: Fiber,\n    prevChild: Fiber | null,\n    element: React$MixedElement,\n  ): Fiber {\n    if (\n      prevChild !== null &&\n      CHECKED_CAST<Fiber>(prevChild).type === element.type\n    ) {\n      let prevChild: Fiber = CHECKED_CAST<Fiber>(prevChild);\n      // Only host and fragment nodes have to be reconciled: otherwise this is a\n      // function component and its children will be reconciled when they are later\n      // emitted in a host position (ie as a direct result of render)\n      switch (prevChild.type.kind) {\n        case 'host': {\n          invariant(\n            element.props !== null && typeof element.props === 'object',\n            'Expected component props',\n          );\n\n          // const {children, ...props} = element.props;\n          const children = element.props.children;\n          const props = {...element.props};\n          delete props.children;\n\n          prevChild.props = props;\n          this.reconcileChildren(prevChild, (children: any));\n          break;\n        }\n        case 'fragment': {\n          invariant(\n            element.props !== null && typeof element.props === 'object',\n            'Expected component props',\n          );\n\n          const children = element.props.children;\n          this.reconcileChildren(prevChild, (children: any));\n          break;\n        }\n        case 'component': {\n          invariant(\n            element.props !== null && typeof element.props === 'object',\n            'Expected component props',\n          );\n          prevChild.props = element.props;\n          break;\n        }\n        default: {\n          throw new Error(`Unknown node kind ${prevChild.type.kind}`);\n        }\n      }\n      return prevChild;\n    } else {\n      const child = this.mountFiber(element, parent);\n      return child;\n    }\n  }\n\n  /**\n   * Reconciles the @param parent fiber's children nodes.\n   */\n  reconcileChildren(parent: Fiber, children: React$Node): void {\n    const prevChild: Fiber | null = parent.child;\n    if (Array.isArray(children)) {\n      let childrenArray = CHECKED_CAST<React$MixedElement[]>(children);\n      // Fast-path for empty and single-element arrays\n      if (childrenArray.length === 0) {\n        parent.child = null;\n      } else if (childrenArray.length === 1) {\n        parent.child = this.reconcileFiber(parent, prevChild, childrenArray[0]);\n        CHECKED_CAST<Fiber>(parent.child).sibling = null;\n      } else {\n        this.reconcileMultipleChildren(parent, childrenArray);\n      }\n    } else if (typeof children === 'string') {\n      if (\n        prevChild === null ||\n        CHECKED_CAST<Fiber>(prevChild).type.kind !== 'text'\n      ) {\n        const type = new FiberTypeText(CHECKED_CAST<string>(children));\n        const child = new Fiber(type, {}, null);\n        parent.child = child;\n      } else {\n        CHECKED_CAST<FiberTypeText>(CHECKED_CAST<Fiber>(prevChild).type).text =\n          CHECKED_CAST<string>(children);\n      }\n    } else if (children != null) {\n      parent.child = this.reconcileFiber(\n        parent,\n        prevChild,\n        CHECKED_CAST<React$MixedElement>(children),\n      );\n      CHECKED_CAST<Fiber>(parent.child).sibling = null;\n    } else {\n      parent.child = null;\n      if (prevChild !== null) {\n        CHECKED_CAST<Fiber>(prevChild).parent = null;\n      }\n    }\n  }\n\n  /**\n   * Reconciles the @param parent fiber's children when the children are known to\n   * have 2+ items. Note that the algorithm works for 0+ elements but a fast-path\n   * should be used for 0/1 item cases.\n   */\n  reconcileMultipleChildren(\n    parent: Fiber,\n    children: React$MixedElement[],\n  ): void {\n    invariant(\n      children.length > 1,\n      'Expected children to have multiple elements',\n    );\n    // map existing children by key to make subsequent lookup O(log n)\n    const keyedChildren: any = new Map();\n    let current: Fiber | null = parent.child;\n    while (current !== null) {\n      if (CHECKED_CAST<Fiber>(current).key !== null) {\n        keyedChildren.set(CHECKED_CAST<Fiber>(current).key, current);\n      }\n      current = CHECKED_CAST<Fiber>(current).sibling;\n    }\n    let prev: Fiber | null = null; // previous fiber at this key/index\n    let prevByIndex: Fiber | null = parent.child; // keep track of prev fiber at this index\n    for (const childElement of children) {\n      const prevFiber =\n        (childElement.key != null\n          ? keyedChildren.get(childElement.key)\n          : null) ?? prevByIndex;\n      let child: Fiber;\n      if (prevFiber != null) {\n        child = this.reconcileFiber(parent, prevFiber, childElement);\n      } else {\n        child = this.mountFiber(childElement, parent);\n      }\n      if (prev !== null) {\n        CHECKED_CAST<Fiber>(prev).sibling = child;\n      } else {\n        // set parent to point to first child\n        parent.child = child;\n      }\n      prev = child;\n      prevByIndex =\n        prevByIndex !== null ? CHECKED_CAST<Fiber>(prevByIndex).sibling : null;\n    }\n  }\n}\n\n/**\n * Describes the `type` field of Fiber, which can hold different data depending on the fiber's kind:\n * - Component stores a function of props => element.\n * - Host stores the name of the host component, ie \"div\"\n * - Text stores the text itself.\n */\ntype Component = (props: Props) => React$MixedElement;\n\n// type FiberType =\n//   | {\n//       kind: 'component',\n//       component: Component,\n//     }\n//   | {\n//       kind: 'host',\n//       tag: string,\n//     }\n//   | {\n//       kind: 'text',\n//       text: string,\n//     };\n\nclass FiberType {\n  kind: string;\n  constructor(kind: string) {\n    this.kind = kind;\n  }\n}\n\nclass FiberTypeComponent extends FiberType {\n  component: Component;\n  constructor(component: Component) {\n    super('component');\n    this.component = component;\n  }\n}\nclass FiberTypeHost extends FiberType {\n  tag: string;\n  constructor(tag: string) {\n    super('host');\n    this.tag = tag;\n  }\n}\nclass FiberTypeFragment extends FiberType {\n  constructor() {\n    super('fragment');\n  }\n}\nclass FiberTypeText extends FiberType {\n  text: string;\n  constructor(text: string) {\n    super('text');\n    this.text = text;\n  }\n}\n\n/**\n * The type of component props as seen by the framework, because processing is heterogenous\n * the framework only looks at the identity of prop values and does not otherwise make any\n * assumptions about which props may exist and what their types are.\n */\nexport type Props = any;\n\n/**\n * Data storage for the useState() hook\n */\nclass State<T> {\n  value: T;\n  next: State<T> | null;\n  prev: State<T> | null;\n\n  constructor(value: T) {\n    this.value = value;\n\n    this.next = null;\n    this.prev = null;\n  }\n}\n\n/**\n * Represents a node in the UI tree, and may correspond to a user-defined function component,\n * a host node, or a text node.\n */\nclass Fiber {\n  type: FiberType;\n  props: Props;\n  parent: Fiber | null;\n  child: Fiber | null;\n  sibling: Fiber | null;\n  state: State<mixed> | null;\n  key: React$Key | null;\n\n  constructor(type: FiberType, props: Props, key: React$Key | null) {\n    this.type = type;\n    this.props = props;\n    this.key = key;\n\n    this.parent = null;\n    this.child = null;\n    this.sibling = null;\n    this.state = null;\n  }\n}\n\nexport function jsx(\n  type: React$ElementType,\n  props: Props,\n  key: React$Key | null,\n): React$MixedElement {\n  'inline';\n  return new React$Element<React$ElementType>(type, props, key, null);\n}\n\nexport function Fragment(props: Props): React$MixedElement {\n  'inline';\n  return new React$Element<React$ElementType>(REACT_FRAGMENT_TYPE, props, null, null);\n}\n\nexport function forwardRef(\n  comp: (props: Props, ref: mixed) => React$MixedElement,\n): Component {\n  return (props: Props): React$MixedElement => comp(props, null);\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport type {Props, React$MixedElement} from 'react';\n\nimport {useState} from 'react';\n\nfunction Button(props: Props): React$MixedElement {\n  return (\n    <button id={props.id} onClick={props.onClick}>\n      Click me\n    </button>\n  );\n}\n\nfunction Input(props: Props): React$MixedElement {\n  return (\n    <input\n      id={props.id}\n      type=\"text\"\n      onChange={props.onChange}\n      value={props.value}\n    />\n  );\n}\n\nfunction TextArea(props: Props): React$MixedElement {\n  return <textarea onChange={props.onChange}>{props.value}</textarea>;\n}\n\nfunction Select(props: Props): React$MixedElement {\n  const children = [];\n  for (let i = 0; i < props.options.length; i++) {\n    const option = props.options[i];\n    children.push(\n      <option key={option.value} value={option.value}>\n        {option.label}\n      </option>,\n    );\n  }\n  return <select onChange={props.onChange}>{children}</select>;\n}\n\nfunction Checkbox(props: Props): React$MixedElement {\n  return (\n    <input type=\"checkbox\" checked={props.checked} onChange={props.onChange} />\n  );\n}\n\nfunction Radio(props: Props): React$MixedElement {\n  return (\n    <input type=\"radio\" checked={props.checked} onChange={props.onChange} />\n  );\n}\n\nfunction Slider(props: Props): React$MixedElement {\n  return (\n    <input\n      type=\"range\"\n      min={props.min}\n      max={props.max}\n      step={props.step}\n      value={props.value}\n      onChange={props.onChange}\n    />\n  );\n}\n\nfunction ProgressBar(props: Props): React$MixedElement {\n  return <div style={{width: `${props.progress}%`}}></div>;\n}\n\nfunction Spinner(props: Props): React$MixedElement {\n  return <div className=\"spinner\">Loading...</div>;\n}\n\nfunction Modal(props: Props): React$MixedElement {\n  if (!props.isOpen) {\n    return <div className=\"modal closed\" />;\n  }\n\n  return (\n    <div className=\"modal open\">\n      <div className=\"overlay\" onClick={props.onClose}>\n        X\n      </div>\n      <div className=\"content\">{props.children}</div>\n    </div>\n  );\n}\n\nfunction Tooltip(props: Props): React$MixedElement {\n  if (!props.isOpen) {\n    return <div className=\"tooltip closed\" />;\n  }\n\n  return (\n    <div className=\"tooltip open\">\n      <div className=\"arrow\"></div>\n      <div className=\"content\">{props.children}</div>\n    </div>\n  );\n}\n\nexport default function App(props: Props): React$MixedElement {\n  const [text, setText] = useState<string>('');\n  const [number, setNumber] = useState<number>(0);\n  const [isChecked, setIsChecked] = useState<boolean>(false);\n  const [isSelected, setIsSelected] = useState<boolean>(false);\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n  const [isTooltipOpen, setIsTooltipOpen] = useState<boolean>(true);\n  return (\n    <div>\n      <h1>React Benchmark</h1>\n      <Button id=\"toggle-modal\" onClick={(): void => setIsOpen(!isOpen)}>\n        Toggle Modal\n      </Button>\n      <Modal isOpen={isOpen} onClose={(): void => setIsOpen(false)}>\n        <h2>Modal Content</h2>\n        <p>This is some modal content.</p>\n        <Tooltip\n          isOpen={isTooltipOpen}\n          onClose={(): void => setIsTooltipOpen(false)}>\n          <h3>Tooltip Content</h3>\n          <p>This is some tooltip content.</p>\n        </Tooltip>\n      </Modal>\n      <div>\n        <h2>Form Elements</h2>\n        <Input\n          id=\"update-text\"\n          value={text}\n          onChange={e => setText(e.target.value)}\n        />\n        <TextArea value={text} onChange={e => setText(e.target.value)} />\n        <Select\n          options={[\n            {label: 'Option 1', value: 1},\n            {label: 'Option 2', value: 2},\n            {label: 'Option 3', value: 3},\n          ]}\n          onChange={e => setNumber(parseInt(e.target.value))}\n        />\n        <Checkbox\n          checked={isChecked}\n          onChange={e => setIsChecked(e.target.checked)}\n        />\n        <Radio\n          checked={isSelected}\n          onChange={e => setIsSelected(e.target.checked)}\n        />\n        <Slider\n          min={0}\n          max={100}\n          step={1}\n          value={number}\n          onChange={e => setNumber(parseInt(e.target.value))}\n        />\n        <ProgressBar progress={number} />\n        <Spinner />\n      </div>\n    </div>\n  );\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport * as React from 'react';\nimport App from './App';\nimport {drainMicrotaskQueue} from 'sh/microtask';\n\nfunction printIf1(i: number, str: string): void {\n  if (i === 1) {\n    print('===============================');\n    print(str);\n    print('===============================');\n  }\n}\n\nfunction run(N: number): void {\n  // Warmup\n  for (let i: number = 1; i <= 100; ++i) {\n    const root = React.createRoot();\n    const rootElement = <App />;\n    printIf1(i, root.render(rootElement));\n\n    React.callOnClickOrChange('toggle-modal', null);\n    React.callOnClickOrChange('update-text', {\n      target: {value: '!!!!! some text !!!!!'},\n    });\n    drainMicrotaskQueue();\n    printIf1(i, root.render(rootElement));\n  }\n\n  // Benchmark\n  var start = Date.now();\n  for (let i: number = 1; i <= N; ++i) {\n    const root = React.createRoot();\n    const rootElement = <App />;\n    root.render(rootElement);\n\n    React.callOnClickOrChange('toggle-modal', null);\n    React.callOnClickOrChange('update-text', {\n      target: {value: '!!!!! some text !!!!!'},\n    });\n    drainMicrotaskQueue();\n    root.render(rootElement);\n  }\n  var end = Date.now();\n  print(`${end - start} ms`);\n}\n\nrun(10_000);\n"],"mappings":"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"}