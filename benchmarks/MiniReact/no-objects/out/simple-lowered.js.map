{"version":3,"names":["M$react_invariant$default","condition","format","Error","M$sh_CHECKED_CAST$default","value","M$sh_microtask$INTERNAL$microtaskQueue","M$sh_microtask$drainMicrotaskQueue","i","length","undefined","M$sh_microtask$queueMicrotask","callback","push","M$sh_fastarray$join","arr","sep","result","e","M$sh_fastarray$reduce","fn","initialValue","acc","M$sh_fastarray$map","output","M$sh_fastarray$includes","searchElement","M$react_index$INTERNAL$padString","str","len","M$react_index$INTERNAL$React$Element","_createClass","type","props","key","ref","M$react_index$INTERNAL$REACT_FRAGMENT_TYPE","M$react_index$INTERNAL$workInProgressRoot","M$react_index$INTERNAL$workInProgressFiber","M$react_index$INTERNAL$workInProgressState","M$react_index$INTERNAL$renderPhaseUpdateQueue","M$react_index$createRoot","M$react_index$INTERNAL$Root","M$react_index$useState","initial","root","fiber","state","_workInProgressState","nextState","M$react_index$INTERNAL$State","next","updater","update","M$react_index$INTERNAL$Update","notify","M$react_index$INTERNAL$callbacks","Map","M$react_index$callOnClickOrChange","id","event","get","_proto","prototype","run","changed","Object","is","element","updateQueue","_proto2","doWork","render","hasChanges","printFiber","mustRender","mountFiber","fiber2","renderFiber","child","sibling","parent","out","level","kind","tag","padStr","propName","propValue","entries","JSON","stringify","printChildren","text","current","component","iterationCount","reconcileFiber","onClick","set","onChange","elementOrString","M$react_index$INTERNAL$FiberTypeComponent","M$react_index$INTERNAL$Fiber","M$react_index$INTERNAL$FiberTypeHost","children","mountChildren","M$react_index$INTERNAL$FiberTypeFragment","M$react_index$INTERNAL$FiberTypeText","parentFiber","Array","isArray","prev","childElement","prevChild","reconcileChildren","childrenArray","reconcileMultipleChildren","keyedChildren","prevByIndex","prevFiber","M$react_index$INTERNAL$FiberType","_M$react_index$INTERN","_inherits","_this","call","_M$react_index$INTERN2","_this2","_M$react_index$INTERN3","_M$react_index$INTERN4","_this3","M$react_index$jsx","M$react_index$Fragment","M$react_index$forwardRef","comp","M$App$INTERNAL$Button","M$App$INTERNAL$Input","M$App$INTERNAL$TextArea","M$App$INTERNAL$Select","options","option","label","M$App$INTERNAL$Checkbox","checked","M$App$INTERNAL$Radio","M$App$INTERNAL$Slider","min","max","step","M$App$INTERNAL$ProgressBar","style","width","progress","M$App$INTERNAL$Spinner","className","M$App$INTERNAL$Modal","isOpen","onClose","M$App$INTERNAL$Tooltip","M$App$default","setText","number","setNumber","isChecked","setIsChecked","isSelected","setIsSelected","setIsOpen","isTooltipOpen","setIsTooltipOpen","target","parseInt","M$index$INTERNAL$printIf1","print","M$index$INTERNAL$run","N","rootElement","start","Date","now","end"],"sources":["../src/packages/react/invariant.js","../src/packages/sh/CHECKED_CAST.js","../src/packages/sh/microtask.js","../src/packages/sh/fastarray.js","../src/packages/react/index.js","../src/app/simple/App.js","../src/app/simple/index.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nexport default function invariant(condition: boolean, format: string): void {\n  'inline';\n\n  if (!condition) {\n    throw new Error(format);\n  }\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nexport default function CHECKED_CAST<T>(value: mixed): T {\n  'inline';\n  return (value: any);\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nlet microtaskQueue = [];\n\nexport function drainMicrotaskQueue(): void {\n  for (let i = 0; i < microtaskQueue.length; i++) {\n    microtaskQueue[i]();\n    microtaskQueue[i] = undefined;\n  }\n  microtaskQueue = [];\n}\n\nexport function queueMicrotask(callback: () => void): void {\n  microtaskQueue.push(callback);\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nexport function join(arr: string[], sep: string): string {\n  let result: string = '';\n  for (let i: number = 0, e = arr.length; i < e; ++i) {\n    if (i !== 0) result += sep;\n    result += arr[i];\n  }\n  return result;\n}\n\nexport function reduce<TInput, TAcc>(\n  arr: TInput[],\n  fn: (acc: TAcc, item: TInput, index: number) => TAcc,\n  initialValue: TAcc,\n): TAcc {\n  let acc = initialValue;\n  for (let i = 0, e = arr.length; i < e; ++i) {\n    acc = fn(acc, arr[i], i);\n  }\n  return acc;\n}\n\nexport function map<TInput, TOutput>(\n  arr: TInput[],\n  fn: (item: TInput, index: number) => TOutput,\n): TOutput[] {\n  const output: TOutput[] = [];\n  for (let i = 0, e = arr.length; i < e; ++i) {\n    output.push(fn(arr[i], i));\n  }\n  return output;\n}\n\nexport function includes<T>(arr: T[], searchElement: T): boolean {\n  for (let i = 0, e = arr.length; i < e; ++i) {\n    if (arr[i] === searchElement) {\n      return true;\n    }\n  }\n  return false;\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport invariant from './invariant';\nimport CHECKED_CAST from 'sh/CHECKED_CAST';\nimport {queueMicrotask} from 'sh/microtask';\nimport {join} from 'sh/fastarray';\n\nfunction padString(str: string, len: number): string {\n  let result: string = '';\n  for (let i: number = 0; i < len; i++) {\n    result += str;\n  }\n  return result;\n}\n\n/**\n * The type of an element in React. A React element may be a:\n *\n * - String. These elements are intrinsics that depend on the React renderer\n *   implementation.\n * - React component. See `ComponentType` for more information about its\n *   different variants.\n */\ntype React$ElementType =\n  | string\n  | Component /* TODO: React$AbstractComponent<empty, mixed> */\n  | number /* TODO: symbol */;\n\n/**\n * Type of a React element. React elements are commonly created using JSX\n * literals, which desugar to React.createElement calls (see below).\n */\n// type React$Element<ElementType: React$ElementType> = {|\n//   type: ElementType,\n//   props: Props,\n//   key: React$Key | null,\n//   ref: any,\n// |};\nclass React$Element<ElementType> {\n  type: ElementType;\n  props: Props;\n  key: React$Key | null;\n  ref: any;\n\n  constructor(\n    type: ElementType,\n    props: Props,\n    key: React$Key | null,\n    ref: any,\n  ) {\n    this.type = type;\n    this.props = props;\n    this.key = key;\n    this.ref = ref;\n  }\n}\n\nexport type React$MixedElement = React$Element<React$ElementType>;\ntype React$NodeWithoutArray = React$MixedElement | string | null | void;\nexport type React$Node = React$NodeWithoutArray[] | React$NodeWithoutArray;\n\n/**\n * The type of the key that React uses to determine where items in a new list\n * have moved.\n */\ntype React$Key = string | number;\n\nconst REACT_FRAGMENT_TYPE: number = 1 /* Symbol.for('react.fragment') */;\n\n/* eslint-disable lint/strictly-null, lint/react-state-props-mutation, lint/flow-react-element */\n\n/**\n * The current root\n */\nlet workInProgressRoot: Root | null = null;\n\n/**\n * The currently rendering fiber. Only set when a component is being rendered.\n */\nlet workInProgressFiber: Fiber | null = null;\n\n/**\n * The previous state hook, or null if no state hook has been evaluated yet.\n */\nlet workInProgressState: State<mixed> | null = null;\n\n/**\n * Queue of updates triggered *during* render.\n */\nconst renderPhaseUpdateQueue: Update<mixed>[] = [];\n\n/**\n * Public API to create a new \"root\", this is where React attaches rendering to a host element.\n * In our case we don't actually have a real host, and currently only \"render\" to strings.\n */\nexport function createRoot(): Root {\n  return new Root();\n}\n\n/**\n * Hook to create (on initial render) or access (on update) a state, using the index of the useState\n * call within the component as the identity. Thus conditionally calling this API can cause state to\n * be lost.\n */\nexport function useState<T>(\n  /**\n   * Initial value of the state\n   */\n  initial: T,\n): [T, SetState<T>] {\n  const root: Root = CHECKED_CAST<Root>(workInProgressRoot);\n  const fiber: Fiber = CHECKED_CAST<Fiber>(workInProgressFiber);\n  invariant(\n    fiber !== null && root !== null,\n    'useState() called outside of render',\n  );\n\n  let state: State<T>;\n  const _workInProgressState: State<mixed> | null = workInProgressState;\n  if (_workInProgressState === null) {\n    // Get or initialize the first state on the fiber\n    let nextState = fiber.state;\n    if (nextState === null) {\n      nextState = new State<mixed>(initial);\n      fiber.state = nextState;\n    }\n    // NOTE: in case of a re-render we assume that the hook types match but\n    // can't statically prove this\n    state = CHECKED_CAST<State<T>>(nextState);\n  } else {\n    let nextState = CHECKED_CAST<State<mixed>>(_workInProgressState).next;\n    if (nextState === null) {\n      nextState = new State<mixed>(initial);\n      CHECKED_CAST<State<mixed>>(_workInProgressState).next = nextState;\n    }\n    // NOTE: in case of a re-render we assume that the hook types match but\n    // can't statically prove this\n    state = CHECKED_CAST<State<T>>(nextState);\n  }\n  // NOTE: this should just work because of subtying, State<T> should be subtype of State<mixed>\n  workInProgressState = CHECKED_CAST<State<mixed>>(state);\n  return [\n    // Untyped check that the existing state value has the correct type,\n    // This is safe if components follow the rules of hooks\n    CHECKED_CAST<T>(state.value),\n    (updater: Updater<T>): void => {\n      const update = new Update<mixed>(\n        fiber,\n        CHECKED_CAST<State<mixed>>(state),\n        CHECKED_CAST<Updater<mixed>>(updater),\n      );\n      if (workInProgressFiber !== null) {\n        // called during render\n        renderPhaseUpdateQueue.push(update);\n      } else {\n        root.notify(update);\n      }\n    },\n  ];\n}\n\nconst callbacks = new Map();\nexport function callOnClickOrChange(id: string, event: any): void {\n  const callback = callbacks.get(id);\n  if (callback == null) {\n    throw new Error('No callback registered with id: ' + id);\n  }\n  callback(event);\n}\n\n/**\n * The type of value that may be passed to the setState function (second part of useState return value).\n * - T: the new value\n * - (prev: T) => T: a function to compute the new value from the old value\n */\ntype Updater<T> = T | ((prev: T) => T);\n\n/**\n * The type of the setState function (second element of the array returned by useState).\n */\ntype SetState<T> = (value: Updater<T>) => void;\n\n/**\n * A queued state update.\n */\nclass Update<T> {\n  fiber: Fiber; // used to check state updates that occur during render to see if they came from the current component.\n  state: State<T>;\n  updater: Updater<T>;\n\n  constructor(fiber: Fiber, state: State<T>, updater: Updater<T>) {\n    this.fiber = fiber;\n    this.state = state;\n    this.updater = updater;\n  }\n\n  /**\n   * Process the state update\n   */\n  run(): boolean {\n    const state = this.state;\n    let value: T = state.value;\n    const updater = this.updater;\n    if (typeof updater === 'function') {\n      // NOTE: The type of Updater<T> is meant to expresss `T (not function) | T (function of T => T)`\n      // thus the fact that updater is a function here menas its a function of T => T.\n      const fn = CHECKED_CAST<(prev: T) => T>(updater);\n      value = fn(state.value);\n    } else {\n      // NOTE: The type of Updater<T> is meant to expresss `T (not function) | T (function of T => T)`\n      // thus the fact that updater is *not* a function here means it is a T\n      value = CHECKED_CAST<T>(updater);\n    }\n    const changed = !Object.is(state.value, value);\n    state.value = value;\n    return changed;\n  }\n}\n\nclass Root {\n  /**\n   * The fiber representing the root node (`element`), null until\n   * render is first called.\n   */\n  root: Fiber | null;\n\n  /**\n   * The last rendered root element, initially null.\n   */\n  element: React$MixedElement | null;\n\n  /**\n   * Queue of updates (state changes) to apply on the next render\n   */\n  updateQueue: Update<mixed>[];\n\n  constructor() {\n    this.root = null;\n    this.element = null;\n    this.updateQueue = ([]: Update<mixed>[]);\n  }\n\n  /**\n   * Notify the root that an update is scheduled\n   */\n  notify(update: Update<mixed>): void {\n    this.updateQueue.push(update);\n    if (this.updateQueue.length === 1) {\n      queueMicrotask((): void => {\n        const element = this.element;\n        invariant(\n          element !== null,\n          'Expected an element to be set after rendering',\n        );\n        this.doWork(CHECKED_CAST<React$MixedElement>(element));\n      });\n    }\n  }\n\n  /**\n   * Drive any remaining work to completion and return the rendered result\n   */\n  render(element: React$MixedElement): string {\n    invariant(\n      workInProgressFiber === null && workInProgressState === null,\n      'Cannot render, an existing render is in progress',\n    );\n    const hasChanges = element !== this.element;\n    this.element = element;\n    if (hasChanges) {\n      this.doWork(element);\n    }\n\n    invariant(this.root !== null, 'Expected root to be rendered');\n    const root: Fiber = CHECKED_CAST<Fiber>(this.root);\n    const output: string[] = [];\n    this.printFiber(root, output, 0);\n    return join(output, '\\n');\n  }\n\n  doWork(element: React$MixedElement): void {\n    let mustRender = this.root === null;\n    for (const update of this.updateQueue) {\n      mustRender = update.run() || mustRender;\n    }\n    this.updateQueue = ([]: Update<mixed>[]);\n    if (!mustRender) {\n      return;\n    }\n\n    // Visit the tree in pre-order, rendering each node\n    // and then processing its children\n    // eslint-disable-next-line consistent-this\n    workInProgressRoot = this;\n    let fiber = this.root;\n    if (fiber === null) {\n      fiber = this.mountFiber(element, null);\n      this.root = fiber;\n    }\n    while (fiber !== null) {\n      // Render the fiber, which creates child/sibling nodes\n      let fiber2: Fiber = CHECKED_CAST<Fiber>(fiber);\n      this.renderFiber(fiber2);\n      // advance to the next fiber\n      if (fiber2.child !== null) {\n        fiber = fiber2.child;\n      } else if (fiber2.sibling !== null) {\n        fiber = fiber2.sibling;\n      } else {\n        fiber = fiber2.parent;\n        while (fiber !== null && CHECKED_CAST<Fiber>(fiber).sibling === null) {\n          fiber = CHECKED_CAST<Fiber>(fiber).parent;\n        }\n        if (fiber !== null) {\n          fiber = CHECKED_CAST<Fiber>(fiber).sibling;\n        }\n      }\n    }\n    workInProgressRoot = null;\n  }\n\n  /**\n   * Prints a representation of the output DOM as HTML, emitting HTML snippets to @param out.\n   */\n  printFiber(fiber: Fiber, out: string[], level: number): void {\n    switch (fiber.type.kind) {\n      case 'host': {\n        const tag = CHECKED_CAST<FiberTypeHost>(fiber.type).tag;\n        const padStr = padString(' ', level);\n        let str = padStr + '<' + tag;\n        for (const [propName, propValue] of Object.entries(fiber.props)) {\n          if (propValue == null || typeof propValue === 'function') {\n            continue;\n          }\n\n          str += ` ${propName}=${JSON.stringify(propValue) ?? 'undefined'}`;\n        }\n        if (fiber.child == null) {\n          str += ' />';\n          out.push(str);\n        } else {\n          str += '>';\n          out.push(str);\n          this.printChildren(fiber, out, level + 1);\n          out.push(padStr + '</' + tag + '>');\n        }\n        break;\n      }\n      case 'text': {\n        const text = CHECKED_CAST<FiberTypeText>(fiber.type).text;\n        if (text !== '') {\n          out.push(padString(' ', level) + text);\n        }\n        break;\n      }\n      case 'fragment':\n      case 'component': {\n        this.printChildren(fiber, out, level);\n        break;\n      }\n    }\n  }\n\n  printChildren(fiber: Fiber, out: string[], level: number): void {\n    let current: Fiber | null = fiber.child;\n    while (current !== null) {\n      this.printFiber(CHECKED_CAST<Fiber>(current), out, level);\n      current = CHECKED_CAST<Fiber>(current).sibling;\n    }\n  }\n\n  /**\n   * Renders and reconciles the output of the given @param fiber. Note that this does not *render*\n   * children, it only reconciles the current output of the fiber with the previous children.\n   */\n  renderFiber(fiber: Fiber): void {\n    try {\n      workInProgressFiber = fiber;\n      workInProgressState = null;\n      switch (fiber.type.kind) {\n        case 'component': {\n          invariant(\n            renderPhaseUpdateQueue.length === 0,\n            'Expected no queued render updates',\n          );\n          const render: (props: Props) => React$MixedElement =\n            CHECKED_CAST<FiberTypeComponent>(fiber.type).component;\n          let element = render(fiber.props);\n          let iterationCount: number = 0;\n          while (renderPhaseUpdateQueue.length !== 0) {\n            iterationCount++;\n            invariant(\n              iterationCount < 1000,\n              'Possible infinite loop with setState during render',\n            );\n            let hasChanges = false;\n            for (const update of renderPhaseUpdateQueue) {\n              invariant(\n                update.fiber === fiber,\n                'setState() during render is currently only supported when updating the component ' +\n                  'being rendered. Setting state from another component is not supported.',\n              );\n              hasChanges = update.run() || hasChanges;\n            }\n            renderPhaseUpdateQueue.length = 0;\n            if (!hasChanges) {\n              break;\n            }\n            element = render(fiber.props);\n          }\n          fiber.child = this.reconcileFiber(fiber, fiber.child, element);\n          break;\n        }\n        case 'host': {\n          const id = fiber.props.id;\n          if (id != null) {\n            const onClick = fiber.props.onClick;\n            if (onClick != null) {\n              callbacks.set(id, onClick);\n            }\n            const onChange = fiber.props.onChange;\n            if (onChange != null) {\n              callbacks.set(id, onChange);\n            }\n          }\n          break;\n        }\n        case 'fragment':\n        case 'text': {\n          // Nothing to reconcile, these nodes are visited by the main doWork() loop\n          break;\n        }\n        default: {\n          throw new Error('Unexpected fiber kind: ' + fiber.type.kind);\n        }\n      }\n    } finally {\n      workInProgressFiber = null;\n      workInProgressState = null;\n    }\n  }\n\n  /**\n   * Create a new fiber for the given element. Used when there is no fiber at\n   * a given tree position which can be reused.\n   */\n  mountFiber(elementOrString: React$Node, parent: Fiber | null): Fiber {\n    let fiber: Fiber;\n    // TODO: Support Array of Node's being returned from a component.\n    if (typeof elementOrString === 'object') {\n      const element = CHECKED_CAST<React$MixedElement>(elementOrString);\n      if (typeof element.type === 'function') {\n        const component: Component = CHECKED_CAST<Component>(element.type);\n        const type: FiberType = new FiberTypeComponent(component);\n        fiber = new Fiber(type, (element.props: any), element.key);\n      } else if (typeof element.type === 'string') {\n        invariant(\n          typeof element.type === 'string',\n          'Expected a host component name such as \"div\" or \"span\", got ' +\n            typeof element.type,\n        );\n        const type: FiberType = new FiberTypeHost(\n          CHECKED_CAST<string>(element.type),\n        );\n        invariant(\n          element.props !== null && typeof element.props === 'object',\n          'Expected component props',\n        );\n\n        // const {children, ...props} = element.props;\n        const children = element.props.children;\n        const props = {...element.props};\n        delete props.children;\n\n        fiber = new Fiber(type, props, element.key);\n        this.mountChildren(children, fiber);\n      } else {\n        switch (element.type) {\n          case REACT_FRAGMENT_TYPE: {\n            const type: FiberType = new FiberTypeFragment();\n            fiber = new Fiber(type, (element.props: any), element.key);\n            this.mountChildren(element.props.children, fiber);\n            break;\n          }\n          default: {\n            throw new Error(`Unknown element type ${element.type}`);\n          }\n        }\n      }\n    } else if (typeof elementOrString === 'string') {\n      const type = new FiberTypeText(CHECKED_CAST<string>(elementOrString));\n      fiber = new Fiber(type, {}, null);\n    } else {\n      throw new Error(`Unexpected element type of ${typeof elementOrString}`);\n    }\n    fiber.parent = parent;\n    return fiber;\n  }\n\n  mountChildren(children: React$Node, parentFiber: Fiber): void {\n    if (Array.isArray(children)) {\n      let prev: Fiber | null = null;\n      for (const childElement of CHECKED_CAST<any[]>(children)) {\n        if (childElement == null) {\n          continue;\n        }\n        const child = this.mountFiber(\n          CHECKED_CAST<React$Node>(childElement),\n          parentFiber,\n        );\n        if (prev !== null) {\n          CHECKED_CAST<Fiber>(prev).sibling = child;\n        } else {\n          // set parent to point to first child\n          parentFiber.child = child;\n        }\n        prev = child;\n      }\n    } else if (children != null) {\n      const child = this.mountFiber((children: any), parentFiber);\n      parentFiber.child = child;\n    }\n  }\n\n  /**\n   * Update's @param parent's child to reflect the latest desired output as described by @param element.\n   * This either reuses @param prevChild if present and the component type matches, otherwise it creates\n   * a new Fiber.\n   */\n  reconcileFiber(\n    parent: Fiber,\n    prevChild: Fiber | null,\n    element: React$MixedElement,\n  ): Fiber {\n    if (\n      prevChild !== null &&\n      CHECKED_CAST<Fiber>(prevChild).type === element.type\n    ) {\n      let prevChild: Fiber = CHECKED_CAST<Fiber>(prevChild);\n      // Only host and fragment nodes have to be reconciled: otherwise this is a\n      // function component and its children will be reconciled when they are later\n      // emitted in a host position (ie as a direct result of render)\n      switch (prevChild.type.kind) {\n        case 'host': {\n          invariant(\n            element.props !== null && typeof element.props === 'object',\n            'Expected component props',\n          );\n\n          // const {children, ...props} = element.props;\n          const children = element.props.children;\n          const props = {...element.props};\n          delete props.children;\n\n          prevChild.props = props;\n          this.reconcileChildren(prevChild, (children: any));\n          break;\n        }\n        case 'fragment': {\n          invariant(\n            element.props !== null && typeof element.props === 'object',\n            'Expected component props',\n          );\n\n          const children = element.props.children;\n          this.reconcileChildren(prevChild, (children: any));\n          break;\n        }\n        case 'component': {\n          invariant(\n            element.props !== null && typeof element.props === 'object',\n            'Expected component props',\n          );\n          prevChild.props = element.props;\n          break;\n        }\n        default: {\n          throw new Error(`Unknown node kind ${prevChild.type.kind}`);\n        }\n      }\n      return prevChild;\n    } else {\n      const child = this.mountFiber(element, parent);\n      return child;\n    }\n  }\n\n  /**\n   * Reconciles the @param parent fiber's children nodes.\n   */\n  reconcileChildren(parent: Fiber, children: React$Node): void {\n    const prevChild: Fiber | null = parent.child;\n    if (Array.isArray(children)) {\n      let childrenArray = CHECKED_CAST<React$MixedElement[]>(children);\n      // Fast-path for empty and single-element arrays\n      if (childrenArray.length === 0) {\n        parent.child = null;\n      } else if (childrenArray.length === 1) {\n        parent.child = this.reconcileFiber(parent, prevChild, childrenArray[0]);\n        CHECKED_CAST<Fiber>(parent.child).sibling = null;\n      } else {\n        this.reconcileMultipleChildren(parent, childrenArray);\n      }\n    } else if (typeof children === 'string') {\n      if (\n        prevChild === null ||\n        CHECKED_CAST<Fiber>(prevChild).type.kind !== 'text'\n      ) {\n        const type = new FiberTypeText(CHECKED_CAST<string>(children));\n        const child = new Fiber(type, {}, null);\n        parent.child = child;\n      } else {\n        CHECKED_CAST<FiberTypeText>(CHECKED_CAST<Fiber>(prevChild).type).text =\n          CHECKED_CAST<string>(children);\n      }\n    } else if (children != null) {\n      parent.child = this.reconcileFiber(\n        parent,\n        prevChild,\n        CHECKED_CAST<React$MixedElement>(children),\n      );\n      CHECKED_CAST<Fiber>(parent.child).sibling = null;\n    } else {\n      parent.child = null;\n      if (prevChild !== null) {\n        CHECKED_CAST<Fiber>(prevChild).parent = null;\n      }\n    }\n  }\n\n  /**\n   * Reconciles the @param parent fiber's children when the children are known to\n   * have 2+ items. Note that the algorithm works for 0+ elements but a fast-path\n   * should be used for 0/1 item cases.\n   */\n  reconcileMultipleChildren(\n    parent: Fiber,\n    children: React$MixedElement[],\n  ): void {\n    invariant(\n      children.length > 1,\n      'Expected children to have multiple elements',\n    );\n    // map existing children by key to make subsequent lookup O(log n)\n    const keyedChildren: any = new Map();\n    let current: Fiber | null = parent.child;\n    while (current !== null) {\n      if (CHECKED_CAST<Fiber>(current).key !== null) {\n        keyedChildren.set(CHECKED_CAST<Fiber>(current).key, current);\n      }\n      current = CHECKED_CAST<Fiber>(current).sibling;\n    }\n    let prev: Fiber | null = null; // previous fiber at this key/index\n    let prevByIndex: Fiber | null = parent.child; // keep track of prev fiber at this index\n    for (const childElement of children) {\n      const prevFiber =\n        (childElement.key != null\n          ? keyedChildren.get(childElement.key)\n          : null) ?? prevByIndex;\n      let child: Fiber;\n      if (prevFiber != null) {\n        child = this.reconcileFiber(parent, prevFiber, childElement);\n      } else {\n        child = this.mountFiber(childElement, parent);\n      }\n      if (prev !== null) {\n        CHECKED_CAST<Fiber>(prev).sibling = child;\n      } else {\n        // set parent to point to first child\n        parent.child = child;\n      }\n      prev = child;\n      prevByIndex =\n        prevByIndex !== null ? CHECKED_CAST<Fiber>(prevByIndex).sibling : null;\n    }\n  }\n}\n\n/**\n * Describes the `type` field of Fiber, which can hold different data depending on the fiber's kind:\n * - Component stores a function of props => element.\n * - Host stores the name of the host component, ie \"div\"\n * - Text stores the text itself.\n */\ntype Component = (props: Props) => React$MixedElement;\n\n// type FiberType =\n//   | {\n//       kind: 'component',\n//       component: Component,\n//     }\n//   | {\n//       kind: 'host',\n//       tag: string,\n//     }\n//   | {\n//       kind: 'text',\n//       text: string,\n//     };\n\nclass FiberType {\n  kind: string;\n  constructor(kind: string) {\n    this.kind = kind;\n  }\n}\n\nclass FiberTypeComponent extends FiberType {\n  component: Component;\n  constructor(component: Component) {\n    super('component');\n    this.component = component;\n  }\n}\nclass FiberTypeHost extends FiberType {\n  tag: string;\n  constructor(tag: string) {\n    super('host');\n    this.tag = tag;\n  }\n}\nclass FiberTypeFragment extends FiberType {\n  constructor() {\n    super('fragment');\n  }\n}\nclass FiberTypeText extends FiberType {\n  text: string;\n  constructor(text: string) {\n    super('text');\n    this.text = text;\n  }\n}\n\n/**\n * The type of component props as seen by the framework, because processing is heterogenous\n * the framework only looks at the identity of prop values and does not otherwise make any\n * assumptions about which props may exist and what their types are.\n */\nexport type Props = any;\n\n/**\n * Data storage for the useState() hook\n */\nclass State<T> {\n  value: T;\n  next: State<T> | null;\n  prev: State<T> | null;\n\n  constructor(value: T) {\n    this.value = value;\n\n    this.next = null;\n    this.prev = null;\n  }\n}\n\n/**\n * Represents a node in the UI tree, and may correspond to a user-defined function component,\n * a host node, or a text node.\n */\nclass Fiber {\n  type: FiberType;\n  props: Props;\n  parent: Fiber | null;\n  child: Fiber | null;\n  sibling: Fiber | null;\n  state: State<mixed> | null;\n  key: React$Key | null;\n\n  constructor(type: FiberType, props: Props, key: React$Key | null) {\n    this.type = type;\n    this.props = props;\n    this.key = key;\n\n    this.parent = null;\n    this.child = null;\n    this.sibling = null;\n    this.state = null;\n  }\n}\n\nexport function jsx(\n  type: React$ElementType,\n  props: Props,\n  key: React$Key | null,\n): React$MixedElement {\n  'inline';\n  return new React$Element<React$ElementType>(type, props, key, null);\n}\n\nexport function Fragment(props: Props): React$MixedElement {\n  'inline';\n  return new React$Element<React$ElementType>(REACT_FRAGMENT_TYPE, props, null, null);\n}\n\nexport function forwardRef(\n  comp: (props: Props, ref: mixed) => React$MixedElement,\n): Component {\n  return (props: Props): React$MixedElement => comp(props, null);\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport type {Props, React$MixedElement} from 'react';\n\nimport {useState} from 'react';\n\nfunction Button(props: Props): React$MixedElement {\n  return (\n    <button id={props.id} onClick={props.onClick}>\n      Click me\n    </button>\n  );\n}\n\nfunction Input(props: Props): React$MixedElement {\n  return (\n    <input\n      id={props.id}\n      type=\"text\"\n      onChange={props.onChange}\n      value={props.value}\n    />\n  );\n}\n\nfunction TextArea(props: Props): React$MixedElement {\n  return <textarea onChange={props.onChange}>{props.value}</textarea>;\n}\n\nfunction Select(props: Props): React$MixedElement {\n  const children = [];\n  for (let i = 0; i < props.options.length; i++) {\n    const option = props.options[i];\n    children.push(\n      <option key={option.value} value={option.value}>\n        {option.label}\n      </option>,\n    );\n  }\n  return <select onChange={props.onChange}>{children}</select>;\n}\n\nfunction Checkbox(props: Props): React$MixedElement {\n  return (\n    <input type=\"checkbox\" checked={props.checked} onChange={props.onChange} />\n  );\n}\n\nfunction Radio(props: Props): React$MixedElement {\n  return (\n    <input type=\"radio\" checked={props.checked} onChange={props.onChange} />\n  );\n}\n\nfunction Slider(props: Props): React$MixedElement {\n  return (\n    <input\n      type=\"range\"\n      min={props.min}\n      max={props.max}\n      step={props.step}\n      value={props.value}\n      onChange={props.onChange}\n    />\n  );\n}\n\nfunction ProgressBar(props: Props): React$MixedElement {\n  return <div style={{width: `${props.progress}%`}}></div>;\n}\n\nfunction Spinner(props: Props): React$MixedElement {\n  return <div className=\"spinner\">Loading...</div>;\n}\n\nfunction Modal(props: Props): React$MixedElement {\n  if (!props.isOpen) {\n    return <div className=\"modal closed\" />;\n  }\n\n  return (\n    <div className=\"modal open\">\n      <div className=\"overlay\" onClick={props.onClose}>\n        X\n      </div>\n      <div className=\"content\">{props.children}</div>\n    </div>\n  );\n}\n\nfunction Tooltip(props: Props): React$MixedElement {\n  if (!props.isOpen) {\n    return <div className=\"tooltip closed\" />;\n  }\n\n  return (\n    <div className=\"tooltip open\">\n      <div className=\"arrow\"></div>\n      <div className=\"content\">{props.children}</div>\n    </div>\n  );\n}\n\nexport default function App(props: Props): React$MixedElement {\n  const [text, setText] = useState<string>('');\n  const [number, setNumber] = useState<number>(0);\n  const [isChecked, setIsChecked] = useState<boolean>(false);\n  const [isSelected, setIsSelected] = useState<boolean>(false);\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n  const [isTooltipOpen, setIsTooltipOpen] = useState<boolean>(true);\n  return (\n    <div>\n      <h1>React Benchmark</h1>\n      <Button id=\"toggle-modal\" onClick={(): void => setIsOpen(!isOpen)}>\n        Toggle Modal\n      </Button>\n      <Modal isOpen={isOpen} onClose={(): void => setIsOpen(false)}>\n        <h2>Modal Content</h2>\n        <p>This is some modal content.</p>\n        <Tooltip\n          isOpen={isTooltipOpen}\n          onClose={(): void => setIsTooltipOpen(false)}>\n          <h3>Tooltip Content</h3>\n          <p>This is some tooltip content.</p>\n        </Tooltip>\n      </Modal>\n      <div>\n        <h2>Form Elements</h2>\n        <Input\n          id=\"update-text\"\n          value={text}\n          onChange={e => setText(e.target.value)}\n        />\n        <TextArea value={text} onChange={e => setText(e.target.value)} />\n        <Select\n          options={[\n            {label: 'Option 1', value: 1},\n            {label: 'Option 2', value: 2},\n            {label: 'Option 3', value: 3},\n          ]}\n          onChange={e => setNumber(parseInt(e.target.value))}\n        />\n        <Checkbox\n          checked={isChecked}\n          onChange={e => setIsChecked(e.target.checked)}\n        />\n        <Radio\n          checked={isSelected}\n          onChange={e => setIsSelected(e.target.checked)}\n        />\n        <Slider\n          min={0}\n          max={100}\n          step={1}\n          value={number}\n          onChange={e => setNumber(parseInt(e.target.value))}\n        />\n        <ProgressBar progress={number} />\n        <Spinner />\n      </div>\n    </div>\n  );\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport * as React from 'react';\nimport App from './App';\nimport {drainMicrotaskQueue} from 'sh/microtask';\n\nfunction printIf1(i: number, str: string): void {\n  if (i === 1) {\n    print('===============================');\n    print(str);\n    print('===============================');\n  }\n}\n\nfunction run(N: number): void {\n  // Warmup\n  for (let i: number = 1; i <= 100; ++i) {\n    const root = React.createRoot();\n    const rootElement = <App />;\n    printIf1(i, root.render(rootElement));\n\n    React.callOnClickOrChange('toggle-modal', null);\n    React.callOnClickOrChange('update-text', {\n      target: {value: '!!!!! some text !!!!!'},\n    });\n    drainMicrotaskQueue();\n    printIf1(i, root.render(rootElement));\n  }\n\n  // Benchmark\n  var start = Date.now();\n  for (let i: number = 1; i <= N; ++i) {\n    const root = React.createRoot();\n    const rootElement = <App />;\n    root.render(rootElement);\n\n    React.callOnClickOrChange('toggle-modal', null);\n    React.callOnClickOrChange('update-text', {\n      target: {value: '!!!!! some text !!!!!'},\n    });\n    drainMicrotaskQueue();\n    root.render(rootElement);\n  }\n  var end = Date.now();\n  print(`${end - start} ms`);\n}\n\nrun(10_000);\n"],"mappings":"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"}