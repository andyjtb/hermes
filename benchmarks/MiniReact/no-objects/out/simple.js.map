{"version":3,"names":["react_invariant$default","condition","format","Error","sh_CHECKED_CAST$default","value","T","sh_microtask$INTERNAL$microtaskQueue","sh_microtask$drainMicrotaskQueue","i","length","undefined","sh_microtask$queueMicrotask","callback","push","react_index$INTERNAL$fastArrayJoin","arr","sep","result","e","react_index$INTERNAL$padString","str","len","react_index$React$Node","react_index$INTERNAL$React$Element","react_index$INTERNAL$React$ElementType","react_index$INTERNAL$Component","type","ElementType","props","react_index$Props","key","react_index$INTERNAL$React$Key","ref","constructor","react_index$React$MixedElement","react_index$INTERNAL$workInProgressRoot","react_index$INTERNAL$Root","react_index$INTERNAL$workInProgressFiber","react_index$INTERNAL$Fiber","react_index$INTERNAL$workInProgressState","react_index$INTERNAL$State","react_index$INTERNAL$renderPhaseUpdateQueue","react_index$INTERNAL$Update","react_index$createRoot","react_index$useState","initial","prev","root","fiber","state","_workInProgressState","nextState","next","updater","update","notify","react_index$INTERNAL$callbacks","Map","react_index$callOnClickOrChange","id","event","get","run","fn","changed","Object","is","element","updateQueue","doWork","render","hasChanges","output","printFiber","mustRender","mountFiber","fiber2","renderFiber","child","sibling","parent","out","level","kind","tag","react_index$INTERNAL$FiberTypeHost","padStr","propName","propValue","entries","JSON","stringify","printChildren","text","react_index$INTERNAL$FiberTypeText","current","react_index$INTERNAL$FiberTypeComponent","component","iterationCount","reconcileFiber","onClick","set","onChange","elementOrString","react_index$INTERNAL$FiberType","children","Array","isArray","childElement","prevChild","reconcileChildren","childrenArray","reconcileMultipleChildren","keyedChildren","prevByIndex","prevFiber","react_index$jsx","react_index$Fragment","App$INTERNAL$Button","App$INTERNAL$Input","App$INTERNAL$TextArea","App$INTERNAL$Select","options","option","label","App$INTERNAL$Checkbox","checked","App$INTERNAL$Radio","App$INTERNAL$Slider","min","max","step","App$INTERNAL$ProgressBar","style","width","progress","App$INTERNAL$Spinner","className","App$INTERNAL$Modal","isOpen","onClose","App$INTERNAL$Tooltip","App$default","setText","number","setNumber","isChecked","setIsChecked","isSelected","setIsSelected","setIsOpen","isTooltipOpen","setIsTooltipOpen","target","parseInt","index$INTERNAL$printIf1","print","index$INTERNAL$run","N","rootElement"],"sources":["../src/packages/react/invariant.js","../src/packages/sh/CHECKED_CAST.js","../src/packages/sh/microtask.js","../src/packages/react/index.js","../src/app/simple/App.js","../src/app/simple/index.js","/Users/pieterv/fbsource/xplat/static_h/benchmarks/MiniReact/no-objects/src/packages/react/invariant.js","/Users/pieterv/fbsource/xplat/static_h/benchmarks/MiniReact/no-objects/src/packages/sh/CHECKED_CAST.js","/Users/pieterv/fbsource/xplat/static_h/benchmarks/MiniReact/no-objects/src/packages/sh/microtask.js","/Users/pieterv/fbsource/xplat/static_h/benchmarks/MiniReact/no-objects/src/packages/react/index.js","/Users/pieterv/fbsource/xplat/static_h/benchmarks/MiniReact/no-objects/src/app/simple/App.js","/Users/pieterv/fbsource/xplat/static_h/benchmarks/MiniReact/no-objects/src/app/simple/index.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nexport default function invariant(condition: boolean, format: string): void {\n  'inline';\n\n  if (!condition) {\n    throw new Error(format);\n  }\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nexport default function CHECKED_CAST<T>(value: mixed): T {\n  'inline';\n  return (value: any);\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nlet microtaskQueue = [];\n\nexport function drainMicrotaskQueue(): void {\n  for (let i = 0; i < microtaskQueue.length; i++) {\n    microtaskQueue[i]();\n    microtaskQueue[i] = undefined;\n  }\n  microtaskQueue = [];\n}\n\nexport function queueMicrotask(callback: () => void): void {\n  microtaskQueue.push(callback);\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport invariant from './invariant';\nimport CHECKED_CAST from 'sh/CHECKED_CAST';\nimport {queueMicrotask} from 'sh/microtask';\n\nfunction fastArrayJoin(arr: string[], sep: string): string {\n  let result: string = '';\n  for (let i: number = 0, e = arr.length; i < e; ++i) {\n    if (i !== 0) result += sep;\n    result += arr[i];\n  }\n  return result;\n}\n\nfunction padString(str: string, len: number): string {\n  let result: string = '';\n  for (let i: number = 0; i < len; i++) {\n    result += str;\n  }\n  return result;\n}\n\nexport type React$Node = string | React$Element<React$ElementType>;\n\n/**\n * The type of an element in React. A React element may be a:\n *\n * - String. These elements are intrinsics that depend on the React renderer\n *   implementation.\n * - React component. See `ComponentType` for more information about its\n *   different variants.\n */\ntype React$ElementType =\n  | string\n  | Component /* TODO: React$AbstractComponent<empty, mixed> */;\n\n/**\n * Type of a React element. React elements are commonly created using JSX\n * literals, which desugar to React.createElement calls (see below).\n */\n// type React$Element<ElementType: React$ElementType> = {|\n//   type: ElementType,\n//   props: Props,\n//   key: React$Key | null,\n//   ref: any,\n// |};\nclass React$Element<ElementType> {\n  type: ElementType;\n  props: Props;\n  key: React$Key | null;\n  ref: any;\n\n  constructor(\n    type: ElementType,\n    props: Props,\n    key: React$Key | null,\n    ref: any,\n  ) {\n    this.type = type;\n    this.props = props;\n    this.key = key;\n    this.ref = ref;\n  }\n}\n\nexport type React$MixedElement = React$Element<React$ElementType>;\n\n/**\n * The type of the key that React uses to determine where items in a new list\n * have moved.\n */\ntype React$Key = string | number;\n\n/* eslint-disable lint/strictly-null, lint/react-state-props-mutation, lint/flow-react-element */\n\n/**\n * The current root\n */\nlet workInProgressRoot: Root | null = null;\n\n/**\n * The currently rendering fiber. Only set when a component is being rendered.\n */\nlet workInProgressFiber: Fiber | null = null;\n\n/**\n * The previous state hook, or null if no state hook has been evaluated yet.\n */\nlet workInProgressState: State<mixed> | null = null;\n\n/**\n * Queue of updates triggered *during* render.\n */\nconst renderPhaseUpdateQueue: Update<mixed>[] = [];\n\n/**\n * Public API to create a new \"root\", this is where React attaches rendering to a host element.\n * In our case we don't actually have a real host, and currently only \"render\" to strings.\n */\nexport function createRoot(): Root {\n  return new Root();\n}\n\n/**\n * Hook to create (on initial render) or access (on update) a state, using the index of the useState\n * call within the component as the identity. Thus conditionally calling this API can cause state to\n * be lost.\n */\nexport function useState<T>(\n  /**\n   * Initial value of the state\n   */\n  initial: T,\n): [T, (value: T | ((prev: T) => T)) => void] {\n  const root: Root = CHECKED_CAST<Root>(workInProgressRoot);\n  const fiber: Fiber = CHECKED_CAST<Fiber>(workInProgressFiber);\n  invariant(\n    fiber !== null && root !== null,\n    'useState() called outside of render',\n  );\n\n  let state: State<T>;\n  const _workInProgressState: State<mixed> | null = workInProgressState;\n  if (_workInProgressState === null) {\n    // Get or initialize the first state on the fiber\n    let nextState = fiber.state;\n    if (nextState === null) {\n      nextState = new State<mixed>(initial);\n      fiber.state = nextState;\n    }\n    // NOTE: in case of a re-render we assume that the hook types match but\n    // can't statically prove this\n    state = CHECKED_CAST<State<T>>(nextState);\n  } else {\n    let nextState = CHECKED_CAST<State<mixed>>(_workInProgressState).next;\n    if (nextState === null) {\n      nextState = new State<mixed>(initial);\n      CHECKED_CAST<State<mixed>>(_workInProgressState).next = nextState;\n    }\n    // NOTE: in case of a re-render we assume that the hook types match but\n    // can't statically prove this\n    state = CHECKED_CAST<State<T>>(nextState);\n  }\n  // NOTE: this should just work because of subtying, State<T> should be subtype of State<mixed>\n  workInProgressState = CHECKED_CAST<State<mixed>>(state);\n  return [\n    // Untyped check that the existing state value has the correct type,\n    // This is safe if components follow the rules of hooks\n    CHECKED_CAST<T>(state.value),\n    (updater: T | ((prev: T) => T)): void => {\n      const update = new Update<mixed>(\n        fiber,\n        CHECKED_CAST<State<mixed>>(state),\n        CHECKED_CAST<T | ((prev: T) => T)>(updater),\n      );\n      if (workInProgressFiber !== null) {\n        // called during render\n        renderPhaseUpdateQueue.push(update);\n      } else {\n        root.notify(update);\n      }\n    },\n  ];\n}\n\nconst callbacks = new Map();\nexport function callOnClickOrChange(id: string, event: any): void {\n  const callback = callbacks.get(id);\n  if (callback == null) {\n    throw new Error('No callback registered with id: ' + id);\n  }\n  callback(event);\n}\n\n/**\n * The type of value that may be passed to the setState function (second part of useState return value).\n * - T: the new value\n * - (prev: T) => T: a function to compute the new value from the old value\n */\n// type Updater<T> = T | ((prev: T) => T);\n\n/**\n * The type of the setState function (second element of the array returned by useState).\n */\n// type SetState<T> = (value: Updater<T>) => void;\n\n/**\n * A queued state update.\n */\nclass Update<T> {\n  fiber: Fiber; // used to check state updates that occur during render to see if they came from the current component.\n  state: State<T>;\n  updater: T | ((prev: T) => T); // Updater<T>;\n\n  constructor(fiber: Fiber, state: State<T>, updater: T | ((prev: T) => T)) {\n    this.fiber = fiber;\n    this.state = state;\n    this.updater = updater;\n  }\n\n  /**\n   * Process the state update\n   */\n  run(): boolean {\n    const state = this.state;\n    let value: T = state.value;\n    const updater = this.updater;\n    if (typeof updater === 'function') {\n      // NOTE: The type of Updater<T> is meant to expresss `T (not function) | T (function of T => T)`\n      // thus the fact that updater is a function here menas its a function of T => T.\n      const fn = CHECKED_CAST<(prev: T) => T>(updater);\n      value = fn(state.value);\n    } else {\n      // NOTE: The type of Updater<T> is meant to expresss `T (not function) | T (function of T => T)`\n      // thus the fact that updater is *not* a function here means it is a T\n      value = CHECKED_CAST<T>(updater);\n    }\n    const changed = !Object.is(state.value, value);\n    state.value = value;\n    return changed;\n  }\n}\n\nclass Root {\n  /**\n   * The fiber representing the root node (`element`), null until\n   * render is first called.\n   */\n  root: Fiber | null;\n\n  /**\n   * The last rendered root element, initially null.\n   */\n  element: React$MixedElement | null;\n\n  /**\n   * Queue of updates (state changes) to apply on the next render\n   */\n  updateQueue: Update<mixed>[];\n\n  constructor() {\n    this.root = null;\n    this.element = null;\n    this.updateQueue = ([]: Update<mixed>[]);\n  }\n\n  /**\n   * Notify the root that an update is scheduled\n   */\n  notify(update: Update<mixed>): void {\n    this.updateQueue.push(update);\n    if (this.updateQueue.length === 1) {\n      queueMicrotask((): void => {\n        const element = this.element;\n        invariant(\n          element !== null,\n          'Expected an element to be set after rendering',\n        );\n        this.doWork(CHECKED_CAST<React$MixedElement>(element));\n      });\n    }\n  }\n\n  /**\n   * Drive any remaining work to completion and return the rendered result\n   */\n  render(element: React$MixedElement): string {\n    invariant(\n      workInProgressFiber === null && workInProgressState === null,\n      'Cannot render, an existing render is in progress',\n    );\n    const hasChanges = element !== this.element;\n    this.element = element;\n    if (hasChanges) {\n      this.doWork(element);\n    }\n\n    invariant(this.root !== null, 'Expected root to be rendered');\n    const root: Fiber = CHECKED_CAST<Fiber>(this.root);\n    const output: string[] = [];\n    this.printFiber(root, output, 0);\n    // return output.join('');\n    return fastArrayJoin(output, '\\n');\n  }\n\n  doWork(element: React$MixedElement): void {\n    let mustRender = this.root === null;\n    for (const update of this.updateQueue) {\n      mustRender = update.run() || mustRender;\n    }\n    this.updateQueue = ([]: Update<mixed>[]);\n    if (!mustRender) {\n      return;\n    }\n\n    // Visit the tree in pre-order, rendering each node\n    // and then processing its children\n    // eslint-disable-next-line consistent-this\n    workInProgressRoot = this;\n    let fiber = this.root;\n    if (fiber === null) {\n      fiber = this.mountFiber(element, null);\n      this.root = fiber;\n    }\n    while (fiber !== null) {\n      // Render the fiber, which creates child/sibling nodes\n      let fiber2: Fiber = CHECKED_CAST<Fiber>(fiber);\n      this.renderFiber(fiber2);\n      // advance to the next fiber\n      if (fiber2.child !== null) {\n        fiber = fiber2.child;\n      } else if (fiber2.sibling !== null) {\n        fiber = fiber2.sibling;\n      } else {\n        fiber = fiber2.parent;\n        while (fiber !== null && CHECKED_CAST<Fiber>(fiber).sibling === null) {\n          fiber = CHECKED_CAST<Fiber>(fiber).parent;\n        }\n        if (fiber !== null) {\n          fiber = CHECKED_CAST<Fiber>(fiber).sibling;\n        }\n      }\n    }\n    workInProgressRoot = null;\n  }\n\n  /**\n   * Prints a representation of the output DOM as HTML, emitting HTML snippets to @param out.\n   */\n  printFiber(fiber: Fiber, out: string[], level: number): void {\n    switch (fiber.type.kind) {\n      case 'host': {\n        const tag = CHECKED_CAST<FiberTypeHost>(fiber.type).tag;\n        const padStr = padString(' ', level);\n        let str = padStr + '<' + tag;\n        for (const [propName, propValue] of Object.entries(fiber.props)) {\n          if (typeof propValue === 'function') {\n            continue;\n          }\n\n          str += ` ${propName}=${JSON.stringify(propValue) ?? 'undefined'}`;\n        }\n        str += '>';\n        out.push(str);\n        this.printChildren(fiber, out, level + 1);\n        out.push(padStr + '</' + tag + '>');\n        break;\n      }\n      case 'text': {\n        const text = CHECKED_CAST<FiberTypeText>(fiber.type).text;\n        if (text !== '') {\n          out.push(padString(' ', level) + text);\n        }\n        break;\n      }\n      case 'component': {\n        this.printChildren(fiber, out, level);\n        break;\n      }\n    }\n  }\n\n  printChildren(fiber: Fiber, out: string[], level: number): void {\n    let current: Fiber | null = fiber.child;\n    while (current !== null) {\n      this.printFiber(CHECKED_CAST<Fiber>(current), out, level);\n      current = CHECKED_CAST<Fiber>(current).sibling;\n    }\n  }\n\n  /**\n   * Renders and reconciles the output of the given @param fiber. Note that this does not *render*\n   * children, it only reconciles the current output of the fiber with the previous children.\n   */\n  renderFiber(fiber: Fiber): void {\n    try {\n      workInProgressFiber = fiber;\n      workInProgressState = null;\n      switch (fiber.type.kind) {\n        case 'component': {\n          invariant(\n            renderPhaseUpdateQueue.length === 0,\n            'Expected no queued render updates',\n          );\n          const render: (props: Props) => React$MixedElement =\n            CHECKED_CAST<FiberTypeComponent>(fiber.type).component;\n          let element = render(fiber.props);\n          let iterationCount: number = 0;\n          while (renderPhaseUpdateQueue.length !== 0) {\n            iterationCount++;\n            invariant(\n              iterationCount < 1000,\n              'Possible infinite loop with setState during render',\n            );\n            let hasChanges = false;\n            for (const update of renderPhaseUpdateQueue) {\n              invariant(\n                update.fiber === fiber,\n                'setState() during render is currently only supported when updating the component ' +\n                  'being rendered. Setting state from another component is not supported.',\n              );\n              hasChanges = update.run() || hasChanges;\n            }\n            renderPhaseUpdateQueue.length = 0;\n            if (!hasChanges) {\n              break;\n            }\n            element = render(fiber.props);\n          }\n          fiber.child = this.reconcileFiber(fiber, fiber.child, element);\n          break;\n        }\n        case 'host': {\n          const id = fiber.props.id;\n          if (id != null) {\n            const onClick = fiber.props.onClick;\n            if (onClick != null) {\n              callbacks.set(id, onClick);\n            }\n            const onChange = fiber.props.onChange;\n            if (onChange != null) {\n              callbacks.set(id, onChange);\n            }\n          }\n          break;\n        }\n        case 'text': {\n          // Nothing to reconcile, these nodes are visited by the main doWork() loop\n          break;\n        }\n      }\n    } finally {\n      workInProgressFiber = null;\n      workInProgressState = null;\n    }\n  }\n\n  /**\n   * Create a new fiber for the given element. Used when there is no fiber at\n   * a given tree position which can be reused.\n   */\n  mountFiber(elementOrString: React$Node, parent: Fiber | null): Fiber {\n    let fiber: Fiber;\n    if (typeof elementOrString === 'object') {\n      const element = CHECKED_CAST<React$MixedElement>(elementOrString);\n      if (typeof element.type === 'function') {\n        const component: Component = CHECKED_CAST<Component>(element.type);\n        // const type: FiberType = {\n        //   kind: 'component',\n        //   component,\n        // };\n        const type: FiberType = new FiberTypeComponent(component);\n        fiber = new Fiber(type, (element.props: any), element.key);\n      } else {\n        invariant(\n          typeof element.type === 'string',\n          'Expected a host component name such as \"div\" or \"span\", got ' +\n            CHECKED_CAST<string>(element.type),\n        );\n        // const type: FiberType = {\n        //   kind: 'host',\n        //   tag: element.type,\n        // };\n        const type: FiberType = new FiberTypeHost(\n          CHECKED_CAST<string>(element.type),\n        );\n        invariant(\n          element.props !== null && typeof element.props === 'object',\n          'Expected component props',\n        );\n\n        // const {children, ...props} = element.props;\n        const children = element.props.children;\n        const props = {...element.props};\n        delete props.children;\n\n        fiber = new Fiber(type, props, element.key);\n        if (Array.isArray(children)) {\n          let prev: Fiber | null = null;\n          for (const childElement of CHECKED_CAST<any[]>(children)) {\n            const child = this.mountFiber(\n              CHECKED_CAST<React$Node>(childElement),\n              fiber,\n            );\n            if (prev !== null) {\n              CHECKED_CAST<Fiber>(prev).sibling = child;\n            } else {\n              // set parent to point to first child\n              fiber.child = child;\n            }\n            prev = child;\n          }\n        } else if (typeof children === 'string') {\n          const child = new Fiber({kind: 'text', text: children}, {}, null);\n          child.parent = fiber;\n          fiber.child = child;\n        } else if (children != null) {\n          const child = this.mountFiber((children: any), fiber);\n          fiber.child = child;\n        }\n      }\n    } else {\n      invariant(typeof elementOrString === 'string', 'Expected a string');\n      // const type: FiberType = {\n      //   kind: 'text',\n      //   text: element,\n      // };\n      const type = new FiberTypeText(CHECKED_CAST<string>(elementOrString));\n      fiber = new Fiber(type, {}, null);\n    }\n    fiber.parent = parent;\n    return fiber;\n  }\n\n  /**\n   * Update's @param parent's child to reflect the latest desired output as described by @param element.\n   * This either reuses @param prevChild if present and the component type matches, otherwise it creates\n   * a new Fiber.\n   */\n  reconcileFiber(\n    parent: Fiber,\n    prevChild: Fiber | null,\n    element: React$MixedElement,\n  ): Fiber {\n    if (\n      prevChild !== null &&\n      CHECKED_CAST<Fiber>(prevChild).type === element.type\n    ) {\n      let prevChild: Fiber = CHECKED_CAST<Fiber>(prevChild);\n      // Only host nodes have to be reconciled: otherwise this is a function component\n      // and its children will be reconciled when they are later emitted in a host\n      // position (ie as a direct result of render)\n      if (prevChild.type.kind === 'host') {\n        invariant(\n          element.props !== null && typeof element.props === 'object',\n          'Expected component props',\n        );\n\n        // const {children, ...props} = element.props;\n        const children = element.props.children;\n        const props = {...element.props};\n        delete props.children;\n\n        prevChild.props = props;\n        this.reconcileChildren(prevChild, (children: any));\n      } else if (prevChild.type.kind === 'component') {\n        invariant(\n          element.props !== null && typeof element.props === 'object',\n          'Expected component props',\n        );\n        prevChild.props = element.props;\n      }\n      return prevChild;\n    } else {\n      const child = this.mountFiber(element, parent);\n      return child;\n    }\n  }\n\n  /**\n   * Reconciles the @param parent fiber's children nodes.\n   */\n  reconcileChildren(\n    parent: Fiber,\n    children: React$MixedElement[] | React$MixedElement | string | null | void,\n  ): void {\n    const prevChild: Fiber | null = parent.child;\n    if (Array.isArray(children)) {\n      let childrenArray = CHECKED_CAST<React$MixedElement[]>(children);\n      // Fast-path for empty and single-element arrays\n      if (childrenArray.length === 0) {\n        parent.child = null;\n      } else if (childrenArray.length === 1) {\n        parent.child = this.reconcileFiber(parent, prevChild, childrenArray[0]);\n        CHECKED_CAST<Fiber>(parent.child).sibling = null;\n      } else {\n        this.reconcileMultipleChildren(parent, childrenArray);\n      }\n    } else if (typeof children === 'string') {\n      if (\n        prevChild === null ||\n        CHECKED_CAST<Fiber>(prevChild).type.kind !== 'text'\n      ) {\n        const child = new Fiber({kind: 'text', text: children}, {}, null);\n        parent.child = child;\n      } else {\n        CHECKED_CAST<FiberTypeText>(CHECKED_CAST<Fiber>(prevChild).type).text =\n          CHECKED_CAST<string>(children);\n      }\n    } else if (children != null) {\n      parent.child = this.reconcileFiber(\n        parent,\n        prevChild,\n        CHECKED_CAST<React$MixedElement>(children),\n      );\n      CHECKED_CAST<Fiber>(parent.child).sibling = null;\n    } else {\n      parent.child = null;\n      if (prevChild !== null) {\n        CHECKED_CAST<Fiber>(prevChild).parent = null;\n      }\n    }\n  }\n\n  /**\n   * Reconciles the @param parent fiber's children when the children are known to\n   * have 2+ items. Note that the algorithm works for 0+ elements but a fast-path\n   * should be used for 0/1 item cases.\n   */\n  reconcileMultipleChildren(\n    parent: Fiber,\n    children: React$MixedElement[],\n  ): void {\n    invariant(\n      children.length > 1,\n      'Expected children to have multiple elements',\n    );\n    // map existing children by key to make subsequent lookup O(log n)\n    const keyedChildren: any = new Map();\n    let current: Fiber | null = parent.child;\n    while (current !== null) {\n      if (CHECKED_CAST<Fiber>(current).key !== null) {\n        keyedChildren.set(CHECKED_CAST<Fiber>(current).key, current);\n      }\n      current = CHECKED_CAST<Fiber>(current).sibling;\n    }\n    let prev: Fiber | null = null; // previous fiber at this key/index\n    let prevByIndex: Fiber | null = parent.child; // keep track of prev fiber at this index\n    for (const childElement of children) {\n      const prevFiber =\n        (childElement.key != null\n          ? keyedChildren.get(childElement.key)\n          : null) ?? prevByIndex;\n      let child: Fiber;\n      if (prevFiber != null) {\n        child = this.reconcileFiber(parent, prevFiber, childElement);\n      } else {\n        child = this.mountFiber(childElement, parent);\n      }\n      if (prev !== null) {\n        CHECKED_CAST<Fiber>(prev).sibling = child;\n      } else {\n        // set parent to point to first child\n        parent.child = child;\n      }\n      prev = child;\n      prevByIndex =\n        prevByIndex !== null ? CHECKED_CAST<Fiber>(prevByIndex).sibling : null;\n    }\n  }\n}\n\n/**\n * Describes the `type` field of Fiber, which can hold different data depending on the fiber's kind:\n * - Component stores a function of props => element.\n * - Host stores the name of the host component, ie \"div\"\n * - Text stores the text itself.\n */\ntype Component = (props: Props) => React$MixedElement;\n\n// type FiberType =\n//   | {\n//       kind: 'component',\n//       component: Component,\n//     }\n//   | {\n//       kind: 'host',\n//       tag: string,\n//     }\n//   | {\n//       kind: 'text',\n//       text: string,\n//     };\n\nclass FiberType {\n  kind: string;\n  constructor(kind: string) {\n    this.kind = kind;\n  }\n}\n\nclass FiberTypeComponent extends FiberType {\n  component: Component;\n  constructor(component: Component) {\n    super('component');\n    this.component = component;\n  }\n}\nclass FiberTypeHost extends FiberType {\n  tag: string;\n  constructor(tag: string) {\n    super('host');\n    this.tag = tag;\n  }\n}\nclass FiberTypeText extends FiberType {\n  text: string;\n  constructor(text: string) {\n    super('text');\n    this.text = text;\n  }\n}\n\n/**\n * The type of component props as seen by the framework, because processing is heterogenous\n * the framework only looks at the identity of prop values and does not otherwise make any\n * assumptions about which props may exist and what their types are.\n */\nexport type Props = any;\n\n/**\n * Data storage for the useState() hook\n */\nclass State<T> {\n  value: T;\n  next: State<T> | null;\n  prev: State<T> | null;\n\n  constructor(value: T) {\n    this.value = value;\n\n    this.next = null;\n    this.prev = null;\n  }\n}\n\n/**\n * Represents a node in the UI tree, and may correspond to a user-defined function component,\n * a host node, or a text node.\n */\nclass Fiber {\n  type: FiberType;\n  props: Props;\n  parent: Fiber | null;\n  child: Fiber | null;\n  sibling: Fiber | null;\n  state: State<mixed> | null;\n  key: React$Key | null;\n\n  constructor(type: FiberType, props: Props, key: React$Key | null) {\n    this.type = type;\n    this.props = props;\n    this.key = key;\n\n    this.parent = null;\n    this.child = null;\n    this.sibling = null;\n    this.state = null;\n  }\n}\n\nexport function jsx(\n  type: React$ElementType,\n  props: Props,\n  key: React$Key | null,\n): React$MixedElement {\n  'inline';\n  return {\n    type: type,\n    props: props,\n    key: key,\n    ref: null,\n  };\n}\n\nexport function Fragment(props: Props): React$Node {\n  // TODO: Get this to work.\n  return props.children;\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport type {Props, React$MixedElement} from 'react';\n\nimport {useState} from 'react';\n\nfunction Button(props: Props): React$MixedElement {\n  return (\n    <button id={props.id} onClick={props.onClick}>\n      Click me\n    </button>\n  );\n}\n\nfunction Input(props: Props): React$MixedElement {\n  return (\n    <input\n      id={props.id}\n      type=\"text\"\n      onChange={props.onChange}\n      value={props.value}\n    />\n  );\n}\n\nfunction TextArea(props: Props): React$MixedElement {\n  return <textarea onChange={props.onChange}>{props.value}</textarea>;\n}\n\nfunction Select(props: Props): React$MixedElement {\n  const children = [];\n  for (let i = 0; i < props.options.length; i++) {\n    const option = props.options[i];\n    children.push(\n      <option key={option.value} value={option.value}>\n        {option.label}\n      </option>,\n    );\n  }\n  return <select onChange={props.onChange}>{children}</select>;\n}\n\nfunction Checkbox(props: Props): React$MixedElement {\n  return (\n    <input type=\"checkbox\" checked={props.checked} onChange={props.onChange} />\n  );\n}\n\nfunction Radio(props: Props): React$MixedElement {\n  return (\n    <input type=\"radio\" checked={props.checked} onChange={props.onChange} />\n  );\n}\n\nfunction Slider(props: Props): React$MixedElement {\n  return (\n    <input\n      type=\"range\"\n      min={props.min}\n      max={props.max}\n      step={props.step}\n      value={props.value}\n      onChange={props.onChange}\n    />\n  );\n}\n\nfunction ProgressBar(props: Props): React$MixedElement {\n  return <div style={{width: `${props.progress}%`}}></div>;\n}\n\nfunction Spinner(props: Props): React$MixedElement {\n  return <div className=\"spinner\">Loading...</div>;\n}\n\nfunction Modal(props: Props): React$MixedElement {\n  if (!props.isOpen) {\n    return <div className=\"modal closed\" />;\n  }\n\n  return (\n    <div className=\"modal open\">\n      <div className=\"overlay\" onClick={props.onClose}>\n        X\n      </div>\n      <div className=\"content\">{props.children}</div>\n    </div>\n  );\n}\n\nfunction Tooltip(props: Props): React$MixedElement {\n  if (!props.isOpen) {\n    return <div className=\"tooltip closed\" />;\n  }\n\n  return (\n    <div className=\"tooltip open\">\n      <div className=\"arrow\"></div>\n      <div className=\"content\">{props.children}</div>\n    </div>\n  );\n}\n\nexport default function App(props: Props): React$MixedElement {\n  const [text, setText] = useState<string>('');\n  const [number, setNumber] = useState<number>(0);\n  const [isChecked, setIsChecked] = useState<boolean>(false);\n  const [isSelected, setIsSelected] = useState<boolean>(false);\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n  const [isTooltipOpen, setIsTooltipOpen] = useState<boolean>(true);\n  return (\n    <div>\n      <h1>React Benchmark</h1>\n      <Button id=\"toggle-modal\" onClick={(): void => setIsOpen(!isOpen)}>\n        Toggle Modal\n      </Button>\n      <Modal isOpen={isOpen} onClose={(): void => setIsOpen(false)}>\n        <h2>Modal Content</h2>\n        <p>This is some modal content.</p>\n        <Tooltip\n          isOpen={isTooltipOpen}\n          onClose={(): void => setIsTooltipOpen(false)}>\n          <h3>Tooltip Content</h3>\n          <p>This is some tooltip content.</p>\n        </Tooltip>\n      </Modal>\n      <div>\n        <h2>Form Elements</h2>\n        <Input\n          id=\"update-text\"\n          value={text}\n          onChange={e => setText(e.target.value)}\n        />\n        <TextArea value={text} onChange={e => setText(e.target.value)} />\n        <Select\n          options={[\n            {label: 'Option 1', value: 1},\n            {label: 'Option 2', value: 2},\n            {label: 'Option 3', value: 3},\n          ]}\n          onChange={e => setNumber(parseInt(e.target.value))}\n        />\n        <Checkbox\n          checked={isChecked}\n          onChange={e => setIsChecked(e.target.checked)}\n        />\n        <Radio\n          checked={isSelected}\n          onChange={e => setIsSelected(e.target.checked)}\n        />\n        <Slider\n          min={0}\n          max={100}\n          step={1}\n          value={number}\n          onChange={e => setNumber(parseInt(e.target.value))}\n        />\n        <ProgressBar progress={number} />\n        <Spinner />\n      </div>\n    </div>\n  );\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport * as React from 'react';\nimport App from './App';\nimport {drainMicrotaskQueue} from 'sh/microtask';\n\nfunction printIf1(i: number, str: string): void {\n  if (i === 1) {\n    print('===============================');\n    print(str);\n    print('===============================');\n  }\n}\n\nfunction run(N: number): void {\n  for (let i: number = 1; i <= N; ++i) {\n    const root = React.createRoot();\n    const rootElement = <App />;\n    printIf1(i, root.render(rootElement));\n\n    React.callOnClickOrChange('toggle-modal', null);\n    React.callOnClickOrChange('update-text', {\n      target: {value: '!!!!! some text !!!!!'},\n    });\n    drainMicrotaskQueue();\n    printIf1(i, root.render(rootElement));\n  }\n}\n\nrun(1);\n",null,null,null,null,null,null],"mappings":"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"}