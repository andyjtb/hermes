{"version":3,"names":["M$react_invariant$default","condition","format","Error","M$sh_CHECKED_CAST$default","value","T","M$sh_microtask$INTERNAL$microtaskQueue","M$sh_microtask$drainMicrotaskQueue","i","length","undefined","M$sh_microtask$queueMicrotask","callback","push","M$sh_fastarray$join","arr","sep","result","e","M$sh_fastarray$reduce","TInput","fn","acc","TAcc","item","index","initialValue","M$sh_fastarray$map","TOutput","output","M$sh_fastarray$includes","searchElement","M$react_index$INTERNAL$padString","str","len","M$react_index$INTERNAL$React$ElementType","M$react_index$INTERNAL$Component","M$react_index$INTERNAL$React$Element","type","ElementType","props","M$react_index$Props","key","M$react_index$INTERNAL$React$Key","ref","constructor","M$react_index$React$MixedElement","M$react_index$INTERNAL$React$NodeWithoutArray","M$react_index$React$Node","M$react_index$INTERNAL$REACT_FRAGMENT_TYPE","M$react_index$INTERNAL$workInProgressRoot","M$react_index$INTERNAL$Root","M$react_index$INTERNAL$workInProgressFiber","M$react_index$INTERNAL$Fiber","M$react_index$INTERNAL$workInProgressState","M$react_index$INTERNAL$State","M$react_index$INTERNAL$renderPhaseUpdateQueue","M$react_index$INTERNAL$Update","M$react_index$createRoot","M$react_index$useState","initial","M$react_index$INTERNAL$SetState","root","fiber","state","_workInProgressState","nextState","next","updater","M$react_index$INTERNAL$Updater","update","notify","M$react_index$INTERNAL$callbacks","Map","M$react_index$callOnClickOrChange","id","event","get","prev","run","changed","Object","is","element","updateQueue","doWork","render","hasChanges","printFiber","mustRender","mountFiber","fiber2","renderFiber","child","sibling","parent","out","level","kind","tag","M$react_index$INTERNAL$FiberTypeHost","padStr","propName","propValue","entries","JSON","stringify","printChildren","text","M$react_index$INTERNAL$FiberTypeText","current","M$react_index$INTERNAL$FiberTypeComponent","component","iterationCount","reconcileFiber","onClick","set","onChange","elementOrString","M$react_index$INTERNAL$FiberType","children","mountChildren","M$react_index$INTERNAL$FiberTypeFragment","parentFiber","Array","isArray","childElement","prevChild","reconcileChildren","childrenArray","reconcileMultipleChildren","keyedChildren","prevByIndex","prevFiber","M$react_index$jsx","M$react_index$Fragment","M$react_index$forwardRef","comp","M$App$INTERNAL$Button","M$App$INTERNAL$Input","M$App$INTERNAL$TextArea","M$App$INTERNAL$Select","options","option","label","M$App$INTERNAL$Checkbox","checked","M$App$INTERNAL$Radio","M$App$INTERNAL$Slider","min","max","step","M$App$INTERNAL$ProgressBar","style","width","progress","M$App$INTERNAL$Spinner","className","M$App$INTERNAL$Modal","isOpen","onClose","M$App$INTERNAL$Tooltip","M$App$default","setText","number","setNumber","isChecked","setIsChecked","isSelected","setIsSelected","setIsOpen","isTooltipOpen","setIsTooltipOpen","target","parseInt","M$index$INTERNAL$printIf1","print","M$index$INTERNAL$run","N","rootElement","start","Date","now","end"],"sources":["../src/packages/react/invariant.js","../src/packages/sh/CHECKED_CAST.js","../src/packages/sh/microtask.js","../src/packages/sh/fastarray.js","../src/packages/react/index.js","../src/app/simple/App.js","../src/app/simple/index.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nexport default function invariant(condition: boolean, format: string): void {\n  'inline';\n\n  if (!condition) {\n    throw new Error(format);\n  }\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nexport default function CHECKED_CAST<T>(value: mixed): T {\n  'inline';\n  return (value: any);\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nlet microtaskQueue = [];\n\nexport function drainMicrotaskQueue(): void {\n  for (let i = 0; i < microtaskQueue.length; i++) {\n    microtaskQueue[i]();\n    microtaskQueue[i] = undefined;\n  }\n  microtaskQueue = [];\n}\n\nexport function queueMicrotask(callback: () => void): void {\n  microtaskQueue.push(callback);\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nexport function join(arr: string[], sep: string): string {\n  let result: string = '';\n  for (let i: number = 0, e = arr.length; i < e; ++i) {\n    if (i !== 0) result += sep;\n    result += arr[i];\n  }\n  return result;\n}\n\nexport function reduce<TInput, TAcc>(\n  arr: TInput[],\n  fn: (acc: TAcc, item: TInput, index: number) => TAcc,\n  initialValue: TAcc,\n): TAcc {\n  let acc = initialValue;\n  for (let i = 0, e = arr.length; i < e; ++i) {\n    acc = fn(acc, arr[i], i);\n  }\n  return acc;\n}\n\nexport function map<TInput, TOutput>(\n  arr: TInput[],\n  fn: (item: TInput, index: number) => TOutput,\n): TOutput[] {\n  const output: TOutput[] = [];\n  for (let i = 0, e = arr.length; i < e; ++i) {\n    output.push(fn(arr[i], i));\n  }\n  return output;\n}\n\nexport function includes<T>(arr: T[], searchElement: T): boolean {\n  for (let i = 0, e = arr.length; i < e; ++i) {\n    if (arr[i] === searchElement) {\n      return true;\n    }\n  }\n  return false;\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport invariant from './invariant';\nimport CHECKED_CAST from 'sh/CHECKED_CAST';\nimport {queueMicrotask} from 'sh/microtask';\nimport {join} from 'sh/fastarray';\n\nfunction padString(str: string, len: number): string {\n  let result: string = '';\n  for (let i: number = 0; i < len; i++) {\n    result += str;\n  }\n  return result;\n}\n\n/**\n * The type of an element in React. A React element may be a:\n *\n * - String. These elements are intrinsics that depend on the React renderer\n *   implementation.\n * - React component. See `ComponentType` for more information about its\n *   different variants.\n */\ntype React$ElementType =\n  | string\n  | Component /* TODO: React$AbstractComponent<empty, mixed> */\n  | number /* TODO: symbol */;\n\n/**\n * Type of a React element. React elements are commonly created using JSX\n * literals, which desugar to React.createElement calls (see below).\n */\n// type React$Element<ElementType: React$ElementType> = {|\n//   type: ElementType,\n//   props: Props,\n//   key: React$Key | null,\n//   ref: any,\n// |};\nclass React$Element<ElementType> {\n  type: ElementType;\n  props: Props;\n  key: React$Key | null;\n  ref: any;\n\n  constructor(\n    type: ElementType,\n    props: Props,\n    key: React$Key | null,\n    ref: any,\n  ) {\n    this.type = type;\n    this.props = props;\n    this.key = key;\n    this.ref = ref;\n  }\n}\n\nexport type React$MixedElement = React$Element<React$ElementType>;\ntype React$NodeWithoutArray = React$MixedElement | string | null | void;\nexport type React$Node = React$NodeWithoutArray[] | React$NodeWithoutArray;\n\n/**\n * The type of the key that React uses to determine where items in a new list\n * have moved.\n */\ntype React$Key = string | number;\n\nconst REACT_FRAGMENT_TYPE: number = 1 /* Symbol.for('react.fragment') */;\n\n/* eslint-disable lint/strictly-null, lint/react-state-props-mutation, lint/flow-react-element */\n\n/**\n * The current root\n */\nlet workInProgressRoot: Root | null = null;\n\n/**\n * The currently rendering fiber. Only set when a component is being rendered.\n */\nlet workInProgressFiber: Fiber | null = null;\n\n/**\n * The previous state hook, or null if no state hook has been evaluated yet.\n */\nlet workInProgressState: State<mixed> | null = null;\n\n/**\n * Queue of updates triggered *during* render.\n */\nconst renderPhaseUpdateQueue: Update<mixed>[] = [];\n\n/**\n * Public API to create a new \"root\", this is where React attaches rendering to a host element.\n * In our case we don't actually have a real host, and currently only \"render\" to strings.\n */\nexport function createRoot(): Root {\n  return new Root();\n}\n\n/**\n * Hook to create (on initial render) or access (on update) a state, using the index of the useState\n * call within the component as the identity. Thus conditionally calling this API can cause state to\n * be lost.\n */\nexport function useState<T>(\n  /**\n   * Initial value of the state\n   */\n  initial: T,\n): [T, SetState<T>] {\n  const root: Root = CHECKED_CAST<Root>(workInProgressRoot);\n  const fiber: Fiber = CHECKED_CAST<Fiber>(workInProgressFiber);\n  invariant(\n    fiber !== null && root !== null,\n    'useState() called outside of render',\n  );\n\n  let state: State<T>;\n  const _workInProgressState: State<mixed> | null = workInProgressState;\n  if (_workInProgressState === null) {\n    // Get or initialize the first state on the fiber\n    let nextState = fiber.state;\n    if (nextState === null) {\n      nextState = new State<mixed>(initial);\n      fiber.state = nextState;\n    }\n    // NOTE: in case of a re-render we assume that the hook types match but\n    // can't statically prove this\n    state = CHECKED_CAST<State<T>>(nextState);\n  } else {\n    let nextState = CHECKED_CAST<State<mixed>>(_workInProgressState).next;\n    if (nextState === null) {\n      nextState = new State<mixed>(initial);\n      CHECKED_CAST<State<mixed>>(_workInProgressState).next = nextState;\n    }\n    // NOTE: in case of a re-render we assume that the hook types match but\n    // can't statically prove this\n    state = CHECKED_CAST<State<T>>(nextState);\n  }\n  // NOTE: this should just work because of subtying, State<T> should be subtype of State<mixed>\n  workInProgressState = CHECKED_CAST<State<mixed>>(state);\n  return [\n    // Untyped check that the existing state value has the correct type,\n    // This is safe if components follow the rules of hooks\n    CHECKED_CAST<T>(state.value),\n    (updater: Updater<T>): void => {\n      const update = new Update<mixed>(\n        fiber,\n        CHECKED_CAST<State<mixed>>(state),\n        CHECKED_CAST<Updater<mixed>>(updater),\n      );\n      if (workInProgressFiber !== null) {\n        // called during render\n        renderPhaseUpdateQueue.push(update);\n      } else {\n        root.notify(update);\n      }\n    },\n  ];\n}\n\nconst callbacks = new Map();\nexport function callOnClickOrChange(id: string, event: any): void {\n  const callback = callbacks.get(id);\n  if (callback == null) {\n    throw new Error('No callback registered with id: ' + id);\n  }\n  callback(event);\n}\n\n/**\n * The type of value that may be passed to the setState function (second part of useState return value).\n * - T: the new value\n * - (prev: T) => T: a function to compute the new value from the old value\n */\ntype Updater<T> = T | ((prev: T) => T);\n\n/**\n * The type of the setState function (second element of the array returned by useState).\n */\ntype SetState<T> = (value: Updater<T>) => void;\n\n/**\n * A queued state update.\n */\nclass Update<T> {\n  fiber: Fiber; // used to check state updates that occur during render to see if they came from the current component.\n  state: State<T>;\n  updater: Updater<T>;\n\n  constructor(fiber: Fiber, state: State<T>, updater: Updater<T>) {\n    this.fiber = fiber;\n    this.state = state;\n    this.updater = updater;\n  }\n\n  /**\n   * Process the state update\n   */\n  run(): boolean {\n    const state = this.state;\n    let value: T = state.value;\n    const updater = this.updater;\n    if (typeof updater === 'function') {\n      // NOTE: The type of Updater<T> is meant to expresss `T (not function) | T (function of T => T)`\n      // thus the fact that updater is a function here menas its a function of T => T.\n      const fn = CHECKED_CAST<(prev: T) => T>(updater);\n      value = fn(state.value);\n    } else {\n      // NOTE: The type of Updater<T> is meant to expresss `T (not function) | T (function of T => T)`\n      // thus the fact that updater is *not* a function here means it is a T\n      value = CHECKED_CAST<T>(updater);\n    }\n    const changed = !Object.is(state.value, value);\n    state.value = value;\n    return changed;\n  }\n}\n\nclass Root {\n  /**\n   * The fiber representing the root node (`element`), null until\n   * render is first called.\n   */\n  root: Fiber | null;\n\n  /**\n   * The last rendered root element, initially null.\n   */\n  element: React$MixedElement | null;\n\n  /**\n   * Queue of updates (state changes) to apply on the next render\n   */\n  updateQueue: Update<mixed>[];\n\n  constructor() {\n    this.root = null;\n    this.element = null;\n    this.updateQueue = ([]: Update<mixed>[]);\n  }\n\n  /**\n   * Notify the root that an update is scheduled\n   */\n  notify(update: Update<mixed>): void {\n    this.updateQueue.push(update);\n    if (this.updateQueue.length === 1) {\n      queueMicrotask((): void => {\n        const element = this.element;\n        invariant(\n          element !== null,\n          'Expected an element to be set after rendering',\n        );\n        this.doWork(CHECKED_CAST<React$MixedElement>(element));\n      });\n    }\n  }\n\n  /**\n   * Drive any remaining work to completion and return the rendered result\n   */\n  render(element: React$MixedElement): string {\n    invariant(\n      workInProgressFiber === null && workInProgressState === null,\n      'Cannot render, an existing render is in progress',\n    );\n    const hasChanges = element !== this.element;\n    this.element = element;\n    if (hasChanges) {\n      this.doWork(element);\n    }\n\n    invariant(this.root !== null, 'Expected root to be rendered');\n    const root: Fiber = CHECKED_CAST<Fiber>(this.root);\n    const output: string[] = [];\n    this.printFiber(root, output, 0);\n    return join(output, '\\n');\n  }\n\n  doWork(element: React$MixedElement): void {\n    let mustRender = this.root === null;\n    for (const update of this.updateQueue) {\n      mustRender = update.run() || mustRender;\n    }\n    this.updateQueue = ([]: Update<mixed>[]);\n    if (!mustRender) {\n      return;\n    }\n\n    // Visit the tree in pre-order, rendering each node\n    // and then processing its children\n    // eslint-disable-next-line consistent-this\n    workInProgressRoot = this;\n    let fiber = this.root;\n    if (fiber === null) {\n      fiber = this.mountFiber(element, null);\n      this.root = fiber;\n    }\n    while (fiber !== null) {\n      // Render the fiber, which creates child/sibling nodes\n      let fiber2: Fiber = CHECKED_CAST<Fiber>(fiber);\n      this.renderFiber(fiber2);\n      // advance to the next fiber\n      if (fiber2.child !== null) {\n        fiber = fiber2.child;\n      } else if (fiber2.sibling !== null) {\n        fiber = fiber2.sibling;\n      } else {\n        fiber = fiber2.parent;\n        while (fiber !== null && CHECKED_CAST<Fiber>(fiber).sibling === null) {\n          fiber = CHECKED_CAST<Fiber>(fiber).parent;\n        }\n        if (fiber !== null) {\n          fiber = CHECKED_CAST<Fiber>(fiber).sibling;\n        }\n      }\n    }\n    workInProgressRoot = null;\n  }\n\n  /**\n   * Prints a representation of the output DOM as HTML, emitting HTML snippets to @param out.\n   */\n  printFiber(fiber: Fiber, out: string[], level: number): void {\n    switch (fiber.type.kind) {\n      case 'host': {\n        const tag = CHECKED_CAST<FiberTypeHost>(fiber.type).tag;\n        const padStr = padString(' ', level);\n        let str = padStr + '<' + tag;\n        for (const [propName, propValue] of Object.entries(fiber.props)) {\n          if (propValue == null || typeof propValue === 'function') {\n            continue;\n          }\n\n          str += ` ${propName}=${JSON.stringify(propValue) ?? 'undefined'}`;\n        }\n        if (fiber.child == null) {\n          str += ' />';\n          out.push(str);\n        } else {\n          str += '>';\n          out.push(str);\n          this.printChildren(fiber, out, level + 1);\n          out.push(padStr + '</' + tag + '>');\n        }\n        break;\n      }\n      case 'text': {\n        const text = CHECKED_CAST<FiberTypeText>(fiber.type).text;\n        if (text !== '') {\n          out.push(padString(' ', level) + text);\n        }\n        break;\n      }\n      case 'fragment':\n      case 'component': {\n        this.printChildren(fiber, out, level);\n        break;\n      }\n    }\n  }\n\n  printChildren(fiber: Fiber, out: string[], level: number): void {\n    let current: Fiber | null = fiber.child;\n    while (current !== null) {\n      this.printFiber(CHECKED_CAST<Fiber>(current), out, level);\n      current = CHECKED_CAST<Fiber>(current).sibling;\n    }\n  }\n\n  /**\n   * Renders and reconciles the output of the given @param fiber. Note that this does not *render*\n   * children, it only reconciles the current output of the fiber with the previous children.\n   */\n  renderFiber(fiber: Fiber): void {\n    try {\n      workInProgressFiber = fiber;\n      workInProgressState = null;\n      switch (fiber.type.kind) {\n        case 'component': {\n          invariant(\n            renderPhaseUpdateQueue.length === 0,\n            'Expected no queued render updates',\n          );\n          const render: (props: Props) => React$MixedElement =\n            CHECKED_CAST<FiberTypeComponent>(fiber.type).component;\n          let element = render(fiber.props);\n          let iterationCount: number = 0;\n          while (renderPhaseUpdateQueue.length !== 0) {\n            iterationCount++;\n            invariant(\n              iterationCount < 1000,\n              'Possible infinite loop with setState during render',\n            );\n            let hasChanges = false;\n            for (const update of renderPhaseUpdateQueue) {\n              invariant(\n                update.fiber === fiber,\n                'setState() during render is currently only supported when updating the component ' +\n                  'being rendered. Setting state from another component is not supported.',\n              );\n              hasChanges = update.run() || hasChanges;\n            }\n            renderPhaseUpdateQueue.length = 0;\n            if (!hasChanges) {\n              break;\n            }\n            element = render(fiber.props);\n          }\n          fiber.child = this.reconcileFiber(fiber, fiber.child, element);\n          break;\n        }\n        case 'host': {\n          const id = fiber.props.id;\n          if (id != null) {\n            const onClick = fiber.props.onClick;\n            if (onClick != null) {\n              callbacks.set(id, onClick);\n            }\n            const onChange = fiber.props.onChange;\n            if (onChange != null) {\n              callbacks.set(id, onChange);\n            }\n          }\n          break;\n        }\n        case 'fragment':\n        case 'text': {\n          // Nothing to reconcile, these nodes are visited by the main doWork() loop\n          break;\n        }\n        default: {\n          throw new Error('Unexpected fiber kind: ' + fiber.type.kind);\n        }\n      }\n    } finally {\n      workInProgressFiber = null;\n      workInProgressState = null;\n    }\n  }\n\n  /**\n   * Create a new fiber for the given element. Used when there is no fiber at\n   * a given tree position which can be reused.\n   */\n  mountFiber(elementOrString: React$Node, parent: Fiber | null): Fiber {\n    let fiber: Fiber;\n    // TODO: Support Array of Node's being returned from a component.\n    if (typeof elementOrString === 'object') {\n      const element = CHECKED_CAST<React$MixedElement>(elementOrString);\n      if (typeof element.type === 'function') {\n        const component: Component = CHECKED_CAST<Component>(element.type);\n        const type: FiberType = new FiberTypeComponent(component);\n        fiber = new Fiber(type, (element.props: any), element.key);\n      } else if (typeof element.type === 'string') {\n        invariant(\n          typeof element.type === 'string',\n          'Expected a host component name such as \"div\" or \"span\", got ' +\n            typeof element.type,\n        );\n        const type: FiberType = new FiberTypeHost(\n          CHECKED_CAST<string>(element.type),\n        );\n        invariant(\n          element.props !== null && typeof element.props === 'object',\n          'Expected component props',\n        );\n\n        // const {children, ...props} = element.props;\n        const children = element.props.children;\n        const props = {...element.props};\n        delete props.children;\n\n        fiber = new Fiber(type, props, element.key);\n        this.mountChildren(children, fiber);\n      } else {\n        switch (element.type) {\n          case REACT_FRAGMENT_TYPE: {\n            const type: FiberType = new FiberTypeFragment();\n            fiber = new Fiber(type, (element.props: any), element.key);\n            this.mountChildren(element.props.children, fiber);\n            break;\n          }\n          default: {\n            throw new Error(`Unknown element type ${element.type}`);\n          }\n        }\n      }\n    } else if (typeof elementOrString === 'string') {\n      const type = new FiberTypeText(CHECKED_CAST<string>(elementOrString));\n      fiber = new Fiber(type, {}, null);\n    } else {\n      throw new Error(`Unexpected element type of ${typeof elementOrString}`);\n    }\n    fiber.parent = parent;\n    return fiber;\n  }\n\n  mountChildren(children: React$Node, parentFiber: Fiber): void {\n    if (Array.isArray(children)) {\n      let prev: Fiber | null = null;\n      for (const childElement of CHECKED_CAST<any[]>(children)) {\n        if (childElement == null) {\n          continue;\n        }\n        const child = this.mountFiber(\n          CHECKED_CAST<React$Node>(childElement),\n          parentFiber,\n        );\n        if (prev !== null) {\n          CHECKED_CAST<Fiber>(prev).sibling = child;\n        } else {\n          // set parent to point to first child\n          parentFiber.child = child;\n        }\n        prev = child;\n      }\n    } else if (children != null) {\n      const child = this.mountFiber((children: any), parentFiber);\n      parentFiber.child = child;\n    }\n  }\n\n  /**\n   * Update's @param parent's child to reflect the latest desired output as described by @param element.\n   * This either reuses @param prevChild if present and the component type matches, otherwise it creates\n   * a new Fiber.\n   */\n  reconcileFiber(\n    parent: Fiber,\n    prevChild: Fiber | null,\n    element: React$MixedElement,\n  ): Fiber {\n    if (\n      prevChild !== null &&\n      CHECKED_CAST<Fiber>(prevChild).type === element.type\n    ) {\n      let prevChild: Fiber = CHECKED_CAST<Fiber>(prevChild);\n      // Only host and fragment nodes have to be reconciled: otherwise this is a\n      // function component and its children will be reconciled when they are later\n      // emitted in a host position (ie as a direct result of render)\n      switch (prevChild.type.kind) {\n        case 'host': {\n          invariant(\n            element.props !== null && typeof element.props === 'object',\n            'Expected component props',\n          );\n\n          // const {children, ...props} = element.props;\n          const children = element.props.children;\n          const props = {...element.props};\n          delete props.children;\n\n          prevChild.props = props;\n          this.reconcileChildren(prevChild, (children: any));\n          break;\n        }\n        case 'fragment': {\n          invariant(\n            element.props !== null && typeof element.props === 'object',\n            'Expected component props',\n          );\n\n          const children = element.props.children;\n          this.reconcileChildren(prevChild, (children: any));\n          break;\n        }\n        case 'component': {\n          invariant(\n            element.props !== null && typeof element.props === 'object',\n            'Expected component props',\n          );\n          prevChild.props = element.props;\n          break;\n        }\n        default: {\n          throw new Error(`Unknown node kind ${prevChild.type.kind}`);\n        }\n      }\n      return prevChild;\n    } else {\n      const child = this.mountFiber(element, parent);\n      return child;\n    }\n  }\n\n  /**\n   * Reconciles the @param parent fiber's children nodes.\n   */\n  reconcileChildren(parent: Fiber, children: React$Node): void {\n    const prevChild: Fiber | null = parent.child;\n    if (Array.isArray(children)) {\n      let childrenArray = CHECKED_CAST<React$MixedElement[]>(children);\n      // Fast-path for empty and single-element arrays\n      if (childrenArray.length === 0) {\n        parent.child = null;\n      } else if (childrenArray.length === 1) {\n        parent.child = this.reconcileFiber(parent, prevChild, childrenArray[0]);\n        CHECKED_CAST<Fiber>(parent.child).sibling = null;\n      } else {\n        this.reconcileMultipleChildren(parent, childrenArray);\n      }\n    } else if (typeof children === 'string') {\n      if (\n        prevChild === null ||\n        CHECKED_CAST<Fiber>(prevChild).type.kind !== 'text'\n      ) {\n        const type = new FiberTypeText(CHECKED_CAST<string>(children));\n        const child = new Fiber(type, {}, null);\n        parent.child = child;\n      } else {\n        CHECKED_CAST<FiberTypeText>(CHECKED_CAST<Fiber>(prevChild).type).text =\n          CHECKED_CAST<string>(children);\n      }\n    } else if (children != null) {\n      parent.child = this.reconcileFiber(\n        parent,\n        prevChild,\n        CHECKED_CAST<React$MixedElement>(children),\n      );\n      CHECKED_CAST<Fiber>(parent.child).sibling = null;\n    } else {\n      parent.child = null;\n      if (prevChild !== null) {\n        CHECKED_CAST<Fiber>(prevChild).parent = null;\n      }\n    }\n  }\n\n  /**\n   * Reconciles the @param parent fiber's children when the children are known to\n   * have 2+ items. Note that the algorithm works for 0+ elements but a fast-path\n   * should be used for 0/1 item cases.\n   */\n  reconcileMultipleChildren(\n    parent: Fiber,\n    children: React$MixedElement[],\n  ): void {\n    invariant(\n      children.length > 1,\n      'Expected children to have multiple elements',\n    );\n    // map existing children by key to make subsequent lookup O(log n)\n    const keyedChildren: any = new Map();\n    let current: Fiber | null = parent.child;\n    while (current !== null) {\n      if (CHECKED_CAST<Fiber>(current).key !== null) {\n        keyedChildren.set(CHECKED_CAST<Fiber>(current).key, current);\n      }\n      current = CHECKED_CAST<Fiber>(current).sibling;\n    }\n    let prev: Fiber | null = null; // previous fiber at this key/index\n    let prevByIndex: Fiber | null = parent.child; // keep track of prev fiber at this index\n    for (const childElement of children) {\n      const prevFiber =\n        (childElement.key != null\n          ? keyedChildren.get(childElement.key)\n          : null) ?? prevByIndex;\n      let child: Fiber;\n      if (prevFiber != null) {\n        child = this.reconcileFiber(parent, prevFiber, childElement);\n      } else {\n        child = this.mountFiber(childElement, parent);\n      }\n      if (prev !== null) {\n        CHECKED_CAST<Fiber>(prev).sibling = child;\n      } else {\n        // set parent to point to first child\n        parent.child = child;\n      }\n      prev = child;\n      prevByIndex =\n        prevByIndex !== null ? CHECKED_CAST<Fiber>(prevByIndex).sibling : null;\n    }\n  }\n}\n\n/**\n * Describes the `type` field of Fiber, which can hold different data depending on the fiber's kind:\n * - Component stores a function of props => element.\n * - Host stores the name of the host component, ie \"div\"\n * - Text stores the text itself.\n */\ntype Component = (props: Props) => React$MixedElement;\n\n// type FiberType =\n//   | {\n//       kind: 'component',\n//       component: Component,\n//     }\n//   | {\n//       kind: 'host',\n//       tag: string,\n//     }\n//   | {\n//       kind: 'text',\n//       text: string,\n//     };\n\nclass FiberType {\n  kind: string;\n  constructor(kind: string) {\n    this.kind = kind;\n  }\n}\n\nclass FiberTypeComponent extends FiberType {\n  component: Component;\n  constructor(component: Component) {\n    super('component');\n    this.component = component;\n  }\n}\nclass FiberTypeHost extends FiberType {\n  tag: string;\n  constructor(tag: string) {\n    super('host');\n    this.tag = tag;\n  }\n}\nclass FiberTypeFragment extends FiberType {\n  constructor() {\n    super('fragment');\n  }\n}\nclass FiberTypeText extends FiberType {\n  text: string;\n  constructor(text: string) {\n    super('text');\n    this.text = text;\n  }\n}\n\n/**\n * The type of component props as seen by the framework, because processing is heterogenous\n * the framework only looks at the identity of prop values and does not otherwise make any\n * assumptions about which props may exist and what their types are.\n */\nexport type Props = any;\n\n/**\n * Data storage for the useState() hook\n */\nclass State<T> {\n  value: T;\n  next: State<T> | null;\n  prev: State<T> | null;\n\n  constructor(value: T) {\n    this.value = value;\n\n    this.next = null;\n    this.prev = null;\n  }\n}\n\n/**\n * Represents a node in the UI tree, and may correspond to a user-defined function component,\n * a host node, or a text node.\n */\nclass Fiber {\n  type: FiberType;\n  props: Props;\n  parent: Fiber | null;\n  child: Fiber | null;\n  sibling: Fiber | null;\n  state: State<mixed> | null;\n  key: React$Key | null;\n\n  constructor(type: FiberType, props: Props, key: React$Key | null) {\n    this.type = type;\n    this.props = props;\n    this.key = key;\n\n    this.parent = null;\n    this.child = null;\n    this.sibling = null;\n    this.state = null;\n  }\n}\n\nexport function jsx(\n  type: React$ElementType,\n  props: Props,\n  key: React$Key | null,\n): React$MixedElement {\n  'inline';\n  return new React$Element<React$ElementType>(type, props, key, null);\n}\n\nexport function Fragment(props: Props): React$MixedElement {\n  'inline';\n  return new React$Element<React$ElementType>(REACT_FRAGMENT_TYPE, props, null, null);\n}\n\nexport function forwardRef(\n  comp: (props: Props, ref: mixed) => React$MixedElement,\n): Component {\n  return (props: Props): React$MixedElement => comp(props, null);\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport type {Props, React$MixedElement} from 'react';\n\nimport {useState} from 'react';\n\nfunction Button(props: Props): React$MixedElement {\n  return (\n    <button id={props.id} onClick={props.onClick}>\n      Click me\n    </button>\n  );\n}\n\nfunction Input(props: Props): React$MixedElement {\n  return (\n    <input\n      id={props.id}\n      type=\"text\"\n      onChange={props.onChange}\n      value={props.value}\n    />\n  );\n}\n\nfunction TextArea(props: Props): React$MixedElement {\n  return <textarea onChange={props.onChange}>{props.value}</textarea>;\n}\n\nfunction Select(props: Props): React$MixedElement {\n  const children = [];\n  for (let i = 0; i < props.options.length; i++) {\n    const option = props.options[i];\n    children.push(\n      <option key={option.value} value={option.value}>\n        {option.label}\n      </option>,\n    );\n  }\n  return <select onChange={props.onChange}>{children}</select>;\n}\n\nfunction Checkbox(props: Props): React$MixedElement {\n  return (\n    <input type=\"checkbox\" checked={props.checked} onChange={props.onChange} />\n  );\n}\n\nfunction Radio(props: Props): React$MixedElement {\n  return (\n    <input type=\"radio\" checked={props.checked} onChange={props.onChange} />\n  );\n}\n\nfunction Slider(props: Props): React$MixedElement {\n  return (\n    <input\n      type=\"range\"\n      min={props.min}\n      max={props.max}\n      step={props.step}\n      value={props.value}\n      onChange={props.onChange}\n    />\n  );\n}\n\nfunction ProgressBar(props: Props): React$MixedElement {\n  return <div style={{width: `${props.progress}%`}}></div>;\n}\n\nfunction Spinner(props: Props): React$MixedElement {\n  return <div className=\"spinner\">Loading...</div>;\n}\n\nfunction Modal(props: Props): React$MixedElement {\n  if (!props.isOpen) {\n    return <div className=\"modal closed\" />;\n  }\n\n  return (\n    <div className=\"modal open\">\n      <div className=\"overlay\" onClick={props.onClose}>\n        X\n      </div>\n      <div className=\"content\">{props.children}</div>\n    </div>\n  );\n}\n\nfunction Tooltip(props: Props): React$MixedElement {\n  if (!props.isOpen) {\n    return <div className=\"tooltip closed\" />;\n  }\n\n  return (\n    <div className=\"tooltip open\">\n      <div className=\"arrow\"></div>\n      <div className=\"content\">{props.children}</div>\n    </div>\n  );\n}\n\nexport default function App(props: Props): React$MixedElement {\n  const [text, setText] = useState<string>('');\n  const [number, setNumber] = useState<number>(0);\n  const [isChecked, setIsChecked] = useState<boolean>(false);\n  const [isSelected, setIsSelected] = useState<boolean>(false);\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n  const [isTooltipOpen, setIsTooltipOpen] = useState<boolean>(true);\n  return (\n    <div>\n      <h1>React Benchmark</h1>\n      <Button id=\"toggle-modal\" onClick={(): void => setIsOpen(!isOpen)}>\n        Toggle Modal\n      </Button>\n      <Modal isOpen={isOpen} onClose={(): void => setIsOpen(false)}>\n        <h2>Modal Content</h2>\n        <p>This is some modal content.</p>\n        <Tooltip\n          isOpen={isTooltipOpen}\n          onClose={(): void => setIsTooltipOpen(false)}>\n          <h3>Tooltip Content</h3>\n          <p>This is some tooltip content.</p>\n        </Tooltip>\n      </Modal>\n      <div>\n        <h2>Form Elements</h2>\n        <Input\n          id=\"update-text\"\n          value={text}\n          onChange={e => setText(e.target.value)}\n        />\n        <TextArea value={text} onChange={e => setText(e.target.value)} />\n        <Select\n          options={[\n            {label: 'Option 1', value: 1},\n            {label: 'Option 2', value: 2},\n            {label: 'Option 3', value: 3},\n          ]}\n          onChange={e => setNumber(parseInt(e.target.value))}\n        />\n        <Checkbox\n          checked={isChecked}\n          onChange={e => setIsChecked(e.target.checked)}\n        />\n        <Radio\n          checked={isSelected}\n          onChange={e => setIsSelected(e.target.checked)}\n        />\n        <Slider\n          min={0}\n          max={100}\n          step={1}\n          value={number}\n          onChange={e => setNumber(parseInt(e.target.value))}\n        />\n        <ProgressBar progress={number} />\n        <Spinner />\n      </div>\n    </div>\n  );\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport * as React from 'react';\nimport App from './App';\nimport {drainMicrotaskQueue} from 'sh/microtask';\n\nfunction printIf1(i: number, str: string): void {\n  if (i === 1) {\n    print('===============================');\n    print(str);\n    print('===============================');\n  }\n}\n\nfunction run(N: number): void {\n  // Warmup\n  for (let i: number = 1; i <= 100; ++i) {\n    const root = React.createRoot();\n    const rootElement = <App />;\n    printIf1(i, root.render(rootElement));\n\n    React.callOnClickOrChange('toggle-modal', null);\n    React.callOnClickOrChange('update-text', {\n      target: {value: '!!!!! some text !!!!!'},\n    });\n    drainMicrotaskQueue();\n    printIf1(i, root.render(rootElement));\n  }\n\n  // Benchmark\n  var start = Date.now();\n  for (let i: number = 1; i <= N; ++i) {\n    const root = React.createRoot();\n    const rootElement = <App />;\n    root.render(rootElement);\n\n    React.callOnClickOrChange('toggle-modal', null);\n    React.callOnClickOrChange('update-text', {\n      target: {value: '!!!!! some text !!!!!'},\n    });\n    drainMicrotaskQueue();\n    root.render(rootElement);\n  }\n  var end = Date.now();\n  print(`${end - start} ms`);\n}\n\nrun(10_000);\n"],"mappings":"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"}