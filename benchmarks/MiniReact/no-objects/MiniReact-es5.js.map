{"version":3,"names":["invariant$default","condition","format","Error","CHECKED_CAST$default","value","microtask$INTERNAL$microtaskQueue","microtask$drainMicrotaskQueue","i","length","microtask$queueMicrotask","callback","push","React$INTERNAL$fastArrayJoin","arr","sep","result","e","React$INTERNAL$padString","str","len","React$INTERNAL$React$Element","_createClass","type","props","key","ref","_classCallCheck","React$INTERNAL$workInProgressRoot","React$INTERNAL$workInProgressFiber","React$INTERNAL$workInProgressState","React$INTERNAL$renderPhaseUpdateQueue","React$createRoot","React$INTERNAL$Root","React$useState","initial","root","fiber","state","_workInProgressState","nextState","React$INTERNAL$State","next","updater","update","React$INTERNAL$Update","notify","React$INTERNAL$callbacks","Map","React$callOnClickOrChange","id","event","get","run","fn","changed","Object","is","element","updateQueue","_this","doWork","render","hasChanges","output","printFiber","mustRender","mountFiber","fiber2","renderFiber","child","sibling","parent","out","level","kind","tag","padStr","_ref","entries","_JSON$stringify","_ref2","_slicedToArray","propName","propValue","JSON","stringify","printChildren","text","current","component","iterationCount","reconcileFiber","onClick","set","onChange","elementOrString","React$INTERNAL$FiberTypeComponent","React$INTERNAL$Fiber","React$INTERNAL$FiberTypeHost","children","assign","Array","isArray","prev","childElement","React$INTERNAL$FiberTypeText","prevChild","reconcileChildren","childrenArray","reconcileMultipleChildren","keyedChildren","prevByIndex","_ref3","prevFiber","React$INTERNAL$FiberType","_React$INTERNAL$Fiber","_inherits","_super","_createSuper","_this2","call","_React$INTERNAL$Fiber2","_super2","_this3","_React$INTERNAL$Fiber3","_super3","_this4","React$jsx","React$Fragment","App$INTERNAL$Button","App$INTERNAL$Input","App$INTERNAL$TextArea","App$INTERNAL$Select","options","option","label","App$INTERNAL$Checkbox","checked","App$INTERNAL$Radio","App$INTERNAL$Slider","min","max","step","App$INTERNAL$ProgressBar","style","width","progress","App$INTERNAL$Spinner","className","App$INTERNAL$Modal","isOpen","onClose","App$INTERNAL$Tooltip","App$default","_React$useState","_React$useState2","setText","_React$useState3","_React$useState4","number","setNumber","_React$useState5","_React$useState6","isChecked","setIsChecked","_React$useState7","_React$useState8","isSelected","setIsSelected","_React$useState9","_React$useState10","setIsOpen","_React$useState11","_React$useState12","isTooltipOpen","setIsTooltipOpen","target","parseInt","index$INTERNAL$printIf1","print","index$INTERNAL$run","N","rootElement"],"sources":["benchmarks/MiniReact/no-objects/src/invariant.js","benchmarks/MiniReact/no-objects/src/CHECKED_CAST.js","benchmarks/MiniReact/no-objects/src/microtask.js","benchmarks/MiniReact/no-objects/src/React.js","benchmarks/MiniReact/no-objects/src/App.js","benchmarks/MiniReact/no-objects/src/index.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nexport default function invariant(condition: boolean, format: string): void {\n  'inline';\n\n  if (!condition) {\n    throw new Error(format);\n  }\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nexport default function CHECKED_CAST<T>(value: mixed): T {\n  'inline';\n  return (value: any);\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nlet microtaskQueue = [];\n\nexport function drainMicrotaskQueue(): void {\n  for (let i = 0; i < microtaskQueue.length; i++) {\n    microtaskQueue[i]();\n  }\n  microtaskQueue = [];\n}\n\nexport function queueMicrotask(callback: () => void): void {\n  microtaskQueue.push(callback);\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport invariant from './invariant';\nimport CHECKED_CAST from './CHECKED_CAST';\nimport {queueMicrotask} from './microtask';\n\nfunction fastArrayJoin(arr: string[], sep: string): string {\n  let result: string = '';\n  for (let i: number = 0, e = arr.length; i < e; ++i) {\n    if (i !== 0) result += sep;\n    result += arr[i];\n  }\n  return result;\n}\n\nfunction padString(str: string, len: number): string {\n  let result: string = '';\n  for (let i: number = 0; i < len; i++) {\n    result += str;\n  }\n  return result;\n}\n\nexport type React$Node = string | React$Element<React$ElementType>;\n\n/**\n * The type of an element in React. A React element may be a:\n *\n * - String. These elements are intrinsics that depend on the React renderer\n *   implementation.\n * - React component. See `ComponentType` for more information about its\n *   different variants.\n */\ntype React$ElementType =\n  | string\n  | Component /* TODO: React$AbstractComponent<empty, mixed> */;\n\n/**\n * Type of a React element. React elements are commonly created using JSX\n * literals, which desugar to React.createElement calls (see below).\n */\n// type React$Element<ElementType: React$ElementType> = {|\n//   type: ElementType,\n//   props: Props,\n//   key: React$Key | null,\n//   ref: any,\n// |};\nclass React$Element<ElementType> {\n  type: ElementType;\n  props: Props;\n  key: React$Key | null;\n  ref: any;\n\n  constructor(\n    type: ElementType,\n    props: Props,\n    key: React$Key | null,\n    ref: any,\n  ) {\n    this.type = type;\n    this.props = props;\n    this.key = key;\n    this.ref = ref;\n  }\n}\n\nexport type React$MixedElement = React$Element<React$ElementType>;\n\n/**\n * The type of the key that React uses to determine where items in a new list\n * have moved.\n */\ntype React$Key = string | number;\n\n/* eslint-disable lint/strictly-null, lint/react-state-props-mutation, lint/flow-react-element */\n\n/**\n * The current root\n */\nlet workInProgressRoot: Root | null = null;\n\n/**\n * The currently rendering fiber. Only set when a component is being rendered.\n */\nlet workInProgressFiber: Fiber | null = null;\n\n/**\n * The previous state hook, or null if no state hook has been evaluated yet.\n */\nlet workInProgressState: State<mixed> | null = null;\n\n/**\n * Queue of updates triggered *during* render.\n */\nconst renderPhaseUpdateQueue: Update<mixed>[] = [];\n\n/**\n * Public API to create a new \"root\", this is where React attaches rendering to a host element.\n * In our case we don't actually have a real host, and currently only \"render\" to strings.\n */\nexport function createRoot(): Root {\n  return new Root();\n}\n\n/**\n * Hook to create (on initial render) or access (on update) a state, using the index of the useState\n * call within the component as the identity. Thus conditionally calling this API can cause state to\n * be lost.\n */\nexport function useState<T>(\n  /**\n   * Initial value of the state\n   */\n  initial: T,\n): [T, (value: T | ((prev: T) => T)) => void] {\n  const root: Root = CHECKED_CAST<Root>(workInProgressRoot);\n  const fiber: Fiber = CHECKED_CAST<Fiber>(workInProgressFiber);\n  invariant(\n    fiber !== null && root !== null,\n    'useState() called outside of render',\n  );\n\n  let state: State<T>;\n  const _workInProgressState: State<mixed> | null = workInProgressState;\n  if (_workInProgressState === null) {\n    // Get or initialize the first state on the fiber\n    let nextState = fiber.state;\n    if (nextState === null) {\n      nextState = new State<mixed>(initial);\n      fiber.state = nextState;\n    }\n    // NOTE: in case of a re-render we assume that the hook types match but\n    // can't statically prove this\n    state = CHECKED_CAST<State<T>>(nextState);\n  } else {\n    let nextState = CHECKED_CAST<State<mixed>>(_workInProgressState).next;\n    if (nextState === null) {\n      nextState = new State<mixed>(initial);\n      CHECKED_CAST<State<mixed>>(_workInProgressState).next = nextState;\n    }\n    // NOTE: in case of a re-render we assume that the hook types match but\n    // can't statically prove this\n    state = CHECKED_CAST<State<T>>(nextState);\n  }\n  // NOTE: this should just work because of subtying, State<T> should be subtype of State<mixed>\n  workInProgressState = CHECKED_CAST<State<mixed>>(state);\n  return [\n    // Untyped check that the existing state value has the correct type,\n    // This is safe if components follow the rules of hooks\n    CHECKED_CAST<T>(state.value),\n    (updater: T | ((prev: T) => T)): void => {\n      const update = new Update<mixed>(\n        fiber,\n        CHECKED_CAST<State<mixed>>(state),\n        CHECKED_CAST<T | ((prev: T) => T)>(updater),\n      );\n      if (workInProgressFiber !== null) {\n        // called during render\n        renderPhaseUpdateQueue.push(update);\n      } else {\n        root.notify(update);\n      }\n    },\n  ];\n}\n\nconst callbacks = new Map();\nexport function callOnClickOrChange(id: string, event: any): void {\n  const callback = callbacks.get(id);\n  if (callback == null) {\n    throw new Error('No callback registered with id: ' + id);\n  }\n  callback(event);\n}\n\n/**\n * The type of value that may be passed to the setState function (second part of useState return value).\n * - T: the new value\n * - (prev: T) => T: a function to compute the new value from the old value\n */\n// type Updater<T> = T | ((prev: T) => T);\n\n/**\n * The type of the setState function (second element of the array returned by useState).\n */\n// type SetState<T> = (value: Updater<T>) => void;\n\n/**\n * A queued state update.\n */\nclass Update<T> {\n  fiber: Fiber; // used to check state updates that occur during render to see if they came from the current component.\n  state: State<T>;\n  updater: T | ((prev: T) => T); // Updater<T>;\n\n  constructor(fiber: Fiber, state: State<T>, updater: T | ((prev: T) => T)) {\n    this.fiber = fiber;\n    this.state = state;\n    this.updater = updater;\n  }\n\n  /**\n   * Process the state update\n   */\n  run(): boolean {\n    const state = this.state;\n    let value: T = state.value;\n    const updater = this.updater;\n    if (typeof updater === 'function') {\n      // NOTE: The type of Updater<T> is meant to expresss `T (not function) | T (function of T => T)`\n      // thus the fact that updater is a function here menas its a function of T => T.\n      const fn = CHECKED_CAST<(prev: T) => T>(updater);\n      value = fn(state.value);\n    } else {\n      // NOTE: The type of Updater<T> is meant to expresss `T (not function) | T (function of T => T)`\n      // thus the fact that updater is *not* a function here means it is a T\n      value = CHECKED_CAST<T>(updater);\n    }\n    const changed = !Object.is(state.value, value);\n    state.value = value;\n    return changed;\n  }\n}\n\nclass Root {\n  /**\n   * The fiber representing the root node (`element`), null until\n   * render is first called.\n   */\n  root: Fiber | null;\n\n  /**\n   * The last rendered root element, initially null.\n   */\n  element: React$MixedElement | null;\n\n  /**\n   * Queue of updates (state changes) to apply on the next render\n   */\n  updateQueue: Update<mixed>[];\n\n  constructor() {\n    this.root = null;\n    this.element = null;\n    this.updateQueue = ([]: Update<mixed>[]);\n  }\n\n  /**\n   * Notify the root that an update is scheduled\n   */\n  notify(update: Update<mixed>): void {\n    this.updateQueue.push(update);\n    if (this.updateQueue.length === 1) {\n      queueMicrotask((): void => {\n        const element = this.element;\n        invariant(\n          element !== null,\n          'Expected an element to be set after rendering',\n        );\n        this.doWork(CHECKED_CAST<React$MixedElement>(element));\n      });\n    }\n  }\n\n  /**\n   * Drive any remaining work to completion and return the rendered result\n   */\n  render(element: React$MixedElement): string {\n    invariant(\n      workInProgressFiber === null && workInProgressState === null,\n      'Cannot render, an existing render is in progress',\n    );\n    const hasChanges = element !== this.element;\n    this.element = element;\n    if (hasChanges) {\n      this.doWork(element);\n    }\n\n    invariant(this.root !== null, 'Expected root to be rendered');\n    const root: Fiber = CHECKED_CAST<Fiber>(this.root);\n    const output: string[] = [];\n    this.printFiber(root, output, 0);\n    // return output.join('');\n    return fastArrayJoin(output, '\\n');\n  }\n\n  doWork(element: React$MixedElement): void {\n    let mustRender = this.root === null;\n    for (const update of this.updateQueue) {\n      mustRender = update.run() || mustRender;\n    }\n    this.updateQueue = ([]: Update<mixed>[]);\n    if (!mustRender) {\n      return;\n    }\n\n    // Visit the tree in pre-order, rendering each node\n    // and then processing its children\n    // eslint-disable-next-line consistent-this\n    workInProgressRoot = this;\n    let fiber = this.root;\n    if (fiber === null) {\n      fiber = this.mountFiber(element, null);\n      this.root = fiber;\n    }\n    while (fiber !== null) {\n      // Render the fiber, which creates child/sibling nodes\n      let fiber2: Fiber = CHECKED_CAST<Fiber>(fiber);\n      this.renderFiber(fiber2);\n      // advance to the next fiber\n      if (fiber2.child !== null) {\n        fiber = fiber2.child;\n      } else if (fiber2.sibling !== null) {\n        fiber = fiber2.sibling;\n      } else {\n        fiber = fiber2.parent;\n        while (fiber !== null && CHECKED_CAST<Fiber>(fiber).sibling === null) {\n          fiber = CHECKED_CAST<Fiber>(fiber).parent;\n        }\n        if (fiber !== null) {\n          fiber = CHECKED_CAST<Fiber>(fiber).sibling;\n        }\n      }\n    }\n    workInProgressRoot = null;\n  }\n\n  /**\n   * Prints a representation of the output DOM as HTML, emitting HTML snippets to @param out.\n   */\n  printFiber(fiber: Fiber, out: string[], level: number): void {\n    switch (fiber.type.kind) {\n      case 'host': {\n        const tag = CHECKED_CAST<FiberTypeHost>(fiber.type).tag;\n        const padStr = padString(' ', level);\n        let str = padStr + '<' + tag;\n        for (const [propName, propValue] of Object.entries(fiber.props)) {\n          if (typeof propValue === 'function') {\n            continue;\n          }\n\n          str += ` ${propName}=${JSON.stringify(propValue) ?? 'undefined'}`;\n        }\n        str += '>';\n        out.push(str);\n        this.printChildren(fiber, out, level + 1);\n        out.push(padStr + '</' + tag + '>');\n        break;\n      }\n      case 'text': {\n        const text = CHECKED_CAST<FiberTypeText>(fiber.type).text;\n        if (text !== '') {\n          out.push(padString(' ', level) + text);\n        }\n        break;\n      }\n      case 'component': {\n        this.printChildren(fiber, out, level);\n        break;\n      }\n    }\n  }\n\n  printChildren(fiber: Fiber, out: string[], level: number): void {\n    let current: Fiber | null = fiber.child;\n    while (current !== null) {\n      this.printFiber(CHECKED_CAST<Fiber>(current), out, level);\n      current = CHECKED_CAST<Fiber>(current).sibling;\n    }\n  }\n\n  /**\n   * Renders and reconciles the output of the given @param fiber. Note that this does not *render*\n   * children, it only reconciles the current output of the fiber with the previous children.\n   */\n  renderFiber(fiber: Fiber): void {\n    try {\n      workInProgressFiber = fiber;\n      workInProgressState = null;\n      switch (fiber.type.kind) {\n        case 'component': {\n          invariant(\n            renderPhaseUpdateQueue.length === 0,\n            'Expected no queued render updates',\n          );\n          const render: (props: Props) => React$MixedElement =\n            CHECKED_CAST<FiberTypeComponent>(fiber.type).component;\n          let element = render(fiber.props);\n          let iterationCount: number = 0;\n          while (renderPhaseUpdateQueue.length !== 0) {\n            iterationCount++;\n            invariant(\n              iterationCount < 1000,\n              'Possible infinite loop with setState during render',\n            );\n            let hasChanges = false;\n            for (const update of renderPhaseUpdateQueue) {\n              invariant(\n                update.fiber === fiber,\n                'setState() during render is currently only supported when updating the component ' +\n                  'being rendered. Setting state from another component is not supported.',\n              );\n              hasChanges = update.run() || hasChanges;\n            }\n            renderPhaseUpdateQueue.length = 0;\n            if (!hasChanges) {\n              break;\n            }\n            element = render(fiber.props);\n          }\n          fiber.child = this.reconcileFiber(fiber, fiber.child, element);\n          break;\n        }\n        case 'host': {\n          const id = fiber.props.id;\n          if (id != null) {\n            const onClick = fiber.props.onClick;\n            if (onClick != null) {\n              callbacks.set(id, onClick);\n            }\n            const onChange = fiber.props.onChange;\n            if (onChange != null) {\n              callbacks.set(id, onChange);\n            }\n          }\n          break;\n        }\n        case 'text': {\n          // Nothing to reconcile, these nodes are visited by the main doWork() loop\n          break;\n        }\n      }\n    } finally {\n      workInProgressFiber = null;\n      workInProgressState = null;\n    }\n  }\n\n  /**\n   * Create a new fiber for the given element. Used when there is no fiber at\n   * a given tree position which can be reused.\n   */\n  mountFiber(elementOrString: React$Node, parent: Fiber | null): Fiber {\n    let fiber: Fiber;\n    if (typeof elementOrString === 'object') {\n      const element = CHECKED_CAST<React$MixedElement>(elementOrString);\n      if (typeof element.type === 'function') {\n        const component: Component = CHECKED_CAST<Component>(element.type);\n        // const type: FiberType = {\n        //   kind: 'component',\n        //   component,\n        // };\n        const type: FiberType = new FiberTypeComponent(component);\n        fiber = new Fiber(type, (element.props: any), element.key);\n      } else {\n        invariant(\n          typeof element.type === 'string',\n          'Expected a host component name such as \"div\" or \"span\", got ' +\n            CHECKED_CAST<string>(element.type),\n        );\n        // const type: FiberType = {\n        //   kind: 'host',\n        //   tag: element.type,\n        // };\n        const type: FiberType = new FiberTypeHost(\n          CHECKED_CAST<string>(element.type),\n        );\n        invariant(\n          element.props !== null && typeof element.props === 'object',\n          'Expected component props',\n        );\n\n        // const {children, ...props} = element.props;\n        const children = element.props.children;\n        const props = {...element.props};\n        delete props.children;\n\n        fiber = new Fiber(type, props, element.key);\n        if (Array.isArray(children)) {\n          let prev: Fiber | null = null;\n          for (const childElement of CHECKED_CAST<any[]>(children)) {\n            const child = this.mountFiber(\n              CHECKED_CAST<React$Node>(childElement),\n              fiber,\n            );\n            if (prev !== null) {\n              CHECKED_CAST<Fiber>(prev).sibling = child;\n            } else {\n              // set parent to point to first child\n              fiber.child = child;\n            }\n            prev = child;\n          }\n        } else if (typeof children === 'string') {\n          const child = new Fiber({kind: 'text', text: children}, {}, null);\n          child.parent = fiber;\n          fiber.child = child;\n        } else if (children != null) {\n          const child = this.mountFiber((children: any), fiber);\n          fiber.child = child;\n        }\n      }\n    } else {\n      invariant(typeof elementOrString === 'string', 'Expected a string');\n      // const type: FiberType = {\n      //   kind: 'text',\n      //   text: element,\n      // };\n      const type = new FiberTypeText(CHECKED_CAST<string>(elementOrString));\n      fiber = new Fiber(type, {}, null);\n    }\n    fiber.parent = parent;\n    return fiber;\n  }\n\n  /**\n   * Update's @param parent's child to reflect the latest desired output as described by @param element.\n   * This either reuses @param prevChild if present and the component type matches, otherwise it creates\n   * a new Fiber.\n   */\n  reconcileFiber(\n    parent: Fiber,\n    prevChild: Fiber | null,\n    element: React$MixedElement,\n  ): Fiber {\n    if (\n      prevChild !== null &&\n      CHECKED_CAST<Fiber>(prevChild).type === element.type\n    ) {\n      let prevChild: Fiber = CHECKED_CAST<Fiber>(prevChild);\n      // Only host nodes have to be reconciled: otherwise this is a function component\n      // and its children will be reconciled when they are later emitted in a host\n      // position (ie as a direct result of render)\n      if (prevChild.type.kind === 'host') {\n        invariant(\n          element.props !== null && typeof element.props === 'object',\n          'Expected component props',\n        );\n\n        // const {children, ...props} = element.props;\n        const children = element.props.children;\n        const props = {...element.props};\n        delete props.children;\n\n        prevChild.props = props;\n        this.reconcileChildren(prevChild, (children: any));\n      } else if (prevChild.type.kind === 'component') {\n        invariant(\n          element.props !== null && typeof element.props === 'object',\n          'Expected component props',\n        );\n        prevChild.props = element.props;\n      }\n      return prevChild;\n    } else {\n      const child = this.mountFiber(element, parent);\n      return child;\n    }\n  }\n\n  /**\n   * Reconciles the @param parent fiber's children nodes.\n   */\n  reconcileChildren(\n    parent: Fiber,\n    children: React$MixedElement[] | React$MixedElement | string | null | void,\n  ): void {\n    const prevChild: Fiber | null = parent.child;\n    if (Array.isArray(children)) {\n      let childrenArray = CHECKED_CAST<React$MixedElement[]>(children);\n      // Fast-path for empty and single-element arrays\n      if (childrenArray.length === 0) {\n        parent.child = null;\n      } else if (childrenArray.length === 1) {\n        parent.child = this.reconcileFiber(parent, prevChild, childrenArray[0]);\n        CHECKED_CAST<Fiber>(parent.child).sibling = null;\n      } else {\n        this.reconcileMultipleChildren(parent, childrenArray);\n      }\n    } else if (typeof children === 'string') {\n      if (\n        prevChild === null ||\n        CHECKED_CAST<Fiber>(prevChild).type.kind !== 'text'\n      ) {\n        const child = new Fiber({kind: 'text', text: children}, {}, null);\n        parent.child = child;\n      } else {\n        CHECKED_CAST<FiberTypeText>(CHECKED_CAST<Fiber>(prevChild).type).text =\n          CHECKED_CAST<string>(children);\n      }\n    } else if (children != null) {\n      parent.child = this.reconcileFiber(\n        parent,\n        prevChild,\n        CHECKED_CAST<React$MixedElement>(children),\n      );\n      CHECKED_CAST<Fiber>(parent.child).sibling = null;\n    } else {\n      parent.child = null;\n      if (prevChild !== null) {\n        CHECKED_CAST<Fiber>(prevChild).parent = null;\n      }\n    }\n  }\n\n  /**\n   * Reconciles the @param parent fiber's children when the children are known to\n   * have 2+ items. Note that the algorithm works for 0+ elements but a fast-path\n   * should be used for 0/1 item cases.\n   */\n  reconcileMultipleChildren(\n    parent: Fiber,\n    children: React$MixedElement[],\n  ): void {\n    invariant(\n      children.length > 1,\n      'Expected children to have multiple elements',\n    );\n    // map existing children by key to make subsequent lookup O(log n)\n    const keyedChildren: any = new Map();\n    let current: Fiber | null = parent.child;\n    while (current !== null) {\n      if (CHECKED_CAST<Fiber>(current).key !== null) {\n        keyedChildren.set(CHECKED_CAST<Fiber>(current).key, current);\n      }\n      current = CHECKED_CAST<Fiber>(current).sibling;\n    }\n    let prev: Fiber | null = null; // previous fiber at this key/index\n    let prevByIndex: Fiber | null = parent.child; // keep track of prev fiber at this index\n    for (const childElement of children) {\n      const prevFiber =\n        (childElement.key != null\n          ? keyedChildren.get(childElement.key)\n          : null) ?? prevByIndex;\n      let child: Fiber;\n      if (prevFiber != null) {\n        child = this.reconcileFiber(parent, prevFiber, childElement);\n      } else {\n        child = this.mountFiber(childElement, parent);\n      }\n      if (prev !== null) {\n        CHECKED_CAST<Fiber>(prev).sibling = child;\n      } else {\n        // set parent to point to first child\n        parent.child = child;\n      }\n      prev = child;\n      prevByIndex =\n        prevByIndex !== null ? CHECKED_CAST<Fiber>(prevByIndex).sibling : null;\n    }\n  }\n}\n\n/**\n * Describes the `type` field of Fiber, which can hold different data depending on the fiber's kind:\n * - Component stores a function of props => element.\n * - Host stores the name of the host component, ie \"div\"\n * - Text stores the text itself.\n */\ntype Component = (props: Props) => React$MixedElement;\n\n// type FiberType =\n//   | {\n//       kind: 'component',\n//       component: Component,\n//     }\n//   | {\n//       kind: 'host',\n//       tag: string,\n//     }\n//   | {\n//       kind: 'text',\n//       text: string,\n//     };\n\nclass FiberType {\n  kind: string;\n  constructor(kind: string) {\n    this.kind = kind;\n  }\n}\n\nclass FiberTypeComponent extends FiberType {\n  component: Component;\n  constructor(component: Component) {\n    super('component');\n    this.component = component;\n  }\n}\nclass FiberTypeHost extends FiberType {\n  tag: string;\n  constructor(tag: string) {\n    super('host');\n    this.tag = tag;\n  }\n}\nclass FiberTypeText extends FiberType {\n  text: string;\n  constructor(text: string) {\n    super('text');\n    this.text = text;\n  }\n}\n\n/**\n * The type of component props as seen by the framework, because processing is heterogenous\n * the framework only looks at the identity of prop values and does not otherwise make any\n * assumptions about which props may exist and what their types are.\n */\nexport type Props = any;\n\n/**\n * Data storage for the useState() hook\n */\nclass State<T> {\n  value: T;\n  next: State<T> | null;\n  prev: State<T> | null;\n\n  constructor(value: T) {\n    this.value = value;\n\n    this.next = null;\n    this.prev = null;\n  }\n}\n\n/**\n * Represents a node in the UI tree, and may correspond to a user-defined function component,\n * a host node, or a text node.\n */\nclass Fiber {\n  type: FiberType;\n  props: Props;\n  parent: Fiber | null;\n  child: Fiber | null;\n  sibling: Fiber | null;\n  state: State<mixed> | null;\n  key: React$Key | null;\n\n  constructor(type: FiberType, props: Props, key: React$Key | null) {\n    this.type = type;\n    this.props = props;\n    this.key = key;\n\n    this.parent = null;\n    this.child = null;\n    this.sibling = null;\n    this.state = null;\n  }\n}\n\nexport function jsx(\n  type: React$ElementType,\n  props: Props,\n  key: React$Key | null,\n): React$MixedElement {\n  'inline';\n  return {\n    type: type,\n    props: props,\n    key: key,\n    ref: null,\n  };\n}\n\nexport function Fragment(props: Props): React$Node {\n  // TODO: Get this to work.\n  return props.children;\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport type {Props, React$MixedElement} from './React';\n\nimport {useState} from './React';\n\nfunction Button(props: Props): React$MixedElement {\n  return (\n    <button id={props.id} onClick={props.onClick}>\n      Click me\n    </button>\n  );\n}\n\nfunction Input(props: Props): React$MixedElement {\n  return (\n    <input\n      id={props.id}\n      type=\"text\"\n      onChange={props.onChange}\n      value={props.value}\n    />\n  );\n}\n\nfunction TextArea(props: Props): React$MixedElement {\n  return <textarea onChange={props.onChange}>{props.value}</textarea>;\n}\n\nfunction Select(props: Props): React$MixedElement {\n  const children = [];\n  for (let i = 0; i < props.options.length; i++) {\n    const option = props.options[i];\n    children.push(\n      <option key={option.value} value={option.value}>\n        {option.label}\n      </option>,\n    );\n  }\n  return <select onChange={props.onChange}>{children}</select>;\n}\n\nfunction Checkbox(props: Props): React$MixedElement {\n  return (\n    <input type=\"checkbox\" checked={props.checked} onChange={props.onChange} />\n  );\n}\n\nfunction Radio(props: Props): React$MixedElement {\n  return (\n    <input type=\"radio\" checked={props.checked} onChange={props.onChange} />\n  );\n}\n\nfunction Slider(props: Props): React$MixedElement {\n  return (\n    <input\n      type=\"range\"\n      min={props.min}\n      max={props.max}\n      step={props.step}\n      value={props.value}\n      onChange={props.onChange}\n    />\n  );\n}\n\nfunction ProgressBar(props: Props): React$MixedElement {\n  return <div style={{width: `${props.progress}%`}}></div>;\n}\n\nfunction Spinner(props: Props): React$MixedElement {\n  return <div className=\"spinner\">Loading...</div>;\n}\n\nfunction Modal(props: Props): React$MixedElement {\n  if (!props.isOpen) {\n    return <div className=\"modal closed\" />;\n  }\n\n  return (\n    <div className=\"modal open\">\n      <div className=\"overlay\" onClick={props.onClose}>\n        X\n      </div>\n      <div className=\"content\">{props.children}</div>\n    </div>\n  );\n}\n\nfunction Tooltip(props: Props): React$MixedElement {\n  if (!props.isOpen) {\n    return <div className=\"tooltip closed\" />;\n  }\n\n  return (\n    <div className=\"tooltip open\">\n      <div className=\"arrow\"></div>\n      <div className=\"content\">{props.children}</div>\n    </div>\n  );\n}\n\nexport default function App(props: Props): React$MixedElement {\n  const [text, setText] = useState<string>('');\n  const [number, setNumber] = useState<number>(0);\n  const [isChecked, setIsChecked] = useState<boolean>(false);\n  const [isSelected, setIsSelected] = useState<boolean>(false);\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n  const [isTooltipOpen, setIsTooltipOpen] = useState<boolean>(true);\n  return (\n    <div>\n      <h1>React Benchmark</h1>\n      <Button id=\"toggle-modal\" onClick={(): void => setIsOpen(!isOpen)}>\n        Toggle Modal\n      </Button>\n      <Modal isOpen={isOpen} onClose={(): void => setIsOpen(false)}>\n        <h2>Modal Content</h2>\n        <p>This is some modal content.</p>\n        <Tooltip\n          isOpen={isTooltipOpen}\n          onClose={(): void => setIsTooltipOpen(false)}>\n          <h3>Tooltip Content</h3>\n          <p>This is some tooltip content.</p>\n        </Tooltip>\n      </Modal>\n      <div>\n        <h2>Form Elements</h2>\n        <Input\n          id=\"update-text\"\n          value={text}\n          onChange={e => setText(e.target.value)}\n        />\n        <TextArea value={text} onChange={e => setText(e.target.value)} />\n        <Select\n          options={[\n            {label: 'Option 1', value: 1},\n            {label: 'Option 2', value: 2},\n            {label: 'Option 3', value: 3},\n          ]}\n          onChange={e => setNumber(parseInt(e.target.value))}\n        />\n        <Checkbox\n          checked={isChecked}\n          onChange={e => setIsChecked(e.target.checked)}\n        />\n        <Radio\n          checked={isSelected}\n          onChange={e => setIsSelected(e.target.checked)}\n        />\n        <Slider\n          min={0}\n          max={100}\n          step={1}\n          value={number}\n          onChange={e => setNumber(parseInt(e.target.value))}\n        />\n        <ProgressBar progress={number} />\n        <Spinner />\n      </div>\n    </div>\n  );\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport type {Props, React$MixedElement} from './React';\n\nimport * as React from './React';\nimport App from './App';\nimport {drainMicrotaskQueue} from './microtask';\n\nfunction printIf1(i: number, str: string): void {\n  if (i === 1) {\n    print('===============================');\n    print(str);\n    print('===============================');\n  }\n}\n\nfunction run(N: number): void {\n  for (let i: number = 1; i <= N; ++i) {\n    const root = React.createRoot();\n    const rootElement = <App />;\n    printIf1(i, root.render(rootElement));\n\n    React.callOnClickOrChange('toggle-modal', null);\n    React.callOnClickOrChange('update-text', {\n      target: {value: '!!!!! some text !!!!!'},\n    });\n    drainMicrotaskQueue();\n    printIf1(i, root.render(rootElement));\n  }\n}\n\nrun(1);\n"],"mappings":"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"}