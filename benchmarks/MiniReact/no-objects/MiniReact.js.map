{"version":3,"names":["invariant$default","condition","format","Error","CHECKED_CAST$default","value","T","React$INTERNAL$queueMicrotask","callback","HermesInternal","enqueueJob","React$INTERNAL$fastArrayJoin","arr","sep","result","i","e","length","React$React$Node","React$INTERNAL$React$Element","React$INTERNAL$React$ElementType","React$INTERNAL$Component","type","ElementType","props","React$Props","key","React$INTERNAL$React$Key","ref","constructor","React$React$MixedElement","React$INTERNAL$workInProgressRoot","React$INTERNAL$Root","React$INTERNAL$workInProgressFiber","React$INTERNAL$Fiber","React$INTERNAL$workInProgressState","React$INTERNAL$State","React$INTERNAL$renderPhaseUpdateQueue","React$INTERNAL$Update","React$createRoot","React$useState","initial","prev","root","fiber","state","_workInProgressState","nextState","next","updater","update","Updater","push","notify","run","fn","changed","Object","is","element","updateQueue","doWork","render","hasChanges","output","printFiber","mustRender","mountFiber","fiber2","renderFiber","child","sibling","parent","out","kind","tag","React$INTERNAL$FiberTypeHost","prop","entries","JSON","stringify","printChildren","text","React$INTERNAL$FiberTypeText","current","React$INTERNAL$FiberTypeComponent","component","iterationCount","reconcileFiber","elementOrString","React$INTERNAL$FiberType","children","Array","isArray","childElement","prevChild","reconcileChildren","childrenArray","reconcileMultipleChildren","keyedChildren","Map","set","prevByIndex","prevFiber","get","React$createElement","index$INTERNAL$Title","index$INTERNAL$MyComponent","_props","index$INTERNAL$run","N","rendered","print"],"sources":["benchmarks/MiniReact/no-objects/src/invariant.js","benchmarks/MiniReact/no-objects/src/CHECKED_CAST.js","benchmarks/MiniReact/no-objects/src/React.js","benchmarks/MiniReact/no-objects/src/index.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nexport default function invariant(condition: boolean, format: string): void {\n  'inline';\n\n  if (!condition) {\n    throw new Error(format);\n  }\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nexport default function CHECKED_CAST<T>(value: mixed): T {\n  'inline';\n  return (value: any);\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport invariant from './invariant';\nimport CHECKED_CAST from './CHECKED_CAST';\n\nfunction queueMicrotask(callback: () => void) {\n  HermesInternal.enqueueJob(callback);\n}\n\nfunction fastArrayJoin(arr: string[], sep: string): string {\n  let result: string = '';\n  for (let i: number = 0, e = arr.length; i < e; ++i) {\n    if (i !== 0) result += sep;\n    result += arr[i];\n  }\n  return result;\n}\n\nexport type React$Node = string | React$Element<React$ElementType>;\n\n/**\n * The type of an element in React. A React element may be a:\n *\n * - String. These elements are intrinsics that depend on the React renderer\n *   implementation.\n * - React component. See `ComponentType` for more information about its\n *   different variants.\n */\ntype React$ElementType =\n  | string\n  | Component /* TODO: React$AbstractComponent<empty, mixed> */;\n\n/**\n * Type of a React element. React elements are commonly created using JSX\n * literals, which desugar to React.createElement calls (see below).\n */\n// type React$Element<ElementType: React$ElementType> = {|\n//   type: ElementType,\n//   props: Props,\n//   key: React$Key | null,\n//   ref: any,\n// |};\nclass React$Element<ElementType> {\n  type: ElementType;\n  props: Props;\n  key: React$Key | null;\n  ref: any;\n\n  constructor(\n    type: ElementType,\n    props: Props,\n    key: React$Key | null,\n    ref: any,\n  ) {\n    this.type = type;\n    this.props = props;\n    this.key = key;\n    this.ref = ref;\n  }\n}\n\nexport type React$MixedElement = React$Element<React$ElementType>;\n\n/**\n * The type of the key that React uses to determine where items in a new list\n * have moved.\n */\ntype React$Key = string | number;\n\n/* eslint-disable lint/strictly-null, lint/react-state-props-mutation, lint/flow-react-element */\n\n/**\n * The current root\n */\nlet workInProgressRoot: Root | null = null;\n\n/**\n * The currently rendering fiber. Only set when a component is being rendered.\n */\nlet workInProgressFiber: Fiber | null = null;\n\n/**\n * The previous state hook, or null if no state hook has been evaluated yet.\n */\nlet workInProgressState: State<mixed> | null = null;\n\n/**\n * Queue of updates triggered *during* render.\n */\nconst renderPhaseUpdateQueue: Update<mixed>[] = [];\n\n/**\n * Public API to create a new \"root\", this is where React attaches rendering to a host element.\n * In our case we don't actually have a real host, and currently only \"render\" to strings.\n */\nexport function createRoot(): Root {\n  return new Root();\n}\n\n/**\n * Hook to create (on initial render) or access (on update) a state, using the index of the useState\n * call within the component as the identity. Thus conditionally calling this API can cause state to\n * be lost.\n */\nexport function useState<T>(\n  /**\n   * Initial value of the state\n   */\n  initial: T,\n): [T, (value: T | ((prev: T) => T)) => void] {\n  const root = workInProgressRoot;\n  const fiber = workInProgressFiber;\n  invariant(\n    fiber !== null && root !== null,\n    'useState() called outside of render',\n  );\n\n  let state: State<T>;\n  const _workInProgressState = workInProgressState;\n  if (_workInProgressState === null) {\n    // Get or initialize the first state on the fiber\n    let nextState = fiber.state;\n    if (nextState === null) {\n      nextState = new State(initial);\n      fiber.state = nextState;\n    }\n    // NOTE: in case of a re-render we assume that the hook types match but\n    // can't statically prove this\n    state = CHECKED_CAST<State<T>>(nextState);\n  } else {\n    let nextState = _workInProgressState.next;\n    if (nextState === null) {\n      nextState = new State(initial);\n      _workInProgressState.next = nextState;\n    }\n    // NOTE: in case of a re-render we assume that the hook types match but\n    // can't statically prove this\n    state = CHECKED_CAST<State<T>>(nextState);\n  }\n  // NOTE: this should just work because of subtying, State<T> should be subtype of State<mixed>\n  workInProgressState = CHECKED_CAST<State<mixed>>(state);\n  return [\n    // Untyped check that the existing state value has the correct type,\n    // This is safe if components follow the rules of hooks\n    CHECKED_CAST<T>(state.value),\n    updater => {\n      const update = new Update<mixed>(\n        fiber,\n        CHECKED_CAST<State<mixed>>(state),\n        CHECKED_CAST<Updater<mixed>>(updater),\n      );\n      if (workInProgressFiber !== null) {\n        // called during render\n        renderPhaseUpdateQueue.push(update);\n      } else {\n        root.notify(update);\n      }\n    },\n  ];\n}\n\n/**\n * The type of value that may be passed to the setState function (second part of useState return value).\n * - T: the new value\n * - (prev: T) => T: a function to compute the new value from the old value\n */\n// type Updater<T> = T | ((prev: T) => T);\n\n/**\n * The type of the setState function (second element of the array returned by useState).\n */\n// type SetState<T> = (value: Updater<T>) => void;\n\n/**\n * A queued state update.\n */\nclass Update<T> {\n  fiber: Fiber; // used to check state updates that occur during render to see if they came from the current component.\n  state: State<T>;\n  updater: T | ((prev: T) => T); // Updater<T>;\n\n  constructor(fiber: Fiber, state: State<T>, updater: T | ((prev: T) => T)) {\n    this.fiber = fiber;\n    this.state = state;\n    this.updater = updater;\n  }\n\n  /**\n   * Process the state update\n   */\n  run(): boolean {\n    const state = this.state;\n    let value: T = state.value;\n    const updater = this.updater;\n    if (typeof updater === 'function') {\n      // NOTE: The type of Updater<T> is meant to expresss `T (not function) | T (function of T => T)`\n      // thus the fact that updater is a function here menas its a function of T => T.\n      const fn = CHECKED_CAST<(prev: T) => T>(updater);\n      value = fn(state.value);\n    } else {\n      // NOTE: The type of Updater<T> is meant to expresss `T (not function) | T (function of T => T)`\n      // thus the fact that updater is *not* a function here means it is a T\n      value = CHECKED_CAST<T>(updater);\n    }\n    const changed = !Object.is(state.value, value);\n    state.value = value;\n    return changed;\n  }\n}\n\nclass Root {\n  /**\n   * The fiber representing the root node (`element`), null until\n   * render is first called.\n   */\n  root: Fiber | null;\n\n  /**\n   * The last rendered root element, initially null.\n   */\n  element: React$MixedElement | null;\n\n  /**\n   * Queue of updates (state changes) to apply on the next render\n   */\n  updateQueue: Update<mixed>[];\n\n  constructor() {\n    this.root = null;\n    this.element = null;\n    this.updateQueue = ([]: Update<mixed>[]);\n  }\n\n  /**\n   * Notify the root that an update is scheduled\n   */\n  notify(update: Update<mixed>): void {\n    this.updateQueue.push(update);\n    if (this.updateQueue.length === 1) {\n      queueMicrotask((): void => {\n        const element = this.element;\n        invariant(\n          element !== null,\n          'Expected an element to be set after rendering',\n        );\n        this.doWork(CHECKED_CAST<React$MixedElement>(element));\n      });\n    }\n  }\n\n  /**\n   * Drive any remaining work to completion and return the rendered result\n   */\n  render(element: React$MixedElement): string {\n    invariant(\n      workInProgressFiber === null && workInProgressState === null,\n      'Cannot render, an existing render is in progress',\n    );\n    const hasChanges = element !== this.element;\n    this.element = element;\n    if (hasChanges) {\n      this.doWork(element);\n    }\n\n    invariant(this.root !== null, 'Expected root to be rendered');\n    const root: Fiber = CHECKED_CAST<Fiber>(this.root);\n    const output: string[] = [];\n    this.printFiber(root, output);\n    // return output.join('');\n    return fastArrayJoin(output, '');\n  }\n\n  doWork(element: React$MixedElement): void {\n    let mustRender = this.root === null;\n    for (const update of this.updateQueue) {\n      mustRender = update.run() || mustRender;\n    }\n    this.updateQueue = ([]: Update<mixed>[]);\n    if (!mustRender) {\n      return;\n    }\n\n    // Visit the tree in pre-order, rendering each node\n    // and then processing its children\n    // eslint-disable-next-line consistent-this\n    workInProgressRoot = this;\n    let fiber = this.root;\n    if (fiber === null) {\n      fiber = this.mountFiber(element, null);\n      this.root = fiber;\n    }\n    while (fiber !== null) {\n      // Render the fiber, which creates child/sibling nodes\n      let fiber2: Fiber = CHECKED_CAST<Fiber>(fiber);\n      this.renderFiber(fiber2);\n      // advance to the next fiber\n      if (fiber2.child !== null) {\n        fiber = fiber2.child;\n      } else if (fiber2.sibling !== null) {\n        fiber = fiber2.sibling;\n      } else {\n        fiber = fiber2.parent;\n        while (fiber !== null && CHECKED_CAST<Fiber>(fiber).sibling === null) {\n          fiber = CHECKED_CAST<Fiber>(fiber).parent;\n        }\n        if (fiber !== null) {\n          fiber = CHECKED_CAST<Fiber>(fiber).sibling;\n        }\n      }\n    }\n    workInProgressRoot = null;\n  }\n\n  /**\n   * Prints a representation of the output DOM as HTML, emitting HTML snippets to @param out.\n   */\n  printFiber(fiber: Fiber, out: string[]): void {\n    switch (fiber.type.kind) {\n      case 'host': {\n        const tag = CHECKED_CAST<FiberTypeHost>(fiber.type).tag;\n        out.push('<' + tag);\n        for (const prop of Object.entries(fiber.props)) {\n          out.push(\n            ` ${prop.prop}=${JSON.stringify(prop.value) ?? 'undefined'}`,\n          );\n        }\n        out.push('>');\n        this.printChildren(fiber, out);\n        out.push('</' + tag + '>');\n        break;\n      }\n      case 'text': {\n        const text = CHECKED_CAST<FiberTypeText>(fiber.type).text;\n        out.push(text);\n        break;\n      }\n      case 'component': {\n        this.printChildren(fiber, out);\n        break;\n      }\n    }\n  }\n\n  printChildren(fiber: Fiber, out: string[]): void {\n    let current: Fiber | null = fiber.child;\n    while (current !== null) {\n      this.printFiber(CHECKED_CAST<Fiber>(current), out);\n      current = CHECKED_CAST<Fiber>(current).sibling;\n    }\n  }\n\n  /**\n   * Renders and reconciles the output of the given @param fiber. Note that this does not *render*\n   * children, it only reconciles the current output of the fiber with the previous children.\n   */\n  renderFiber(fiber: Fiber): void {\n    try {\n      workInProgressFiber = fiber;\n      workInProgressState = null;\n      switch (fiber.type.kind) {\n        case 'component': {\n          invariant(\n            renderPhaseUpdateQueue.length === 0,\n            'Expected no queued render updates',\n          );\n          const render: (props: Props) => React$MixedElement =\n            CHECKED_CAST<FiberTypeComponent>(fiber.type).component;\n          let element = render(fiber.props);\n          let iterationCount: number = 0;\n          while (renderPhaseUpdateQueue.length !== 0) {\n            iterationCount++;\n            invariant(\n              iterationCount < 1000,\n              'Possible infinite loop with setState during render',\n            );\n            let hasChanges = false;\n            for (const update of renderPhaseUpdateQueue) {\n              invariant(\n                update.fiber === fiber,\n                'setState() during render is currently only supported when updating the component ' +\n                  'being rendered. Setting state from another component is not supported.',\n              );\n              hasChanges = update.run() || hasChanges;\n            }\n            renderPhaseUpdateQueue.length = 0;\n            if (!hasChanges) {\n              break;\n            }\n            element = render(fiber.props);\n          }\n          fiber.child = this.reconcileFiber(fiber, fiber.child, element);\n          break;\n        }\n        case 'host':\n        case 'text': {\n          // Nothing to reconcile, these nodes are visited by the main doWork() loop\n          break;\n        }\n      }\n    } finally {\n      workInProgressFiber = null;\n      workInProgressState = null;\n    }\n  }\n\n  /**\n   * Create a new fiber for the given element. Used when there is no fiber at\n   * a given tree position which can be reused.\n   */\n  mountFiber(elementOrString: React$Node, parent: Fiber | null): Fiber {\n    let fiber: Fiber;\n    if (typeof elementOrString === 'object') {\n      const element = CHECKED_CAST<React$MixedElement>(elementOrString);\n      if (typeof element.type === 'function') {\n        const component: Component = CHECKED_CAST<Component>(element.type);\n        // const type: FiberType = {\n        //   kind: 'component',\n        //   component,\n        // };\n        const type: FiberType = new FiberTypeComponent(component);\n        fiber = new Fiber(type, (element.props: any), element.key);\n      } else {\n        invariant(\n          typeof element.type === 'string',\n          'Expected a host component name such as \"div\" or \"span\", got ' +\n            CHECKED_CAST<string>(element.type),\n        );\n        // const type: FiberType = {\n        //   kind: 'host',\n        //   tag: element.type,\n        // };\n        const type: FiberType = new FiberTypeHost(\n          CHECKED_CAST<string>(element.type),\n        );\n        invariant(\n          element.props !== null && typeof element.props === 'object',\n          'Expected component props',\n        );\n\n        // const {children, ...props} = element.props;\n        const children = element.props.children;\n        const props = {...element.props};\n        delete props.children;\n\n        fiber = new Fiber(type, props, element.key);\n        if (Array.isArray(children)) {\n          let prev: Fiber | null = null;\n          for (const childElement of CHECKED_CAST<any[]>(children)) {\n            const child = this.mountFiber(\n              CHECKED_CAST<React$Node>(childElement),\n              fiber,\n            );\n            if (prev !== null) {\n              CHECKED_CAST<Fiber>(prev).sibling = child;\n            } else {\n              // set parent to point to first child\n              fiber.child = child;\n            }\n            prev = child;\n          }\n        } else if (typeof children === 'string') {\n          const child = new Fiber({kind: 'text', text: children}, {}, null);\n          child.parent = fiber;\n          fiber.child = child;\n        } else if (children != null) {\n          const child = this.mountFiber((children: any), fiber);\n          fiber.child = child;\n        }\n      }\n    } else {\n      invariant(typeof elementOrString === 'string', 'Expected a string');\n      // const type: FiberType = {\n      //   kind: 'text',\n      //   text: element,\n      // };\n      const type = new FiberTypeText(CHECKED_CAST<string>(elementOrString));\n      fiber = new Fiber(type, {}, null);\n    }\n    fiber.parent = parent;\n    return fiber;\n  }\n\n  /**\n   * Update's @param parent's child to reflect the latest desired output as described by @param element.\n   * This either reuses @param prevChild if present and the component type matches, otherwise it creates\n   * a new Fiber.\n   */\n  reconcileFiber(\n    parent: Fiber,\n    prevChild: Fiber | null,\n    element: React$MixedElement,\n  ): Fiber {\n    if (\n      prevChild !== null &&\n      CHECKED_CAST<Fiber>(prevChild).type === element.type\n    ) {\n      let prevChild: Fiber = CHECKED_CAST<Fiber>(prevChild);\n      // Only host nodes have to be reconciled: otherwise this is a function component\n      // and its children will be reconciled when they are later emitted in a host\n      // position (ie as a direct result of render)\n      if (prevChild.type.kind === 'host') {\n        invariant(\n          element.props !== null && typeof element.props === 'object',\n          'Expected component props',\n        );\n\n        // const {children, ...props} = element.props;\n        const children = element.props.children;\n        const props = {...element.props};\n        delete props.children;\n\n        prevChild.props = props;\n        this.reconcileChildren(prevChild, (children: any));\n      } else if (prevChild.type.kind === 'component') {\n        invariant(\n          element.props !== null && typeof element.props === 'object',\n          'Expected component props',\n        );\n        prevChild.props = element.props;\n      }\n      return prevChild;\n    } else {\n      const child = this.mountFiber(element, parent);\n      return child;\n    }\n  }\n\n  /**\n   * Reconciles the @param parent fiber's children nodes.\n   */\n  reconcileChildren(\n    parent: Fiber,\n    children: React$MixedElement[] | React$MixedElement | string | null | void,\n  ): void {\n    const prevChild: Fiber | null = parent.child;\n    if (Array.isArray(children)) {\n      let childrenArray = CHECKED_CAST<React$MixedElement[]>(children);\n      // Fast-path for empty and single-element arrays\n      if (childrenArray.length === 0) {\n        parent.child = null;\n      } else if (childrenArray.length === 1) {\n        parent.child = this.reconcileFiber(parent, prevChild, childrenArray[0]);\n        CHECKED_CAST<Fiber>(parent.child).sibling = null;\n      } else {\n        this.reconcileMultipleChildren(parent, childrenArray);\n      }\n    } else if (typeof children === 'string') {\n      if (\n        prevChild === null ||\n        CHECKED_CAST<Fiber>(prevChild).type.kind !== 'text'\n      ) {\n        const child = new Fiber({kind: 'text', text: children}, {}, null);\n        parent.child = child;\n      } else {\n        CHECKED_CAST<FiberTypeText>(CHECKED_CAST<Fiber>(prevChild).type).text =\n          CHECKED_CAST<string>(children);\n      }\n    } else if (children != null) {\n      parent.child = this.reconcileFiber(\n        parent,\n        prevChild,\n        CHECKED_CAST<React$MixedElement>(children),\n      );\n      CHECKED_CAST<Fiber>(parent.child).sibling = null;\n    } else {\n      parent.child = null;\n      if (prevChild !== null) {\n        CHECKED_CAST<Fiber>(prevChild).parent = null;\n      }\n    }\n  }\n\n  /**\n   * Reconciles the @param parent fiber's children when the children are known to\n   * have 2+ items. Note that the algorithm works for 0+ elements but a fast-path\n   * should be used for 0/1 item cases.\n   */\n  reconcileMultipleChildren(\n    parent: Fiber,\n    children: React$MixedElement[],\n  ): void {\n    invariant(\n      children.length > 1,\n      'Expected children to have multiple elements',\n    );\n    // map existing children by key to make subsequent lookup O(log n)\n    const keyedChildren: any = new Map();\n    let current: Fiber | null = parent.child;\n    while (current !== null) {\n      if (CHECKED_CAST<Fiber>(current).key !== null) {\n        keyedChildren.set(CHECKED_CAST<Fiber>(current).key, current);\n      }\n      current = CHECKED_CAST<Fiber>(current).sibling;\n    }\n    let prev: Fiber | null = null; // previous fiber at this key/index\n    let prevByIndex: Fiber | null = parent.child; // keep track of prev fiber at this index\n    for (const childElement of children) {\n      const prevFiber =\n        (childElement.key != null\n          ? keyedChildren.get(childElement.key)\n          : null) ?? prevByIndex;\n      let child: Fiber;\n      if (prevFiber != null) {\n        child = this.reconcileFiber(parent, prevFiber, childElement);\n      } else {\n        child = this.mountFiber(childElement, parent);\n      }\n      if (prev !== null) {\n        CHECKED_CAST<Fiber>(prev).sibling = child;\n      } else {\n        // set parent to point to first child\n        parent.child = child;\n      }\n      prev = child;\n      prevByIndex =\n        prevByIndex !== null ? CHECKED_CAST<Fiber>(prevByIndex).sibling : null;\n    }\n  }\n}\n\n/**\n * Describes the `type` field of Fiber, which can hold different data depending on the fiber's kind:\n * - Component stores a function of props => element.\n * - Host stores the name of the host component, ie \"div\"\n * - Text stores the text itself.\n */\ntype Component = (props: Props) => React$MixedElement;\n\n// type FiberType =\n//   | {\n//       kind: 'component',\n//       component: Component,\n//     }\n//   | {\n//       kind: 'host',\n//       tag: string,\n//     }\n//   | {\n//       kind: 'text',\n//       text: string,\n//     };\n\nclass FiberType {\n  kind: string;\n  constructor(kind: string) {\n    this.kind = kind;\n  }\n}\n\nclass FiberTypeComponent extends FiberType {\n  component: Component;\n  constructor(component: Component) {\n    super('component');\n    this.component = component;\n  }\n}\nclass FiberTypeHost extends FiberType {\n  tag: string;\n  constructor(tag: string) {\n    super('host');\n    this.tag = tag;\n  }\n}\nclass FiberTypeText extends FiberType {\n  text: string;\n  constructor(text: string) {\n    super('text');\n    this.text = text;\n  }\n}\n\n/**\n * The type of component props as seen by the framework, because processing is heterogenous\n * the framework only looks at the identity of prop values and does not otherwise make any\n * assumptions about which props may exist and what their types are.\n */\nexport type Props = any;\n\n/**\n * Data storage for the useState() hook\n */\nclass State<T> {\n  value: T;\n  next: State<T> | null;\n  prev: State<T> | null;\n\n  constructor(value: T) {\n    this.value = value;\n\n    this.next = null;\n    this.prev = null;\n  }\n}\n\n/**\n * Represents a node in the UI tree, and may correspond to a user-defined function component,\n * a host node, or a text node.\n */\nclass Fiber {\n  type: FiberType;\n  props: Props;\n  parent: Fiber | null;\n  child: Fiber | null;\n  sibling: Fiber | null;\n  state: State<mixed> | null;\n  key: React$Key | null;\n\n  constructor(type: FiberType, props: Props, key: React$Key | null) {\n    this.type = type;\n    this.props = props;\n    this.key = key;\n\n    this.parent = null;\n    this.child = null;\n    this.sibling = null;\n    this.state = null;\n  }\n}\n\nexport function createElement(\n  type: React$ElementType,\n  props: Props,\n  key: React$Key | null,\n): React$MixedElement {\n  'inline';\n  return {\n    type: type,\n    props: props,\n    key: key,\n    ref: null,\n  };\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport type {Props, React$MixedElement} from './React';\n\nimport * as React from './React';\n\nfunction Title(props: Props): React$MixedElement {\n  return React.createElement(\n    'h1',\n    {\n      children: props.children,\n    },\n    null,\n  );\n}\n\nfunction MyComponent(_props: Props): React$MixedElement {\n  return React.createElement(\n    'div',\n    {\n      children: [\n        React.createElement(\n          Title,\n          {\n            children: 'Hello',\n          },\n          null,\n        ),\n        ' world!',\n      ],\n    },\n    null,\n  );\n}\n\nfunction run(): void {\n  var N = 1;\n  for (var i = 0; i < N; ++i) {\n    var root = React.createRoot();\n    var rendered = root.render(React.createElement(MyComponent, {}, null));\n  }\n  print(rendered);\n}\n\nrun();\n"],"mappings":"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"}